// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trafficcontrol {
PROTOBUF_CONSTEXPR Routing::Routing(
    ::_pbi::ConstantInitialized)
  : inbounds_()
  , outbounds_()
  , routers_()
  , namespace__(nullptr)
  , service_(nullptr)
  , ctime_(nullptr)
  , mtime_(nullptr)
  , revision_(nullptr)
  , service_token_(nullptr)
  , id_(nullptr)
  , failover_(nullptr){}
struct RoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingDefaultTypeInternal() {}
  union {
    Routing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingDefaultTypeInternal _Routing_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , routing_config_(nullptr)
  , routing_policy_(0)
{}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
PROTOBUF_CONSTEXPR MatchString::MatchString(
    ::_pbi::ConstantInitialized)
  : value_(nullptr)
  , type_(0)

  , value_type_(0)
{}
struct MatchStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStringDefaultTypeInternal() {}
  union {
    MatchString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStringDefaultTypeInternal _MatchString_default_instance_;
PROTOBUF_CONSTEXPR Locality::Locality(
    ::_pbi::ConstantInitialized)
  : region_(nullptr)
  , zone_(nullptr)
  , campus_(nullptr){}
struct LocalityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalityDefaultTypeInternal() {}
  union {
    Locality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalityDefaultTypeInternal _Locality_default_instance_;
PROTOBUF_CONSTEXPR FailoverConfig::FailoverConfig(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , total_count_(nullptr)
  , healthy_count_(nullptr)
  , healthy_percent_(nullptr){}
struct FailoverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FailoverConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FailoverConfigDefaultTypeInternal() {}
  union {
    FailoverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FailoverConfigDefaultTypeInternal _FailoverConfig_default_instance_;
PROTOBUF_CONSTEXPR RuleRoutingConfig::RuleRoutingConfig(
    ::_pbi::ConstantInitialized)
  : inbounds_()
  , outbounds_(){}
struct RuleRoutingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleRoutingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleRoutingConfigDefaultTypeInternal() {}
  union {
    RuleRoutingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleRoutingConfigDefaultTypeInternal _RuleRoutingConfig_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized)
  : sources_()
  , destinations_(){}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
PROTOBUF_CONSTEXPR Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Source_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Source_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Source_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Source_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Source_MetadataEntry_DoNotUseDefaultTypeInternal _Source_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , service_(nullptr)
  , namespace__(nullptr)
  , locality_(nullptr){}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
PROTOBUF_CONSTEXPR Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Destination_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Destination_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Destination_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Destination_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Destination_MetadataEntry_DoNotUseDefaultTypeInternal _Destination_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Destination::Destination(
    ::_pbi::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , service_(nullptr)
  , namespace__(nullptr)
  , priority_(nullptr)
  , weight_(nullptr)
  , transfer_(nullptr)
  , isolate_(nullptr)
  , locality_(nullptr){}
struct DestinationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationDefaultTypeInternal() {}
  union {
    Destination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationDefaultTypeInternal _Destination_default_instance_;
PROTOBUF_CONSTEXPR LocalityRoutingConfig::LocalityRoutingConfig(
    ::_pbi::ConstantInitialized)
  : locality_level_(0)

  , max_locality_level_(0)
{}
struct LocalityRoutingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalityRoutingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalityRoutingConfigDefaultTypeInternal() {}
  union {
    LocalityRoutingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalityRoutingConfigDefaultTypeInternal _LocalityRoutingConfig_default_instance_;
PROTOBUF_CONSTEXPR MetadataRoutingConfig::MetadataRoutingConfig(
    ::_pbi::ConstantInitialized)
  : failover_range_(0)
{}
struct MetadataRoutingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataRoutingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataRoutingConfigDefaultTypeInternal() {}
  union {
    MetadataRoutingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataRoutingConfigDefaultTypeInternal _MetadataRoutingConfig_default_instance_;
}  // namespace trafficcontrol
static ::_pb::Metadata file_level_metadata_router_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_router_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_2eproto = nullptr;

const uint32_t TableStruct_router_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, inbounds_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, outbounds_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, ctime_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, mtime_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, revision_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, service_token_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, id_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, routers_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Routing, failover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, enable_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, routing_policy_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, routing_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, type_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, value_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, region_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, zone_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, campus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::FailoverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::FailoverConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::FailoverConfig, total_count_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::FailoverConfig, healthy_count_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::FailoverConfig, healthy_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRoutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRoutingConfig, inbounds_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRoutingConfig, outbounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, sources_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, destinations_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, metadata_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, locality_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, metadata_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, priority_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, weight_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, transfer_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, isolate_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, locality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRoutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRoutingConfig, locality_level_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRoutingConfig, max_locality_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MetadataRoutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MetadataRoutingConfig, failover_range_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::trafficcontrol::Routing)},
  { 17, -1, -1, sizeof(::trafficcontrol::Router)},
  { 26, -1, -1, sizeof(::trafficcontrol::MatchString)},
  { 35, -1, -1, sizeof(::trafficcontrol::Locality)},
  { 44, -1, -1, sizeof(::trafficcontrol::FailoverConfig)},
  { 54, -1, -1, sizeof(::trafficcontrol::RuleRoutingConfig)},
  { 62, -1, -1, sizeof(::trafficcontrol::Route)},
  { 70, 78, -1, sizeof(::trafficcontrol::Source_MetadataEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::trafficcontrol::Source)},
  { 90, 98, -1, sizeof(::trafficcontrol::Destination_MetadataEntry_DoNotUse)},
  { 100, -1, -1, sizeof(::trafficcontrol::Destination)},
  { 114, -1, -1, sizeof(::trafficcontrol::LocalityRoutingConfig)},
  { 122, -1, -1, sizeof(::trafficcontrol::MetadataRoutingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trafficcontrol::_Routing_default_instance_._instance,
  &::trafficcontrol::_Router_default_instance_._instance,
  &::trafficcontrol::_MatchString_default_instance_._instance,
  &::trafficcontrol::_Locality_default_instance_._instance,
  &::trafficcontrol::_FailoverConfig_default_instance_._instance,
  &::trafficcontrol::_RuleRoutingConfig_default_instance_._instance,
  &::trafficcontrol::_Route_default_instance_._instance,
  &::trafficcontrol::_Source_MetadataEntry_DoNotUse_default_instance_._instance,
  &::trafficcontrol::_Source_default_instance_._instance,
  &::trafficcontrol::_Destination_MetadataEntry_DoNotUse_default_instance_._instance,
  &::trafficcontrol::_Destination_default_instance_._instance,
  &::trafficcontrol::_LocalityRoutingConfig_default_instance_._instance,
  &::trafficcontrol::_MetadataRoutingConfig_default_instance_._instance,
};

const char descriptor_table_protodef_router_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014router.proto\022\016trafficcontrol\032\036google/p"
  "rotobuf/wrappers.proto\032\031google/protobuf/"
  "any.proto\"\217\004\n\007Routing\022/\n\tnamespace\030\001 \001(\013"
  "2\034.google.protobuf.StringValue\022-\n\007servic"
  "e\030\002 \001(\0132\034.google.protobuf.StringValue\022\'\n"
  "\010inbounds\030\003 \003(\0132\025.trafficcontrol.Route\022("
  "\n\toutbounds\030\004 \003(\0132\025.trafficcontrol.Route"
  "\022+\n\005ctime\030\005 \001(\0132\034.google.protobuf.String"
  "Value\022+\n\005mtime\030\006 \001(\0132\034.google.protobuf.S"
  "tringValue\022.\n\010revision\030\007 \001(\0132\034.google.pr"
  "otobuf.StringValue\022B\n\rservice_token\030\010 \001("
  "\0132\034.google.protobuf.StringValueR\rservice"
  "_token\022(\n\002id\030\t \001(\0132\034.google.protobuf.Str"
  "ingValue\022\'\n\007routers\030\n \003(\0132\026.trafficcontr"
  "ol.Router\0220\n\010failover\030\013 \001(\0132\036.trafficcon"
  "trol.FailoverConfig\"\231\001\n\006Router\022*\n\006enable"
  "\030\001 \001(\0132\032.google.protobuf.BoolValue\0225\n\016ro"
  "uting_policy\030\002 \001(\0162\035.trafficcontrol.Rout"
  "ingPolicy\022,\n\016routing_config\030\003 \001(\0132\024.goog"
  "le.protobuf.Any\"\273\002\n\013MatchString\0229\n\004type\030"
  "\001 \001(\0162+.trafficcontrol.MatchString.Match"
  "StringType\022+\n\005value\030\002 \001(\0132\034.google.proto"
  "buf.StringValue\0229\n\nvalue_type\030\003 \001(\0162%.tr"
  "afficcontrol.MatchString.ValueType\"U\n\017Ma"
  "tchStringType\022\t\n\005EXACT\020\000\022\t\n\005REGEX\020\001\022\016\n\nN"
  "OT_EQUALS\020\002\022\013\n\007INCLUDE\020\003\022\017\n\013NOT_INCLUDE\020"
  "\004\"2\n\tValueType\022\010\n\004TEXT\020\000\022\r\n\tPARAMETER\020\001\022"
  "\014\n\010VARIABLE\020\002\"\217\001\n\010Locality\022+\n\006region\030\001 \001"
  "(\0132\033.trafficcontrol.MatchString\022)\n\004zone\030"
  "\002 \001(\0132\033.trafficcontrol.MatchString\022+\n\006ca"
  "mpus\030\003 \001(\0132\033.trafficcontrol.MatchString\""
  "\333\001\n\016FailoverConfig\022*\n\006enable\030\001 \001(\0132\032.goo"
  "gle.protobuf.BoolValue\0221\n\013total_count\030\002 "
  "\001(\0132\034.google.protobuf.UInt32Value\0223\n\rhea"
  "lthy_count\030\003 \001(\0132\034.google.protobuf.UInt3"
  "2Value\0225\n\017healthy_percent\030\004 \001(\0132\034.google"
  ".protobuf.UInt32Value\"f\n\021RuleRoutingConf"
  "ig\022\'\n\010inbounds\030\001 \003(\0132\025.trafficcontrol.Ro"
  "ute\022(\n\toutbounds\030\002 \003(\0132\025.trafficcontrol."
  "Route\"c\n\005Route\022\'\n\007sources\030\001 \003(\0132\026.traffi"
  "ccontrol.Source\0221\n\014destinations\030\002 \003(\0132\033."
  "trafficcontrol.Destination\"\232\002\n\006Source\022-\n"
  "\007service\030\001 \001(\0132\034.google.protobuf.StringV"
  "alue\022/\n\tnamespace\030\002 \001(\0132\034.google.protobu"
  "f.StringValue\0226\n\010metadata\030\003 \003(\0132$.traffi"
  "ccontrol.Source.MetadataEntry\022*\n\010localit"
  "y\030\004 \001(\0132\030.trafficcontrol.Locality\032L\n\rMet"
  "adataEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033"
  ".trafficcontrol.MatchString:\0028\001\"\337\003\n\013Dest"
  "ination\022-\n\007service\030\001 \001(\0132\034.google.protob"
  "uf.StringValue\022/\n\tnamespace\030\002 \001(\0132\034.goog"
  "le.protobuf.StringValue\022;\n\010metadata\030\003 \003("
  "\0132).trafficcontrol.Destination.MetadataE"
  "ntry\022.\n\010priority\030\004 \001(\0132\034.google.protobuf"
  ".UInt32Value\022,\n\006weight\030\005 \001(\0132\034.google.pr"
  "otobuf.UInt32Value\022.\n\010transfer\030\006 \001(\0132\034.g"
  "oogle.protobuf.StringValue\022+\n\007isolate\030\007 "
  "\001(\0132\032.google.protobuf.BoolValue\022*\n\010local"
  "ity\030\010 \001(\0132\030.trafficcontrol.Locality\032L\n\rM"
  "etadataEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\013"
  "2\033.trafficcontrol.MatchString:\0028\001\"\361\001\n\025Lo"
  "calityRoutingConfig\022K\n\016locality_level\030\001 "
  "\001(\01623.trafficcontrol.LocalityRoutingConf"
  "ig.LocalityLevel\022O\n\022max_locality_level\030\002"
  " \001(\01623.trafficcontrol.LocalityRoutingCon"
  "fig.LocalityLevel\":\n\rLocalityLevel\022\n\n\006CA"
  "MPUS\020\000\022\010\n\004ZONE\020\001\022\n\n\006REGION\020\002\022\007\n\003ALL\020\003\"\232\001"
  "\n\025MetadataRoutingConfig\022K\n\016failover_rang"
  "e\030\001 \001(\01623.trafficcontrol.MetadataRouting"
  "Config.FailoverRange\"4\n\rFailoverRange\022\007\n"
  "\003ALL\020\000\022\n\n\006OTHERS\020\001\022\016\n\nOTHER_KEYS\020\002*G\n\rRo"
  "utingPolicy\022\016\n\nRulePolicy\020\000\022\022\n\016MetadataP"
  "olicy\020\001\022\022\n\016LocalityPolicy\020\002B>\n%cn.polari"
  "smesh.polaris.trafficcontrolZ\025api/v1/tra"
  "fficcontrolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_router_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_router_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_2eproto = {
    false, false, 2979, descriptor_table_protodef_router_2eproto,
    "router.proto",
    &descriptor_table_router_2eproto_once, descriptor_table_router_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_router_2eproto::offsets,
    file_level_metadata_router_2eproto, file_level_enum_descriptors_router_2eproto,
    file_level_service_descriptors_router_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_2eproto_getter() {
  return &descriptor_table_router_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_2eproto(&descriptor_table_router_2eproto);
namespace trafficcontrol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_MatchStringType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[0];
}
bool MatchString_MatchStringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_MatchStringType MatchString::EXACT;
constexpr MatchString_MatchStringType MatchString::REGEX;
constexpr MatchString_MatchStringType MatchString::NOT_EQUALS;
constexpr MatchString_MatchStringType MatchString::INCLUDE;
constexpr MatchString_MatchStringType MatchString::NOT_INCLUDE;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MIN;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MAX;
constexpr int MatchString::MatchStringType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[1];
}
bool MatchString_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_ValueType MatchString::TEXT;
constexpr MatchString_ValueType MatchString::PARAMETER;
constexpr MatchString_ValueType MatchString::VARIABLE;
constexpr MatchString_ValueType MatchString::ValueType_MIN;
constexpr MatchString_ValueType MatchString::ValueType_MAX;
constexpr int MatchString::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalityRoutingConfig_LocalityLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[2];
}
bool LocalityRoutingConfig_LocalityLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::CAMPUS;
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::ZONE;
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::REGION;
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::ALL;
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::LocalityLevel_MIN;
constexpr LocalityRoutingConfig_LocalityLevel LocalityRoutingConfig::LocalityLevel_MAX;
constexpr int LocalityRoutingConfig::LocalityLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataRoutingConfig_FailoverRange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[3];
}
bool MetadataRoutingConfig_FailoverRange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MetadataRoutingConfig_FailoverRange MetadataRoutingConfig::ALL;
constexpr MetadataRoutingConfig_FailoverRange MetadataRoutingConfig::OTHERS;
constexpr MetadataRoutingConfig_FailoverRange MetadataRoutingConfig::OTHER_KEYS;
constexpr MetadataRoutingConfig_FailoverRange MetadataRoutingConfig::FailoverRange_MIN;
constexpr MetadataRoutingConfig_FailoverRange MetadataRoutingConfig::FailoverRange_MAX;
constexpr int MetadataRoutingConfig::FailoverRange_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[4];
}
bool RoutingPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Routing::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& ctime(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& mtime(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& revision(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service_token(const Routing* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& id(const Routing* msg);
  static const ::trafficcontrol::FailoverConfig& failover(const Routing* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::namespace_(const Routing* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::service(const Routing* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::ctime(const Routing* msg) {
  return *msg->ctime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::mtime(const Routing* msg) {
  return *msg->mtime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::revision(const Routing* msg) {
  return *msg->revision_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::service_token(const Routing* msg) {
  return *msg->service_token_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Routing::_Internal::id(const Routing* msg) {
  return *msg->id_;
}
const ::trafficcontrol::FailoverConfig&
Routing::_Internal::failover(const Routing* msg) {
  return *msg->failover_;
}
void Routing::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Routing::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Routing::clear_ctime() {
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
}
void Routing::clear_mtime() {
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
}
void Routing::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
void Routing::clear_service_token() {
  if (GetArenaForAllocation() == nullptr && service_token_ != nullptr) {
    delete service_token_;
  }
  service_token_ = nullptr;
}
void Routing::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inbounds_(arena),
  outbounds_(arena),
  routers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inbounds_(from.inbounds_),
      outbounds_(from.outbounds_),
      routers_(from.routers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_ctime()) {
    ctime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.ctime_);
  } else {
    ctime_ = nullptr;
  }
  if (from._internal_has_mtime()) {
    mtime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.mtime_);
  } else {
    mtime_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  if (from._internal_has_service_token()) {
    service_token_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_token_);
  } else {
    service_token_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_failover()) {
    failover_ = new ::trafficcontrol::FailoverConfig(*from.failover_);
  } else {
    failover_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Routing)
}

inline void Routing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failover_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(failover_));
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Routing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete ctime_;
  if (this != internal_default_instance()) delete mtime_;
  if (this != internal_default_instance()) delete revision_;
  if (this != internal_default_instance()) delete service_token_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete failover_;
}

void Routing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Routing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inbounds_.Clear();
  outbounds_.Clear();
  routers_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_token_ != nullptr) {
    delete service_token_;
  }
  service_token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failover_ != nullptr) {
    delete failover_;
  }
  failover_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Route inbounds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Route outbounds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue ctime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue mtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue revision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service_token = 8 [json_name = "service_token"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Router routers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.FailoverConfig failover = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_failover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Routing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Route inbounds = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_inbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Route outbounds = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_outbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue ctime = 5;
  if (this->_internal_has_ctime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ctime(this),
        _Internal::ctime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue mtime = 6;
  if (this->_internal_has_mtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::mtime(this),
        _Internal::mtime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue revision = 7;
  if (this->_internal_has_revision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::revision(this),
        _Internal::revision(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service_token = 8 [json_name = "service_token"];
  if (this->_internal_has_service_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::service_token(this),
        _Internal::service_token(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue id = 9;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Router routers = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routers_size()); i < n; i++) {
    const auto& repfield = this->_internal_routers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .trafficcontrol.FailoverConfig failover = 11;
  if (this->_internal_has_failover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::failover(this),
        _Internal::failover(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Routing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Route inbounds = 3;
  total_size += 1UL * this->_internal_inbounds_size();
  for (const auto& msg : this->inbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Route outbounds = 4;
  total_size += 1UL * this->_internal_outbounds_size();
  for (const auto& msg : this->outbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Router routers = 10;
  total_size += 1UL * this->_internal_routers_size();
  for (const auto& msg : this->routers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue ctime = 5;
  if (this->_internal_has_ctime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctime_);
  }

  // .google.protobuf.StringValue mtime = 6;
  if (this->_internal_has_mtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtime_);
  }

  // .google.protobuf.StringValue revision = 7;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // .google.protobuf.StringValue service_token = 8 [json_name = "service_token"];
  if (this->_internal_has_service_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_token_);
  }

  // .google.protobuf.StringValue id = 9;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .trafficcontrol.FailoverConfig failover = 11;
  if (this->_internal_has_failover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failover_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Routing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routing::GetClassData() const { return &_class_data_; }

void Routing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Routing *>(to)->MergeFrom(
      static_cast<const Routing &>(from));
}


void Routing::MergeFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inbounds_.MergeFrom(from.inbounds_);
  outbounds_.MergeFrom(from.outbounds_);
  routers_.MergeFrom(from.routers_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_ctime()) {
    _internal_mutable_ctime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_ctime());
  }
  if (from._internal_has_mtime()) {
    _internal_mutable_mtime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_mtime());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_revision());
  }
  if (from._internal_has_service_token()) {
    _internal_mutable_service_token()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service_token());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_id());
  }
  if (from._internal_has_failover()) {
    _internal_mutable_failover()->::trafficcontrol::FailoverConfig::MergeFrom(from._internal_failover());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inbounds_.InternalSwap(&other->inbounds_);
  outbounds_.InternalSwap(&other->outbounds_);
  routers_.InternalSwap(&other->routers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routing, failover_)
      + sizeof(Routing::failover_)
      - PROTOBUF_FIELD_OFFSET(Routing, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[0]);
}

// ===================================================================

class Router::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const Router* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& routing_config(const Router* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Router::_Internal::enable(const Router* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Router::_Internal::routing_config(const Router* msg) {
  return *msg->routing_config_;
}
void Router::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void Router::clear_routing_config() {
  if (GetArenaForAllocation() == nullptr && routing_config_ != nullptr) {
    delete routing_config_;
  }
  routing_config_ = nullptr;
}
Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_routing_config()) {
    routing_config_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.routing_config_);
  } else {
    routing_config_ = nullptr;
  }
  routing_policy_ = from.routing_policy_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Router)
}

inline void Router::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_policy_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(routing_policy_));
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete routing_config_;
}

void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && routing_config_ != nullptr) {
    delete routing_config_;
  }
  routing_config_ = nullptr;
  routing_policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.RoutingPolicy routing_policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_routing_policy(static_cast<::trafficcontrol::RoutingPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any routing_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.RoutingPolicy routing_policy = 2;
  if (this->_internal_routing_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_routing_policy(), target);
  }

  // .google.protobuf.Any routing_config = 3;
  if (this->_internal_has_routing_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::routing_config(this),
        _Internal::routing_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.Any routing_config = 3;
  if (this->_internal_has_routing_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_config_);
  }

  // .trafficcontrol.RoutingPolicy routing_policy = 2;
  if (this->_internal_routing_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_routing_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }

void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Router *>(to)->MergeFrom(
      static_cast<const Router &>(from));
}


void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Router)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_routing_config()) {
    _internal_mutable_routing_config()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_routing_config());
  }
  if (from._internal_routing_policy() != 0) {
    _internal_set_routing_policy(from._internal_routing_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Router, routing_policy_)
      + sizeof(Router::routing_policy_)
      - PROTOBUF_FIELD_OFFSET(Router, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[1]);
}

// ===================================================================

class MatchString::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& value(const MatchString* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
MatchString::_Internal::value(const MatchString* msg) {
  return *msg->value_;
}
void MatchString::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
MatchString::MatchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.MatchString)
}
MatchString::MatchString(const MatchString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.MatchString)
}

inline void MatchString::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_type_));
}

MatchString::~MatchString() {
  // @@protoc_insertion_point(destructor:trafficcontrol.MatchString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void MatchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchString::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.MatchString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MatchString.MatchStringType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trafficcontrol::MatchString_MatchStringType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::trafficcontrol::MatchString_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.MatchString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString.ValueType value_type = 3;
  if (this->_internal_value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_value_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.MatchString)
  return target;
}

size_t MatchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.MatchString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .trafficcontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .trafficcontrol.MatchString.ValueType value_type = 3;
  if (this->_internal_value_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchString::GetClassData() const { return &_class_data_; }

void MatchString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchString *>(to)->MergeFrom(
      static_cast<const MatchString &>(from));
}


void MatchString::MergeFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.MatchString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchString::CopyFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.MatchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchString::IsInitialized() const {
  return true;
}

void MatchString::InternalSwap(MatchString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchString, value_type_)
      + sizeof(MatchString::value_type_)
      - PROTOBUF_FIELD_OFFSET(MatchString, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[2]);
}

// ===================================================================

class Locality::_Internal {
 public:
  static const ::trafficcontrol::MatchString& region(const Locality* msg);
  static const ::trafficcontrol::MatchString& zone(const Locality* msg);
  static const ::trafficcontrol::MatchString& campus(const Locality* msg);
};

const ::trafficcontrol::MatchString&
Locality::_Internal::region(const Locality* msg) {
  return *msg->region_;
}
const ::trafficcontrol::MatchString&
Locality::_Internal::zone(const Locality* msg) {
  return *msg->zone_;
}
const ::trafficcontrol::MatchString&
Locality::_Internal::campus(const Locality* msg) {
  return *msg->campus_;
}
Locality::Locality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Locality)
}
Locality::Locality(const Locality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    region_ = new ::trafficcontrol::MatchString(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from._internal_has_zone()) {
    zone_ = new ::trafficcontrol::MatchString(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  if (from._internal_has_campus()) {
    campus_ = new ::trafficcontrol::MatchString(*from.campus_);
  } else {
    campus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Locality)
}

inline void Locality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&campus_) -
    reinterpret_cast<char*>(&region_)) + sizeof(campus_));
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Locality)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Locality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete zone_;
  if (this != internal_default_instance()) delete campus_;
}

void Locality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Locality)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && campus_ != nullptr) {
    delete campus_;
  }
  campus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Locality::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MatchString region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString campus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_campus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Locality::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Locality)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MatchString region = 1;
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString zone = 2;
  if (this->_internal_has_zone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zone(this),
        _Internal::zone(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString campus = 3;
  if (this->_internal_has_campus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::campus(this),
        _Internal::campus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Locality)
  return target;
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Locality)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.MatchString region = 1;
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .trafficcontrol.MatchString zone = 2;
  if (this->_internal_has_zone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zone_);
  }

  // .trafficcontrol.MatchString campus = 3;
  if (this->_internal_has_campus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *campus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Locality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Locality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Locality::GetClassData() const { return &_class_data_; }

void Locality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Locality *>(to)->MergeFrom(
      static_cast<const Locality &>(from));
}


void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region()) {
    _internal_mutable_region()->::trafficcontrol::MatchString::MergeFrom(from._internal_region());
  }
  if (from._internal_has_zone()) {
    _internal_mutable_zone()->::trafficcontrol::MatchString::MergeFrom(from._internal_zone());
  }
  if (from._internal_has_campus()) {
    _internal_mutable_campus()->::trafficcontrol::MatchString::MergeFrom(from._internal_campus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locality::IsInitialized() const {
  return true;
}

void Locality::InternalSwap(Locality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Locality, campus_)
      + sizeof(Locality::campus_)
      - PROTOBUF_FIELD_OFFSET(Locality, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Locality::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[3]);
}

// ===================================================================

class FailoverConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const FailoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& total_count(const FailoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& healthy_count(const FailoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& healthy_percent(const FailoverConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
FailoverConfig::_Internal::enable(const FailoverConfig* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
FailoverConfig::_Internal::total_count(const FailoverConfig* msg) {
  return *msg->total_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
FailoverConfig::_Internal::healthy_count(const FailoverConfig* msg) {
  return *msg->healthy_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
FailoverConfig::_Internal::healthy_percent(const FailoverConfig* msg) {
  return *msg->healthy_percent_;
}
void FailoverConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void FailoverConfig::clear_total_count() {
  if (GetArenaForAllocation() == nullptr && total_count_ != nullptr) {
    delete total_count_;
  }
  total_count_ = nullptr;
}
void FailoverConfig::clear_healthy_count() {
  if (GetArenaForAllocation() == nullptr && healthy_count_ != nullptr) {
    delete healthy_count_;
  }
  healthy_count_ = nullptr;
}
void FailoverConfig::clear_healthy_percent() {
  if (GetArenaForAllocation() == nullptr && healthy_percent_ != nullptr) {
    delete healthy_percent_;
  }
  healthy_percent_ = nullptr;
}
FailoverConfig::FailoverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.FailoverConfig)
}
FailoverConfig::FailoverConfig(const FailoverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_total_count()) {
    total_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.total_count_);
  } else {
    total_count_ = nullptr;
  }
  if (from._internal_has_healthy_count()) {
    healthy_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.healthy_count_);
  } else {
    healthy_count_ = nullptr;
  }
  if (from._internal_has_healthy_percent()) {
    healthy_percent_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.healthy_percent_);
  } else {
    healthy_percent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.FailoverConfig)
}

inline void FailoverConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&healthy_percent_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(healthy_percent_));
}

FailoverConfig::~FailoverConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.FailoverConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FailoverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete total_count_;
  if (this != internal_default_instance()) delete healthy_count_;
  if (this != internal_default_instance()) delete healthy_percent_;
}

void FailoverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FailoverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.FailoverConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && total_count_ != nullptr) {
    delete total_count_;
  }
  total_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && healthy_count_ != nullptr) {
    delete healthy_count_;
  }
  healthy_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && healthy_percent_ != nullptr) {
    delete healthy_percent_;
  }
  healthy_percent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FailoverConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value healthy_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value healthy_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy_percent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FailoverConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.FailoverConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value total_count = 2;
  if (this->_internal_has_total_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total_count(this),
        _Internal::total_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value healthy_count = 3;
  if (this->_internal_has_healthy_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::healthy_count(this),
        _Internal::healthy_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value healthy_percent = 4;
  if (this->_internal_has_healthy_percent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::healthy_percent(this),
        _Internal::healthy_percent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.FailoverConfig)
  return target;
}

size_t FailoverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.FailoverConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.UInt32Value total_count = 2;
  if (this->_internal_has_total_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_count_);
  }

  // .google.protobuf.UInt32Value healthy_count = 3;
  if (this->_internal_has_healthy_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_count_);
  }

  // .google.protobuf.UInt32Value healthy_percent = 4;
  if (this->_internal_has_healthy_percent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_percent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FailoverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FailoverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FailoverConfig::GetClassData() const { return &_class_data_; }

void FailoverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FailoverConfig *>(to)->MergeFrom(
      static_cast<const FailoverConfig &>(from));
}


void FailoverConfig::MergeFrom(const FailoverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.FailoverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_total_count()) {
    _internal_mutable_total_count()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_total_count());
  }
  if (from._internal_has_healthy_count()) {
    _internal_mutable_healthy_count()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_healthy_count());
  }
  if (from._internal_has_healthy_percent()) {
    _internal_mutable_healthy_percent()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_healthy_percent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FailoverConfig::CopyFrom(const FailoverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.FailoverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailoverConfig::IsInitialized() const {
  return true;
}

void FailoverConfig::InternalSwap(FailoverConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FailoverConfig, healthy_percent_)
      + sizeof(FailoverConfig::healthy_percent_)
      - PROTOBUF_FIELD_OFFSET(FailoverConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FailoverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[4]);
}

// ===================================================================

class RuleRoutingConfig::_Internal {
 public:
};

RuleRoutingConfig::RuleRoutingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inbounds_(arena),
  outbounds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.RuleRoutingConfig)
}
RuleRoutingConfig::RuleRoutingConfig(const RuleRoutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inbounds_(from.inbounds_),
      outbounds_(from.outbounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.RuleRoutingConfig)
}

inline void RuleRoutingConfig::SharedCtor() {
}

RuleRoutingConfig::~RuleRoutingConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.RuleRoutingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuleRoutingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuleRoutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleRoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.RuleRoutingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inbounds_.Clear();
  outbounds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleRoutingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .trafficcontrol.Route inbounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Route outbounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleRoutingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.RuleRoutingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trafficcontrol.Route inbounds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_inbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Route outbounds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_outbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.RuleRoutingConfig)
  return target;
}

size_t RuleRoutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.RuleRoutingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Route inbounds = 1;
  total_size += 1UL * this->_internal_inbounds_size();
  for (const auto& msg : this->inbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Route outbounds = 2;
  total_size += 1UL * this->_internal_outbounds_size();
  for (const auto& msg : this->outbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleRoutingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleRoutingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleRoutingConfig::GetClassData() const { return &_class_data_; }

void RuleRoutingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleRoutingConfig *>(to)->MergeFrom(
      static_cast<const RuleRoutingConfig &>(from));
}


void RuleRoutingConfig::MergeFrom(const RuleRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.RuleRoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inbounds_.MergeFrom(from.inbounds_);
  outbounds_.MergeFrom(from.outbounds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleRoutingConfig::CopyFrom(const RuleRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.RuleRoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleRoutingConfig::IsInitialized() const {
  return true;
}

void RuleRoutingConfig::InternalSwap(RuleRoutingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inbounds_.InternalSwap(&other->inbounds_);
  outbounds_.InternalSwap(&other->outbounds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleRoutingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[5]);
}

// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sources_(arena),
  destinations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_),
      destinations_(from.destinations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Route)
}

inline void Route::SharedCtor() {
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  destinations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .trafficcontrol.Source sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Destination destinations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destinations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trafficcontrol.Source sources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Destination destinations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destinations_size()); i < n; i++) {
    const auto& repfield = this->_internal_destinations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Source sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Destination destinations = 2;
  total_size += 1UL * this->_internal_destinations_size();
  for (const auto& msg : this->destinations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }

void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Route *>(to)->MergeFrom(
      static_cast<const Route &>(from));
}


void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Route)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  destinations_.MergeFrom(from.destinations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
  destinations_.InternalSwap(&other->destinations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[6]);
}

// ===================================================================

Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse() {}
Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Source_MetadataEntry_DoNotUse::MergeFrom(const Source_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Source_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[7]);
}

// ===================================================================

class Source::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Source* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Source* msg);
  static const ::trafficcontrol::Locality& locality(const Source* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Source::_Internal::service(const Source* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Source::_Internal::namespace_(const Source* msg) {
  return *msg->namespace__;
}
const ::trafficcontrol::Locality&
Source::_Internal::locality(const Source* msg) {
  return *msg->locality_;
}
void Source::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Source::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Source::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_locality()) {
    locality_ = new ::trafficcontrol::Locality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Source)
}

inline void Source::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locality_) -
    reinterpret_cast<char*>(&service_)) + sizeof(locality_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.Destruct();
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete locality_;
}

void Source::ArenaDtor(void* object) {
  Source* _this = reinterpret_cast< Source* >(object);
  _this->metadata_.Destruct();
}
void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Source)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .trafficcontrol.MatchString> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.Locality locality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Source::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Source)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, ::trafficcontrol::MatchString>;
    using WireHelper = Source_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Source.MetadataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .trafficcontrol.Locality locality = 4;
  if (this->_internal_has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::locality(this),
        _Internal::locality(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Source)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::trafficcontrol::MatchString >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Source_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .trafficcontrol.Locality locality = 4;
  if (this->_internal_has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Source::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Source::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Source::GetClassData() const { return &_class_data_; }

void Source::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Source *>(to)->MergeFrom(
      static_cast<const Source &>(from));
}


void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Source)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_locality()) {
    _internal_mutable_locality()->::trafficcontrol::Locality::MergeFrom(from._internal_locality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, locality_)
      + sizeof(Source::locality_)
      - PROTOBUF_FIELD_OFFSET(Source, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[8]);
}

// ===================================================================

Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse() {}
Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Destination_MetadataEntry_DoNotUse::MergeFrom(const Destination_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Destination_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[9]);
}

// ===================================================================

class Destination::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& priority(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& weight(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& transfer(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& isolate(const Destination* msg);
  static const ::trafficcontrol::Locality& locality(const Destination* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::service(const Destination* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::namespace_(const Destination* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Destination::_Internal::priority(const Destination* msg) {
  return *msg->priority_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Destination::_Internal::weight(const Destination* msg) {
  return *msg->weight_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::transfer(const Destination* msg) {
  return *msg->transfer_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Destination::_Internal::isolate(const Destination* msg) {
  return *msg->isolate_;
}
const ::trafficcontrol::Locality&
Destination::_Internal::locality(const Destination* msg) {
  return *msg->locality_;
}
void Destination::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Destination::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Destination::clear_priority() {
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
void Destination::clear_weight() {
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
}
void Destination::clear_transfer() {
  if (GetArenaForAllocation() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
}
void Destination::clear_isolate() {
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
}
Destination::Destination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Destination::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Destination)
}
Destination::Destination(const Destination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_weight()) {
    weight_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  if (from._internal_has_transfer()) {
    transfer_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.transfer_);
  } else {
    transfer_ = nullptr;
  }
  if (from._internal_has_isolate()) {
    isolate_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.isolate_);
  } else {
    isolate_ = nullptr;
  }
  if (from._internal_has_locality()) {
    locality_ = new ::trafficcontrol::Locality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Destination)
}

inline void Destination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locality_) -
    reinterpret_cast<char*>(&service_)) + sizeof(locality_));
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Destination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Destination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.Destruct();
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete transfer_;
  if (this != internal_default_instance()) delete isolate_;
  if (this != internal_default_instance()) delete locality_;
}

void Destination::ArenaDtor(void* object) {
  Destination* _this = reinterpret_cast< Destination* >(object);
  _this->metadata_.Destruct();
}
void Destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Destination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Destination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .trafficcontrol.MatchString> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue transfer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue isolate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_isolate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.Locality locality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Destination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Destination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, ::trafficcontrol::MatchString>;
    using WireHelper = Destination_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Destination.MetadataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.UInt32Value priority = 4;
  if (this->_internal_has_priority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value weight = 5;
  if (this->_internal_has_weight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::weight(this),
        _Internal::weight(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue transfer = 6;
  if (this->_internal_has_transfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transfer(this),
        _Internal::transfer(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue isolate = 7;
  if (this->_internal_has_isolate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::isolate(this),
        _Internal::isolate(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.Locality locality = 8;
  if (this->_internal_has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::locality(this),
        _Internal::locality(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Destination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::trafficcontrol::MatchString >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Destination_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.UInt32Value priority = 4;
  if (this->_internal_has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .google.protobuf.UInt32Value weight = 5;
  if (this->_internal_has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_);
  }

  // .google.protobuf.StringValue transfer = 6;
  if (this->_internal_has_transfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_);
  }

  // .google.protobuf.BoolValue isolate = 7;
  if (this->_internal_has_isolate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *isolate_);
  }

  // .trafficcontrol.Locality locality = 8;
  if (this->_internal_has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Destination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Destination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Destination::GetClassData() const { return &_class_data_; }

void Destination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Destination *>(to)->MergeFrom(
      static_cast<const Destination &>(from));
}


void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_priority()) {
    _internal_mutable_priority()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_priority());
  }
  if (from._internal_has_weight()) {
    _internal_mutable_weight()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_weight());
  }
  if (from._internal_has_transfer()) {
    _internal_mutable_transfer()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_transfer());
  }
  if (from._internal_has_isolate()) {
    _internal_mutable_isolate()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_isolate());
  }
  if (from._internal_has_locality()) {
    _internal_mutable_locality()->::trafficcontrol::Locality::MergeFrom(from._internal_locality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::InternalSwap(Destination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Destination, locality_)
      + sizeof(Destination::locality_)
      - PROTOBUF_FIELD_OFFSET(Destination, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Destination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[10]);
}

// ===================================================================

class LocalityRoutingConfig::_Internal {
 public:
};

LocalityRoutingConfig::LocalityRoutingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.LocalityRoutingConfig)
}
LocalityRoutingConfig::LocalityRoutingConfig(const LocalityRoutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locality_level_, &from.locality_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_locality_level_) -
    reinterpret_cast<char*>(&locality_level_)) + sizeof(max_locality_level_));
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.LocalityRoutingConfig)
}

inline void LocalityRoutingConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locality_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_locality_level_) -
    reinterpret_cast<char*>(&locality_level_)) + sizeof(max_locality_level_));
}

LocalityRoutingConfig::~LocalityRoutingConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.LocalityRoutingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalityRoutingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalityRoutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalityRoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.LocalityRoutingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&locality_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_locality_level_) -
      reinterpret_cast<char*>(&locality_level_)) + sizeof(max_locality_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalityRoutingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.LocalityRoutingConfig.LocalityLevel locality_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locality_level(static_cast<::trafficcontrol::LocalityRoutingConfig_LocalityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.LocalityRoutingConfig.LocalityLevel max_locality_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_max_locality_level(static_cast<::trafficcontrol::LocalityRoutingConfig_LocalityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalityRoutingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.LocalityRoutingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.LocalityRoutingConfig.LocalityLevel locality_level = 1;
  if (this->_internal_locality_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_locality_level(), target);
  }

  // .trafficcontrol.LocalityRoutingConfig.LocalityLevel max_locality_level = 2;
  if (this->_internal_max_locality_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_max_locality_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.LocalityRoutingConfig)
  return target;
}

size_t LocalityRoutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.LocalityRoutingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.LocalityRoutingConfig.LocalityLevel locality_level = 1;
  if (this->_internal_locality_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_locality_level());
  }

  // .trafficcontrol.LocalityRoutingConfig.LocalityLevel max_locality_level = 2;
  if (this->_internal_max_locality_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_max_locality_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalityRoutingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalityRoutingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalityRoutingConfig::GetClassData() const { return &_class_data_; }

void LocalityRoutingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalityRoutingConfig *>(to)->MergeFrom(
      static_cast<const LocalityRoutingConfig &>(from));
}


void LocalityRoutingConfig::MergeFrom(const LocalityRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.LocalityRoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_locality_level() != 0) {
    _internal_set_locality_level(from._internal_locality_level());
  }
  if (from._internal_max_locality_level() != 0) {
    _internal_set_max_locality_level(from._internal_max_locality_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalityRoutingConfig::CopyFrom(const LocalityRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.LocalityRoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalityRoutingConfig::IsInitialized() const {
  return true;
}

void LocalityRoutingConfig::InternalSwap(LocalityRoutingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalityRoutingConfig, max_locality_level_)
      + sizeof(LocalityRoutingConfig::max_locality_level_)
      - PROTOBUF_FIELD_OFFSET(LocalityRoutingConfig, locality_level_)>(
          reinterpret_cast<char*>(&locality_level_),
          reinterpret_cast<char*>(&other->locality_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalityRoutingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[11]);
}

// ===================================================================

class MetadataRoutingConfig::_Internal {
 public:
};

MetadataRoutingConfig::MetadataRoutingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.MetadataRoutingConfig)
}
MetadataRoutingConfig::MetadataRoutingConfig(const MetadataRoutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  failover_range_ = from.failover_range_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.MetadataRoutingConfig)
}

inline void MetadataRoutingConfig::SharedCtor() {
failover_range_ = 0;
}

MetadataRoutingConfig::~MetadataRoutingConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.MetadataRoutingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataRoutingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetadataRoutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetadataRoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.MetadataRoutingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failover_range_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataRoutingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MetadataRoutingConfig.FailoverRange failover_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failover_range(static_cast<::trafficcontrol::MetadataRoutingConfig_FailoverRange>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataRoutingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.MetadataRoutingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MetadataRoutingConfig.FailoverRange failover_range = 1;
  if (this->_internal_failover_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_failover_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.MetadataRoutingConfig)
  return target;
}

size_t MetadataRoutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.MetadataRoutingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.MetadataRoutingConfig.FailoverRange failover_range = 1;
  if (this->_internal_failover_range() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_failover_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataRoutingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetadataRoutingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataRoutingConfig::GetClassData() const { return &_class_data_; }

void MetadataRoutingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetadataRoutingConfig *>(to)->MergeFrom(
      static_cast<const MetadataRoutingConfig &>(from));
}


void MetadataRoutingConfig::MergeFrom(const MetadataRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.MetadataRoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_failover_range() != 0) {
    _internal_set_failover_range(from._internal_failover_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataRoutingConfig::CopyFrom(const MetadataRoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.MetadataRoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataRoutingConfig::IsInitialized() const {
  return true;
}

void MetadataRoutingConfig::InternalSwap(MetadataRoutingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(failover_range_, other->failover_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataRoutingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficcontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trafficcontrol::Routing*
Arena::CreateMaybeMessage< ::trafficcontrol::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Router*
Arena::CreateMaybeMessage< ::trafficcontrol::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::MatchString*
Arena::CreateMaybeMessage< ::trafficcontrol::MatchString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::MatchString >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Locality*
Arena::CreateMaybeMessage< ::trafficcontrol::Locality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Locality >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::FailoverConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::FailoverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::FailoverConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::RuleRoutingConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::RuleRoutingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::RuleRoutingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Route*
Arena::CreateMaybeMessage< ::trafficcontrol::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Source_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::trafficcontrol::Source_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Source_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Source*
Arena::CreateMaybeMessage< ::trafficcontrol::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Destination_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::trafficcontrol::Destination_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Destination_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Destination*
Arena::CreateMaybeMessage< ::trafficcontrol::Destination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Destination >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::LocalityRoutingConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::LocalityRoutingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::LocalityRoutingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::MetadataRoutingConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::MetadataRoutingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::MetadataRoutingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
