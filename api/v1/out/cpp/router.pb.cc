// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trafficcontrol {
PROTOBUF_CONSTEXPR RouteConfiguration::RouteConfiguration(
    ::_pbi::ConstantInitialized)
  : routers_(){}
struct RouteConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteConfigurationDefaultTypeInternal() {}
  union {
    RouteConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteConfigurationDefaultTypeInternal _RouteConfiguration_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized)
  : routing_(nullptr)
  , type_(0)
{}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
PROTOBUF_CONSTEXPR MatchString::MatchString(
    ::_pbi::ConstantInitialized)
  : value_(nullptr)
  , type_(0)

  , value_type_(0)
{}
struct MatchStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStringDefaultTypeInternal() {}
  union {
    MatchString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStringDefaultTypeInternal _MatchString_default_instance_;
PROTOBUF_CONSTEXPR Locality::Locality(
    ::_pbi::ConstantInitialized)
  : region_(nullptr)
  , zone_(nullptr)
  , campus_(nullptr){}
struct LocalityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalityDefaultTypeInternal() {}
  union {
    Locality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalityDefaultTypeInternal _Locality_default_instance_;
PROTOBUF_CONSTEXPR DegradeConfig::DegradeConfig(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , total_count_(nullptr)
  , healthy_count_(nullptr)
  , healthy_percent_(nullptr){}
struct DegradeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DegradeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DegradeConfigDefaultTypeInternal() {}
  union {
    DegradeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DegradeConfigDefaultTypeInternal _DegradeConfig_default_instance_;
PROTOBUF_CONSTEXPR RuleRouting::RuleRouting(
    ::_pbi::ConstantInitialized)
  : inbounds_()
  , outbounds_()
  , namespace__(nullptr)
  , service_(nullptr)
  , degrade_(nullptr){}
struct RuleRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleRoutingDefaultTypeInternal() {}
  union {
    RuleRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleRoutingDefaultTypeInternal _RuleRouting_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized)
  : sources_()
  , destinations_(){}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
PROTOBUF_CONSTEXPR Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Source_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Source_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Source_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Source_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Source_MetadataEntry_DoNotUseDefaultTypeInternal _Source_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , service_(nullptr)
  , namespace__(nullptr)
  , locality_(nullptr){}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
PROTOBUF_CONSTEXPR Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Destination_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Destination_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Destination_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Destination_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Destination_MetadataEntry_DoNotUseDefaultTypeInternal _Destination_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Destination::Destination(
    ::_pbi::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , service_(nullptr)
  , namespace__(nullptr)
  , priority_(nullptr)
  , weight_(nullptr)
  , transfer_(nullptr)
  , isolate_(nullptr)
  , locality_(nullptr){}
struct DestinationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationDefaultTypeInternal() {}
  union {
    Destination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationDefaultTypeInternal _Destination_default_instance_;
PROTOBUF_CONSTEXPR LocalityRouting::LocalityRouting(
    ::_pbi::ConstantInitialized)
  : degrade_(nullptr)
  , startinglevel_(0)

  , maxdegradelevel_(0)
{}
struct LocalityRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalityRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalityRoutingDefaultTypeInternal() {}
  union {
    LocalityRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalityRoutingDefaultTypeInternal _LocalityRouting_default_instance_;
PROTOBUF_CONSTEXPR MetadataRouting::MetadataRouting(
    ::_pbi::ConstantInitialized)
  : degrade_(nullptr)
  , degrade_level_(0)
{}
struct MetadataRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataRoutingDefaultTypeInternal() {}
  union {
    MetadataRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataRoutingDefaultTypeInternal _MetadataRouting_default_instance_;
PROTOBUF_CONSTEXPR CanaryRouting::CanaryRouting(
    ::_pbi::ConstantInitialized)
  : degrade_(nullptr)
  , degrade_level_(0)
{}
struct CanaryRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanaryRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanaryRoutingDefaultTypeInternal() {}
  union {
    CanaryRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanaryRoutingDefaultTypeInternal _CanaryRouting_default_instance_;
PROTOBUF_CONSTEXPR SetRouting::SetRouting(
    ::_pbi::ConstantInitialized){}
struct SetRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoutingDefaultTypeInternal() {}
  union {
    SetRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoutingDefaultTypeInternal _SetRouting_default_instance_;
}  // namespace trafficcontrol
static ::_pb::Metadata file_level_metadata_router_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_router_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_2eproto = nullptr;

const uint32_t TableStruct_router_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RouteConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RouteConfiguration, routers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, type_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Router, routing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, type_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, value_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MatchString, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, region_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, zone_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Locality, campus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::DegradeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::DegradeConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::DegradeConfig, total_count_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::DegradeConfig, healthy_count_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::DegradeConfig, healthy_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, inbounds_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, outbounds_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RuleRouting, degrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, sources_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Route, destinations_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, metadata_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Source, locality_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, metadata_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, priority_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, weight_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, transfer_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, isolate_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Destination, locality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRouting, startinglevel_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRouting, maxdegradelevel_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::LocalityRouting, degrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MetadataRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MetadataRouting, degrade_level_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MetadataRouting, degrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::CanaryRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::CanaryRouting, degrade_level_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::CanaryRouting, degrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::SetRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::trafficcontrol::RouteConfiguration)},
  { 7, -1, -1, sizeof(::trafficcontrol::Router)},
  { 15, -1, -1, sizeof(::trafficcontrol::MatchString)},
  { 24, -1, -1, sizeof(::trafficcontrol::Locality)},
  { 33, -1, -1, sizeof(::trafficcontrol::DegradeConfig)},
  { 43, -1, -1, sizeof(::trafficcontrol::RuleRouting)},
  { 54, -1, -1, sizeof(::trafficcontrol::Route)},
  { 62, 70, -1, sizeof(::trafficcontrol::Source_MetadataEntry_DoNotUse)},
  { 72, -1, -1, sizeof(::trafficcontrol::Source)},
  { 82, 90, -1, sizeof(::trafficcontrol::Destination_MetadataEntry_DoNotUse)},
  { 92, -1, -1, sizeof(::trafficcontrol::Destination)},
  { 106, -1, -1, sizeof(::trafficcontrol::LocalityRouting)},
  { 115, -1, -1, sizeof(::trafficcontrol::MetadataRouting)},
  { 123, -1, -1, sizeof(::trafficcontrol::CanaryRouting)},
  { 131, -1, -1, sizeof(::trafficcontrol::SetRouting)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trafficcontrol::_RouteConfiguration_default_instance_._instance,
  &::trafficcontrol::_Router_default_instance_._instance,
  &::trafficcontrol::_MatchString_default_instance_._instance,
  &::trafficcontrol::_Locality_default_instance_._instance,
  &::trafficcontrol::_DegradeConfig_default_instance_._instance,
  &::trafficcontrol::_RuleRouting_default_instance_._instance,
  &::trafficcontrol::_Route_default_instance_._instance,
  &::trafficcontrol::_Source_MetadataEntry_DoNotUse_default_instance_._instance,
  &::trafficcontrol::_Source_default_instance_._instance,
  &::trafficcontrol::_Destination_MetadataEntry_DoNotUse_default_instance_._instance,
  &::trafficcontrol::_Destination_default_instance_._instance,
  &::trafficcontrol::_LocalityRouting_default_instance_._instance,
  &::trafficcontrol::_MetadataRouting_default_instance_._instance,
  &::trafficcontrol::_CanaryRouting_default_instance_._instance,
  &::trafficcontrol::_SetRouting_default_instance_._instance,
};

const char descriptor_table_protodef_router_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014router.proto\022\016trafficcontrol\032\036google/p"
  "rotobuf/wrappers.proto\032\031google/protobuf/"
  "any.proto\"=\n\022RouteConfiguration\022\'\n\007route"
  "rs\030\001 \003(\0132\026.trafficcontrol.Router\"Y\n\006Rout"
  "er\022(\n\004type\030\001 \001(\0162\032.trafficcontrol.Router"
  "Type\022%\n\007routing\030\002 \001(\0132\024.google.protobuf."
  "Any\"\273\002\n\013MatchString\0229\n\004type\030\001 \001(\0162+.traf"
  "ficcontrol.MatchString.MatchStringType\022+"
  "\n\005value\030\002 \001(\0132\034.google.protobuf.StringVa"
  "lue\0229\n\nvalue_type\030\003 \001(\0162%.trafficcontrol"
  ".MatchString.ValueType\"U\n\017MatchStringTyp"
  "e\022\t\n\005EXACT\020\000\022\t\n\005REGEX\020\001\022\016\n\nNOT_EQUALS\020\002\022"
  "\013\n\007INCLUDE\020\003\022\017\n\013NOT_INCLUDE\020\004\"2\n\tValueTy"
  "pe\022\010\n\004TEXT\020\000\022\r\n\tPARAMETER\020\001\022\014\n\010VARIABLE\020"
  "\002\"\217\001\n\010Locality\022+\n\006region\030\001 \001(\0132\033.traffic"
  "control.MatchString\022)\n\004zone\030\002 \001(\0132\033.traf"
  "ficcontrol.MatchString\022+\n\006campus\030\003 \001(\0132\033"
  ".trafficcontrol.MatchString\"\332\001\n\rDegradeC"
  "onfig\022*\n\006enable\030\001 \001(\0132\032.google.protobuf."
  "BoolValue\0221\n\013total_count\030\002 \001(\0132\034.google."
  "protobuf.UInt32Value\0223\n\rhealthy_count\030\003 "
  "\001(\0132\034.google.protobuf.UInt32Value\0225\n\017hea"
  "lthy_percent\030\004 \001(\0132\034.google.protobuf.UIn"
  "t32Value\"\360\001\n\013RuleRouting\022/\n\tnamespace\030\001 "
  "\001(\0132\034.google.protobuf.StringValue\022-\n\007ser"
  "vice\030\002 \001(\0132\034.google.protobuf.StringValue"
  "\022\'\n\010inbounds\030\003 \003(\0132\025.trafficcontrol.Rout"
  "e\022(\n\toutbounds\030\004 \003(\0132\025.trafficcontrol.Ro"
  "ute\022.\n\007degrade\030\005 \001(\0132\035.trafficcontrol.De"
  "gradeConfig\"c\n\005Route\022\'\n\007sources\030\001 \003(\0132\026."
  "trafficcontrol.Source\0221\n\014destinations\030\002 "
  "\003(\0132\033.trafficcontrol.Destination\"\232\002\n\006Sou"
  "rce\022-\n\007service\030\001 \001(\0132\034.google.protobuf.S"
  "tringValue\022/\n\tnamespace\030\002 \001(\0132\034.google.p"
  "rotobuf.StringValue\0226\n\010metadata\030\003 \003(\0132$."
  "trafficcontrol.Source.MetadataEntry\022*\n\010l"
  "ocality\030\004 \001(\0132\030.trafficcontrol.Locality\032"
  "L\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002"
  " \001(\0132\033.trafficcontrol.MatchString:\0028\001\"\337\003"
  "\n\013Destination\022-\n\007service\030\001 \001(\0132\034.google."
  "protobuf.StringValue\022/\n\tnamespace\030\002 \001(\0132"
  "\034.google.protobuf.StringValue\022;\n\010metadat"
  "a\030\003 \003(\0132).trafficcontrol.Destination.Met"
  "adataEntry\022.\n\010priority\030\004 \001(\0132\034.google.pr"
  "otobuf.UInt32Value\022,\n\006weight\030\005 \001(\0132\034.goo"
  "gle.protobuf.UInt32Value\022.\n\010transfer\030\006 \001"
  "(\0132\034.google.protobuf.StringValue\022+\n\007isol"
  "ate\030\007 \001(\0132\032.google.protobuf.BoolValue\022*\n"
  "\010locality\030\010 \001(\0132\030.trafficcontrol.Localit"
  "y\032L\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value"
  "\030\002 \001(\0132\033.trafficcontrol.MatchString:\0028\001\""
  "\213\002\n\017LocalityRouting\022D\n\rstartingLevel\030\001 \001"
  "(\0162-.trafficcontrol.LocalityRouting.Loca"
  "lityLevel\022F\n\017maxDegradeLevel\030\002 \001(\0162-.tra"
  "fficcontrol.LocalityRouting.LocalityLeve"
  "l\022.\n\007degrade\030\003 \001(\0132\035.trafficcontrol.Degr"
  "adeConfig\":\n\rLocalityLevel\022\n\n\006CAMPUS\020\000\022\010"
  "\n\004ZONE\020\001\022\n\n\006REGION\020\002\022\007\n\003ALL\020\003\"\253\001\n\017Metada"
  "taRouting\022C\n\rdegrade_level\030\001 \001(\0162,.traff"
  "iccontrol.MetadataRouting.DegradeLevel\022."
  "\n\007degrade\030\003 \001(\0132\035.trafficcontrol.Degrade"
  "Config\"#\n\014DegradeLevel\022\007\n\003ALL\020\000\022\n\n\006OTHER"
  "S\020\001\"\302\001\n\rCanaryRouting\022A\n\rdegrade_level\030\001"
  " \001(\0162*.trafficcontrol.CanaryRouting.Degr"
  "adeLevel\022.\n\007degrade\030\003 \001(\0132\035.trafficcontr"
  "ol.DegradeConfig\">\n\014DegradeLevel\022\007\n\003ALL\020"
  "\000\022\n\n\006OTHERS\020\001\022\031\n\025OTHERS_WITHOUT_CANARY\020\002"
  "\"\014\n\nSetRouting*e\n\nRouterType\022\016\n\nRuleRout"
  "er\020\000\022\022\n\016MetadataRouter\020\001\022\022\n\016LocalityRout"
  "er\020\002\022\020\n\014CanaryRouter\020\003\022\r\n\tSetRouter\020\004B\027Z"
  "\025api/v1/trafficcontrolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_router_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_router_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_2eproto = {
    false, false, 2830, descriptor_table_protodef_router_2eproto,
    "router.proto",
    &descriptor_table_router_2eproto_once, descriptor_table_router_2eproto_deps, 2, 15,
    schemas, file_default_instances, TableStruct_router_2eproto::offsets,
    file_level_metadata_router_2eproto, file_level_enum_descriptors_router_2eproto,
    file_level_service_descriptors_router_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_2eproto_getter() {
  return &descriptor_table_router_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_2eproto(&descriptor_table_router_2eproto);
namespace trafficcontrol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_MatchStringType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[0];
}
bool MatchString_MatchStringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_MatchStringType MatchString::EXACT;
constexpr MatchString_MatchStringType MatchString::REGEX;
constexpr MatchString_MatchStringType MatchString::NOT_EQUALS;
constexpr MatchString_MatchStringType MatchString::INCLUDE;
constexpr MatchString_MatchStringType MatchString::NOT_INCLUDE;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MIN;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MAX;
constexpr int MatchString::MatchStringType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[1];
}
bool MatchString_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_ValueType MatchString::TEXT;
constexpr MatchString_ValueType MatchString::PARAMETER;
constexpr MatchString_ValueType MatchString::VARIABLE;
constexpr MatchString_ValueType MatchString::ValueType_MIN;
constexpr MatchString_ValueType MatchString::ValueType_MAX;
constexpr int MatchString::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalityRouting_LocalityLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[2];
}
bool LocalityRouting_LocalityLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LocalityRouting_LocalityLevel LocalityRouting::CAMPUS;
constexpr LocalityRouting_LocalityLevel LocalityRouting::ZONE;
constexpr LocalityRouting_LocalityLevel LocalityRouting::REGION;
constexpr LocalityRouting_LocalityLevel LocalityRouting::ALL;
constexpr LocalityRouting_LocalityLevel LocalityRouting::LocalityLevel_MIN;
constexpr LocalityRouting_LocalityLevel LocalityRouting::LocalityLevel_MAX;
constexpr int LocalityRouting::LocalityLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataRouting_DegradeLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[3];
}
bool MetadataRouting_DegradeLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MetadataRouting_DegradeLevel MetadataRouting::ALL;
constexpr MetadataRouting_DegradeLevel MetadataRouting::OTHERS;
constexpr MetadataRouting_DegradeLevel MetadataRouting::DegradeLevel_MIN;
constexpr MetadataRouting_DegradeLevel MetadataRouting::DegradeLevel_MAX;
constexpr int MetadataRouting::DegradeLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CanaryRouting_DegradeLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[4];
}
bool CanaryRouting_DegradeLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CanaryRouting_DegradeLevel CanaryRouting::ALL;
constexpr CanaryRouting_DegradeLevel CanaryRouting::OTHERS;
constexpr CanaryRouting_DegradeLevel CanaryRouting::OTHERS_WITHOUT_CANARY;
constexpr CanaryRouting_DegradeLevel CanaryRouting::DegradeLevel_MIN;
constexpr CanaryRouting_DegradeLevel CanaryRouting::DegradeLevel_MAX;
constexpr int CanaryRouting::DegradeLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[5];
}
bool RouterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RouteConfiguration::_Internal {
 public:
};

RouteConfiguration::RouteConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.RouteConfiguration)
}
RouteConfiguration::RouteConfiguration(const RouteConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routers_(from.routers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.RouteConfiguration)
}

inline void RouteConfiguration::SharedCtor() {
}

RouteConfiguration::~RouteConfiguration() {
  // @@protoc_insertion_point(destructor:trafficcontrol.RouteConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.RouteConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .trafficcontrol.Router routers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.RouteConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trafficcontrol.Router routers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routers_size()); i < n; i++) {
    const auto& repfield = this->_internal_routers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.RouteConfiguration)
  return target;
}

size_t RouteConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.RouteConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Router routers = 1;
  total_size += 1UL * this->_internal_routers_size();
  for (const auto& msg : this->routers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteConfiguration::GetClassData() const { return &_class_data_; }

void RouteConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteConfiguration *>(to)->MergeFrom(
      static_cast<const RouteConfiguration &>(from));
}


void RouteConfiguration::MergeFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.RouteConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  routers_.MergeFrom(from.routers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteConfiguration::CopyFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.RouteConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteConfiguration::IsInitialized() const {
  return true;
}

void RouteConfiguration::InternalSwap(RouteConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routers_.InternalSwap(&other->routers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[0]);
}

// ===================================================================

class Router::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& routing(const Router* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Router::_Internal::routing(const Router* msg) {
  return *msg->routing_;
}
void Router::clear_routing() {
  if (GetArenaForAllocation() == nullptr && routing_ != nullptr) {
    delete routing_;
  }
  routing_ = nullptr;
}
Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing()) {
    routing_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Router)
}

inline void Router::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&routing_)) + sizeof(type_));
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete routing_;
}

void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && routing_ != nullptr) {
    delete routing_;
  }
  routing_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.RouterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trafficcontrol::RouterType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any routing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.RouterType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any routing = 2;
  if (this->_internal_has_routing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any routing = 2;
  if (this->_internal_has_routing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_);
  }

  // .trafficcontrol.RouterType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }

void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Router *>(to)->MergeFrom(
      static_cast<const Router &>(from));
}


void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Router)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing()) {
    _internal_mutable_routing()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_routing());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Router, type_)
      + sizeof(Router::type_)
      - PROTOBUF_FIELD_OFFSET(Router, routing_)>(
          reinterpret_cast<char*>(&routing_),
          reinterpret_cast<char*>(&other->routing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[1]);
}

// ===================================================================

class MatchString::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& value(const MatchString* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
MatchString::_Internal::value(const MatchString* msg) {
  return *msg->value_;
}
void MatchString::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
MatchString::MatchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.MatchString)
}
MatchString::MatchString(const MatchString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.MatchString)
}

inline void MatchString::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_type_));
}

MatchString::~MatchString() {
  // @@protoc_insertion_point(destructor:trafficcontrol.MatchString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void MatchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchString::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.MatchString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MatchString.MatchStringType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trafficcontrol::MatchString_MatchStringType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::trafficcontrol::MatchString_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.MatchString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString.ValueType value_type = 3;
  if (this->_internal_value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_value_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.MatchString)
  return target;
}

size_t MatchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.MatchString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .trafficcontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .trafficcontrol.MatchString.ValueType value_type = 3;
  if (this->_internal_value_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchString::GetClassData() const { return &_class_data_; }

void MatchString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchString *>(to)->MergeFrom(
      static_cast<const MatchString &>(from));
}


void MatchString::MergeFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.MatchString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchString::CopyFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.MatchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchString::IsInitialized() const {
  return true;
}

void MatchString::InternalSwap(MatchString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchString, value_type_)
      + sizeof(MatchString::value_type_)
      - PROTOBUF_FIELD_OFFSET(MatchString, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[2]);
}

// ===================================================================

class Locality::_Internal {
 public:
  static const ::trafficcontrol::MatchString& region(const Locality* msg);
  static const ::trafficcontrol::MatchString& zone(const Locality* msg);
  static const ::trafficcontrol::MatchString& campus(const Locality* msg);
};

const ::trafficcontrol::MatchString&
Locality::_Internal::region(const Locality* msg) {
  return *msg->region_;
}
const ::trafficcontrol::MatchString&
Locality::_Internal::zone(const Locality* msg) {
  return *msg->zone_;
}
const ::trafficcontrol::MatchString&
Locality::_Internal::campus(const Locality* msg) {
  return *msg->campus_;
}
Locality::Locality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Locality)
}
Locality::Locality(const Locality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    region_ = new ::trafficcontrol::MatchString(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from._internal_has_zone()) {
    zone_ = new ::trafficcontrol::MatchString(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  if (from._internal_has_campus()) {
    campus_ = new ::trafficcontrol::MatchString(*from.campus_);
  } else {
    campus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Locality)
}

inline void Locality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&campus_) -
    reinterpret_cast<char*>(&region_)) + sizeof(campus_));
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Locality)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Locality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete zone_;
  if (this != internal_default_instance()) delete campus_;
}

void Locality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Locality)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && campus_ != nullptr) {
    delete campus_;
  }
  campus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Locality::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MatchString region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.MatchString campus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_campus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Locality::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Locality)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MatchString region = 1;
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString zone = 2;
  if (this->_internal_has_zone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zone(this),
        _Internal::zone(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.MatchString campus = 3;
  if (this->_internal_has_campus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::campus(this),
        _Internal::campus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Locality)
  return target;
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Locality)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.MatchString region = 1;
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .trafficcontrol.MatchString zone = 2;
  if (this->_internal_has_zone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zone_);
  }

  // .trafficcontrol.MatchString campus = 3;
  if (this->_internal_has_campus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *campus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Locality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Locality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Locality::GetClassData() const { return &_class_data_; }

void Locality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Locality *>(to)->MergeFrom(
      static_cast<const Locality &>(from));
}


void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region()) {
    _internal_mutable_region()->::trafficcontrol::MatchString::MergeFrom(from._internal_region());
  }
  if (from._internal_has_zone()) {
    _internal_mutable_zone()->::trafficcontrol::MatchString::MergeFrom(from._internal_zone());
  }
  if (from._internal_has_campus()) {
    _internal_mutable_campus()->::trafficcontrol::MatchString::MergeFrom(from._internal_campus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locality::IsInitialized() const {
  return true;
}

void Locality::InternalSwap(Locality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Locality, campus_)
      + sizeof(Locality::campus_)
      - PROTOBUF_FIELD_OFFSET(Locality, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Locality::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[3]);
}

// ===================================================================

class DegradeConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const DegradeConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& total_count(const DegradeConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& healthy_count(const DegradeConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& healthy_percent(const DegradeConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
DegradeConfig::_Internal::enable(const DegradeConfig* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
DegradeConfig::_Internal::total_count(const DegradeConfig* msg) {
  return *msg->total_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
DegradeConfig::_Internal::healthy_count(const DegradeConfig* msg) {
  return *msg->healthy_count_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
DegradeConfig::_Internal::healthy_percent(const DegradeConfig* msg) {
  return *msg->healthy_percent_;
}
void DegradeConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void DegradeConfig::clear_total_count() {
  if (GetArenaForAllocation() == nullptr && total_count_ != nullptr) {
    delete total_count_;
  }
  total_count_ = nullptr;
}
void DegradeConfig::clear_healthy_count() {
  if (GetArenaForAllocation() == nullptr && healthy_count_ != nullptr) {
    delete healthy_count_;
  }
  healthy_count_ = nullptr;
}
void DegradeConfig::clear_healthy_percent() {
  if (GetArenaForAllocation() == nullptr && healthy_percent_ != nullptr) {
    delete healthy_percent_;
  }
  healthy_percent_ = nullptr;
}
DegradeConfig::DegradeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.DegradeConfig)
}
DegradeConfig::DegradeConfig(const DegradeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_total_count()) {
    total_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.total_count_);
  } else {
    total_count_ = nullptr;
  }
  if (from._internal_has_healthy_count()) {
    healthy_count_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.healthy_count_);
  } else {
    healthy_count_ = nullptr;
  }
  if (from._internal_has_healthy_percent()) {
    healthy_percent_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.healthy_percent_);
  } else {
    healthy_percent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.DegradeConfig)
}

inline void DegradeConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&healthy_percent_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(healthy_percent_));
}

DegradeConfig::~DegradeConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.DegradeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DegradeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete total_count_;
  if (this != internal_default_instance()) delete healthy_count_;
  if (this != internal_default_instance()) delete healthy_percent_;
}

void DegradeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DegradeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.DegradeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && total_count_ != nullptr) {
    delete total_count_;
  }
  total_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && healthy_count_ != nullptr) {
    delete healthy_count_;
  }
  healthy_count_ = nullptr;
  if (GetArenaForAllocation() == nullptr && healthy_percent_ != nullptr) {
    delete healthy_percent_;
  }
  healthy_percent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DegradeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value healthy_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value healthy_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy_percent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DegradeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.DegradeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value total_count = 2;
  if (this->_internal_has_total_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total_count(this),
        _Internal::total_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value healthy_count = 3;
  if (this->_internal_has_healthy_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::healthy_count(this),
        _Internal::healthy_count(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value healthy_percent = 4;
  if (this->_internal_has_healthy_percent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::healthy_percent(this),
        _Internal::healthy_percent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.DegradeConfig)
  return target;
}

size_t DegradeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.DegradeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.UInt32Value total_count = 2;
  if (this->_internal_has_total_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_count_);
  }

  // .google.protobuf.UInt32Value healthy_count = 3;
  if (this->_internal_has_healthy_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_count_);
  }

  // .google.protobuf.UInt32Value healthy_percent = 4;
  if (this->_internal_has_healthy_percent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_percent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DegradeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DegradeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DegradeConfig::GetClassData() const { return &_class_data_; }

void DegradeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DegradeConfig *>(to)->MergeFrom(
      static_cast<const DegradeConfig &>(from));
}


void DegradeConfig::MergeFrom(const DegradeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.DegradeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_total_count()) {
    _internal_mutable_total_count()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_total_count());
  }
  if (from._internal_has_healthy_count()) {
    _internal_mutable_healthy_count()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_healthy_count());
  }
  if (from._internal_has_healthy_percent()) {
    _internal_mutable_healthy_percent()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_healthy_percent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DegradeConfig::CopyFrom(const DegradeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.DegradeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DegradeConfig::IsInitialized() const {
  return true;
}

void DegradeConfig::InternalSwap(DegradeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DegradeConfig, healthy_percent_)
      + sizeof(DegradeConfig::healthy_percent_)
      - PROTOBUF_FIELD_OFFSET(DegradeConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DegradeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[4]);
}

// ===================================================================

class RuleRouting::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const RuleRouting* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const RuleRouting* msg);
  static const ::trafficcontrol::DegradeConfig& degrade(const RuleRouting* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
RuleRouting::_Internal::namespace_(const RuleRouting* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
RuleRouting::_Internal::service(const RuleRouting* msg) {
  return *msg->service_;
}
const ::trafficcontrol::DegradeConfig&
RuleRouting::_Internal::degrade(const RuleRouting* msg) {
  return *msg->degrade_;
}
void RuleRouting::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void RuleRouting::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
RuleRouting::RuleRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inbounds_(arena),
  outbounds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.RuleRouting)
}
RuleRouting::RuleRouting(const RuleRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inbounds_(from.inbounds_),
      outbounds_(from.outbounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_degrade()) {
    degrade_ = new ::trafficcontrol::DegradeConfig(*from.degrade_);
  } else {
    degrade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.RuleRouting)
}

inline void RuleRouting::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&degrade_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(degrade_));
}

RuleRouting::~RuleRouting() {
  // @@protoc_insertion_point(destructor:trafficcontrol.RuleRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuleRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete degrade_;
}

void RuleRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.RuleRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inbounds_.Clear();
  outbounds_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && degrade_ != nullptr) {
    delete degrade_;
  }
  degrade_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Route inbounds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Route outbounds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.DegradeConfig degrade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_degrade(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.RuleRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Route inbounds = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_inbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Route outbounds = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_outbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .trafficcontrol.DegradeConfig degrade = 5;
  if (this->_internal_has_degrade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::degrade(this),
        _Internal::degrade(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.RuleRouting)
  return target;
}

size_t RuleRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.RuleRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Route inbounds = 3;
  total_size += 1UL * this->_internal_inbounds_size();
  for (const auto& msg : this->inbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Route outbounds = 4;
  total_size += 1UL * this->_internal_outbounds_size();
  for (const auto& msg : this->outbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .trafficcontrol.DegradeConfig degrade = 5;
  if (this->_internal_has_degrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *degrade_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleRouting::GetClassData() const { return &_class_data_; }

void RuleRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleRouting *>(to)->MergeFrom(
      static_cast<const RuleRouting &>(from));
}


void RuleRouting::MergeFrom(const RuleRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.RuleRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inbounds_.MergeFrom(from.inbounds_);
  outbounds_.MergeFrom(from.outbounds_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_degrade()) {
    _internal_mutable_degrade()->::trafficcontrol::DegradeConfig::MergeFrom(from._internal_degrade());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleRouting::CopyFrom(const RuleRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.RuleRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleRouting::IsInitialized() const {
  return true;
}

void RuleRouting::InternalSwap(RuleRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inbounds_.InternalSwap(&other->inbounds_);
  outbounds_.InternalSwap(&other->outbounds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleRouting, degrade_)
      + sizeof(RuleRouting::degrade_)
      - PROTOBUF_FIELD_OFFSET(RuleRouting, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[5]);
}

// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sources_(arena),
  destinations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_),
      destinations_(from.destinations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Route)
}

inline void Route::SharedCtor() {
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  destinations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .trafficcontrol.Source sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .trafficcontrol.Destination destinations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destinations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trafficcontrol.Source sources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .trafficcontrol.Destination destinations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destinations_size()); i < n; i++) {
    const auto& repfield = this->_internal_destinations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trafficcontrol.Source sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trafficcontrol.Destination destinations = 2;
  total_size += 1UL * this->_internal_destinations_size();
  for (const auto& msg : this->destinations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }

void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Route *>(to)->MergeFrom(
      static_cast<const Route &>(from));
}


void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Route)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  destinations_.MergeFrom(from.destinations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
  destinations_.InternalSwap(&other->destinations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[6]);
}

// ===================================================================

Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse() {}
Source_MetadataEntry_DoNotUse::Source_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Source_MetadataEntry_DoNotUse::MergeFrom(const Source_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Source_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[7]);
}

// ===================================================================

class Source::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Source* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Source* msg);
  static const ::trafficcontrol::Locality& locality(const Source* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Source::_Internal::service(const Source* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Source::_Internal::namespace_(const Source* msg) {
  return *msg->namespace__;
}
const ::trafficcontrol::Locality&
Source::_Internal::locality(const Source* msg) {
  return *msg->locality_;
}
void Source::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Source::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Source::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_locality()) {
    locality_ = new ::trafficcontrol::Locality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Source)
}

inline void Source::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locality_) -
    reinterpret_cast<char*>(&service_)) + sizeof(locality_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.Destruct();
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete locality_;
}

void Source::ArenaDtor(void* object) {
  Source* _this = reinterpret_cast< Source* >(object);
  _this->metadata_.Destruct();
}
void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Source)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .trafficcontrol.MatchString> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.Locality locality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Source::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Source)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, ::trafficcontrol::MatchString>;
    using WireHelper = Source_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Source.MetadataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .trafficcontrol.Locality locality = 4;
  if (this->_internal_has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::locality(this),
        _Internal::locality(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Source)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::trafficcontrol::MatchString >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Source_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .trafficcontrol.Locality locality = 4;
  if (this->_internal_has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Source::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Source::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Source::GetClassData() const { return &_class_data_; }

void Source::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Source *>(to)->MergeFrom(
      static_cast<const Source &>(from));
}


void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Source)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_locality()) {
    _internal_mutable_locality()->::trafficcontrol::Locality::MergeFrom(from._internal_locality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, locality_)
      + sizeof(Source::locality_)
      - PROTOBUF_FIELD_OFFSET(Source, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[8]);
}

// ===================================================================

Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse() {}
Destination_MetadataEntry_DoNotUse::Destination_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Destination_MetadataEntry_DoNotUse::MergeFrom(const Destination_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Destination_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[9]);
}

// ===================================================================

class Destination::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& priority(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& weight(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& transfer(const Destination* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& isolate(const Destination* msg);
  static const ::trafficcontrol::Locality& locality(const Destination* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::service(const Destination* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::namespace_(const Destination* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Destination::_Internal::priority(const Destination* msg) {
  return *msg->priority_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Destination::_Internal::weight(const Destination* msg) {
  return *msg->weight_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Destination::_Internal::transfer(const Destination* msg) {
  return *msg->transfer_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Destination::_Internal::isolate(const Destination* msg) {
  return *msg->isolate_;
}
const ::trafficcontrol::Locality&
Destination::_Internal::locality(const Destination* msg) {
  return *msg->locality_;
}
void Destination::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Destination::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Destination::clear_priority() {
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
void Destination::clear_weight() {
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
}
void Destination::clear_transfer() {
  if (GetArenaForAllocation() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
}
void Destination::clear_isolate() {
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
}
Destination::Destination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Destination::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Destination)
}
Destination::Destination(const Destination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_weight()) {
    weight_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  if (from._internal_has_transfer()) {
    transfer_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.transfer_);
  } else {
    transfer_ = nullptr;
  }
  if (from._internal_has_isolate()) {
    isolate_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.isolate_);
  } else {
    isolate_ = nullptr;
  }
  if (from._internal_has_locality()) {
    locality_ = new ::trafficcontrol::Locality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Destination)
}

inline void Destination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locality_) -
    reinterpret_cast<char*>(&service_)) + sizeof(locality_));
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Destination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Destination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.Destruct();
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete transfer_;
  if (this != internal_default_instance()) delete isolate_;
  if (this != internal_default_instance()) delete locality_;
}

void Destination::ArenaDtor(void* object) {
  Destination* _this = reinterpret_cast< Destination* >(object);
  _this->metadata_.Destruct();
}
void Destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Destination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Destination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .trafficcontrol.MatchString> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue transfer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue isolate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_isolate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.Locality locality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Destination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Destination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, ::trafficcontrol::MatchString>;
    using WireHelper = Destination_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Destination.MetadataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.UInt32Value priority = 4;
  if (this->_internal_has_priority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value weight = 5;
  if (this->_internal_has_weight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::weight(this),
        _Internal::weight(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue transfer = 6;
  if (this->_internal_has_transfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transfer(this),
        _Internal::transfer(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue isolate = 7;
  if (this->_internal_has_isolate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::isolate(this),
        _Internal::isolate(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.Locality locality = 8;
  if (this->_internal_has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::locality(this),
        _Internal::locality(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Destination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .trafficcontrol.MatchString> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::trafficcontrol::MatchString >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Destination_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.UInt32Value priority = 4;
  if (this->_internal_has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .google.protobuf.UInt32Value weight = 5;
  if (this->_internal_has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_);
  }

  // .google.protobuf.StringValue transfer = 6;
  if (this->_internal_has_transfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_);
  }

  // .google.protobuf.BoolValue isolate = 7;
  if (this->_internal_has_isolate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *isolate_);
  }

  // .trafficcontrol.Locality locality = 8;
  if (this->_internal_has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Destination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Destination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Destination::GetClassData() const { return &_class_data_; }

void Destination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Destination *>(to)->MergeFrom(
      static_cast<const Destination &>(from));
}


void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_priority()) {
    _internal_mutable_priority()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_priority());
  }
  if (from._internal_has_weight()) {
    _internal_mutable_weight()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_weight());
  }
  if (from._internal_has_transfer()) {
    _internal_mutable_transfer()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_transfer());
  }
  if (from._internal_has_isolate()) {
    _internal_mutable_isolate()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_isolate());
  }
  if (from._internal_has_locality()) {
    _internal_mutable_locality()->::trafficcontrol::Locality::MergeFrom(from._internal_locality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::InternalSwap(Destination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Destination, locality_)
      + sizeof(Destination::locality_)
      - PROTOBUF_FIELD_OFFSET(Destination, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Destination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[10]);
}

// ===================================================================

class LocalityRouting::_Internal {
 public:
  static const ::trafficcontrol::DegradeConfig& degrade(const LocalityRouting* msg);
};

const ::trafficcontrol::DegradeConfig&
LocalityRouting::_Internal::degrade(const LocalityRouting* msg) {
  return *msg->degrade_;
}
LocalityRouting::LocalityRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.LocalityRouting)
}
LocalityRouting::LocalityRouting(const LocalityRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_degrade()) {
    degrade_ = new ::trafficcontrol::DegradeConfig(*from.degrade_);
  } else {
    degrade_ = nullptr;
  }
  ::memcpy(&startinglevel_, &from.startinglevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxdegradelevel_) -
    reinterpret_cast<char*>(&startinglevel_)) + sizeof(maxdegradelevel_));
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.LocalityRouting)
}

inline void LocalityRouting::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&degrade_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxdegradelevel_) -
    reinterpret_cast<char*>(&degrade_)) + sizeof(maxdegradelevel_));
}

LocalityRouting::~LocalityRouting() {
  // @@protoc_insertion_point(destructor:trafficcontrol.LocalityRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalityRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete degrade_;
}

void LocalityRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalityRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.LocalityRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && degrade_ != nullptr) {
    delete degrade_;
  }
  degrade_ = nullptr;
  ::memset(&startinglevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxdegradelevel_) -
      reinterpret_cast<char*>(&startinglevel_)) + sizeof(maxdegradelevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalityRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.LocalityRouting.LocalityLevel startingLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_startinglevel(static_cast<::trafficcontrol::LocalityRouting_LocalityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.LocalityRouting.LocalityLevel maxDegradeLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_maxdegradelevel(static_cast<::trafficcontrol::LocalityRouting_LocalityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.DegradeConfig degrade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_degrade(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalityRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.LocalityRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.LocalityRouting.LocalityLevel startingLevel = 1;
  if (this->_internal_startinglevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_startinglevel(), target);
  }

  // .trafficcontrol.LocalityRouting.LocalityLevel maxDegradeLevel = 2;
  if (this->_internal_maxdegradelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_maxdegradelevel(), target);
  }

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::degrade(this),
        _Internal::degrade(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.LocalityRouting)
  return target;
}

size_t LocalityRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.LocalityRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *degrade_);
  }

  // .trafficcontrol.LocalityRouting.LocalityLevel startingLevel = 1;
  if (this->_internal_startinglevel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_startinglevel());
  }

  // .trafficcontrol.LocalityRouting.LocalityLevel maxDegradeLevel = 2;
  if (this->_internal_maxdegradelevel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_maxdegradelevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalityRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalityRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalityRouting::GetClassData() const { return &_class_data_; }

void LocalityRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalityRouting *>(to)->MergeFrom(
      static_cast<const LocalityRouting &>(from));
}


void LocalityRouting::MergeFrom(const LocalityRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.LocalityRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_degrade()) {
    _internal_mutable_degrade()->::trafficcontrol::DegradeConfig::MergeFrom(from._internal_degrade());
  }
  if (from._internal_startinglevel() != 0) {
    _internal_set_startinglevel(from._internal_startinglevel());
  }
  if (from._internal_maxdegradelevel() != 0) {
    _internal_set_maxdegradelevel(from._internal_maxdegradelevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalityRouting::CopyFrom(const LocalityRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.LocalityRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalityRouting::IsInitialized() const {
  return true;
}

void LocalityRouting::InternalSwap(LocalityRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalityRouting, maxdegradelevel_)
      + sizeof(LocalityRouting::maxdegradelevel_)
      - PROTOBUF_FIELD_OFFSET(LocalityRouting, degrade_)>(
          reinterpret_cast<char*>(&degrade_),
          reinterpret_cast<char*>(&other->degrade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalityRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[11]);
}

// ===================================================================

class MetadataRouting::_Internal {
 public:
  static const ::trafficcontrol::DegradeConfig& degrade(const MetadataRouting* msg);
};

const ::trafficcontrol::DegradeConfig&
MetadataRouting::_Internal::degrade(const MetadataRouting* msg) {
  return *msg->degrade_;
}
MetadataRouting::MetadataRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.MetadataRouting)
}
MetadataRouting::MetadataRouting(const MetadataRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_degrade()) {
    degrade_ = new ::trafficcontrol::DegradeConfig(*from.degrade_);
  } else {
    degrade_ = nullptr;
  }
  degrade_level_ = from.degrade_level_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.MetadataRouting)
}

inline void MetadataRouting::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&degrade_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&degrade_level_) -
    reinterpret_cast<char*>(&degrade_)) + sizeof(degrade_level_));
}

MetadataRouting::~MetadataRouting() {
  // @@protoc_insertion_point(destructor:trafficcontrol.MetadataRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete degrade_;
}

void MetadataRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetadataRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.MetadataRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && degrade_ != nullptr) {
    delete degrade_;
  }
  degrade_ = nullptr;
  degrade_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.MetadataRouting.DegradeLevel degrade_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_degrade_level(static_cast<::trafficcontrol::MetadataRouting_DegradeLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.DegradeConfig degrade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_degrade(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.MetadataRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.MetadataRouting.DegradeLevel degrade_level = 1;
  if (this->_internal_degrade_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_degrade_level(), target);
  }

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::degrade(this),
        _Internal::degrade(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.MetadataRouting)
  return target;
}

size_t MetadataRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.MetadataRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *degrade_);
  }

  // .trafficcontrol.MetadataRouting.DegradeLevel degrade_level = 1;
  if (this->_internal_degrade_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_degrade_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetadataRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataRouting::GetClassData() const { return &_class_data_; }

void MetadataRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetadataRouting *>(to)->MergeFrom(
      static_cast<const MetadataRouting &>(from));
}


void MetadataRouting::MergeFrom(const MetadataRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.MetadataRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_degrade()) {
    _internal_mutable_degrade()->::trafficcontrol::DegradeConfig::MergeFrom(from._internal_degrade());
  }
  if (from._internal_degrade_level() != 0) {
    _internal_set_degrade_level(from._internal_degrade_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataRouting::CopyFrom(const MetadataRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.MetadataRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataRouting::IsInitialized() const {
  return true;
}

void MetadataRouting::InternalSwap(MetadataRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataRouting, degrade_level_)
      + sizeof(MetadataRouting::degrade_level_)
      - PROTOBUF_FIELD_OFFSET(MetadataRouting, degrade_)>(
          reinterpret_cast<char*>(&degrade_),
          reinterpret_cast<char*>(&other->degrade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[12]);
}

// ===================================================================

class CanaryRouting::_Internal {
 public:
  static const ::trafficcontrol::DegradeConfig& degrade(const CanaryRouting* msg);
};

const ::trafficcontrol::DegradeConfig&
CanaryRouting::_Internal::degrade(const CanaryRouting* msg) {
  return *msg->degrade_;
}
CanaryRouting::CanaryRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.CanaryRouting)
}
CanaryRouting::CanaryRouting(const CanaryRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_degrade()) {
    degrade_ = new ::trafficcontrol::DegradeConfig(*from.degrade_);
  } else {
    degrade_ = nullptr;
  }
  degrade_level_ = from.degrade_level_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.CanaryRouting)
}

inline void CanaryRouting::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&degrade_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&degrade_level_) -
    reinterpret_cast<char*>(&degrade_)) + sizeof(degrade_level_));
}

CanaryRouting::~CanaryRouting() {
  // @@protoc_insertion_point(destructor:trafficcontrol.CanaryRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanaryRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete degrade_;
}

void CanaryRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanaryRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.CanaryRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && degrade_ != nullptr) {
    delete degrade_;
  }
  degrade_ = nullptr;
  degrade_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanaryRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .trafficcontrol.CanaryRouting.DegradeLevel degrade_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_degrade_level(static_cast<::trafficcontrol::CanaryRouting_DegradeLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.DegradeConfig degrade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_degrade(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanaryRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.CanaryRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .trafficcontrol.CanaryRouting.DegradeLevel degrade_level = 1;
  if (this->_internal_degrade_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_degrade_level(), target);
  }

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::degrade(this),
        _Internal::degrade(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.CanaryRouting)
  return target;
}

size_t CanaryRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.CanaryRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trafficcontrol.DegradeConfig degrade = 3;
  if (this->_internal_has_degrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *degrade_);
  }

  // .trafficcontrol.CanaryRouting.DegradeLevel degrade_level = 1;
  if (this->_internal_degrade_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_degrade_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanaryRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanaryRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanaryRouting::GetClassData() const { return &_class_data_; }

void CanaryRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanaryRouting *>(to)->MergeFrom(
      static_cast<const CanaryRouting &>(from));
}


void CanaryRouting::MergeFrom(const CanaryRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.CanaryRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_degrade()) {
    _internal_mutable_degrade()->::trafficcontrol::DegradeConfig::MergeFrom(from._internal_degrade());
  }
  if (from._internal_degrade_level() != 0) {
    _internal_set_degrade_level(from._internal_degrade_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanaryRouting::CopyFrom(const CanaryRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.CanaryRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanaryRouting::IsInitialized() const {
  return true;
}

void CanaryRouting::InternalSwap(CanaryRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanaryRouting, degrade_level_)
      + sizeof(CanaryRouting::degrade_level_)
      - PROTOBUF_FIELD_OFFSET(CanaryRouting, degrade_)>(
          reinterpret_cast<char*>(&degrade_),
          reinterpret_cast<char*>(&other->degrade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanaryRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[13]);
}

// ===================================================================

class SetRouting::_Internal {
 public:
};

SetRouting::SetRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.SetRouting)
}
SetRouting::SetRouting(const SetRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.SetRouting)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRouting::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2eproto_getter, &descriptor_table_router_2eproto_once,
      file_level_metadata_router_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficcontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trafficcontrol::RouteConfiguration*
Arena::CreateMaybeMessage< ::trafficcontrol::RouteConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::RouteConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Router*
Arena::CreateMaybeMessage< ::trafficcontrol::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::MatchString*
Arena::CreateMaybeMessage< ::trafficcontrol::MatchString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::MatchString >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Locality*
Arena::CreateMaybeMessage< ::trafficcontrol::Locality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Locality >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::DegradeConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::DegradeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::DegradeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::RuleRouting*
Arena::CreateMaybeMessage< ::trafficcontrol::RuleRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::RuleRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Route*
Arena::CreateMaybeMessage< ::trafficcontrol::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Source_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::trafficcontrol::Source_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Source_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Source*
Arena::CreateMaybeMessage< ::trafficcontrol::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Destination_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::trafficcontrol::Destination_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Destination_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Destination*
Arena::CreateMaybeMessage< ::trafficcontrol::Destination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Destination >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::LocalityRouting*
Arena::CreateMaybeMessage< ::trafficcontrol::LocalityRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::LocalityRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::MetadataRouting*
Arena::CreateMaybeMessage< ::trafficcontrol::MetadataRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::MetadataRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::CanaryRouting*
Arena::CreateMaybeMessage< ::trafficcontrol::CanaryRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::CanaryRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::SetRouting*
Arena::CreateMaybeMessage< ::trafficcontrol::SetRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::SetRouting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
