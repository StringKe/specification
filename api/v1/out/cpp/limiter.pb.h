// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: limiter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_limiter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_limiter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_limiter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_limiter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_limiter_2eproto;
namespace accesscontrol {
class Amount;
struct AmountDefaultTypeInternal;
extern AmountDefaultTypeInternal _Amount_default_instance_;
class AmountAdjusterAlgorithm;
struct AmountAdjusterAlgorithmDefaultTypeInternal;
extern AmountAdjusterAlgorithmDefaultTypeInternal _AmountAdjusterAlgorithm_default_instance_;
class ClimbConfig;
struct ClimbConfigDefaultTypeInternal;
extern ClimbConfigDefaultTypeInternal _ClimbConfig_default_instance_;
class ClimbConfig_ClimbThrottling;
struct ClimbConfig_ClimbThrottlingDefaultTypeInternal;
extern ClimbConfig_ClimbThrottlingDefaultTypeInternal _ClimbConfig_ClimbThrottling_default_instance_;
class ClimbConfig_MetricConfig;
struct ClimbConfig_MetricConfigDefaultTypeInternal;
extern ClimbConfig_MetricConfigDefaultTypeInternal _ClimbConfig_MetricConfig_default_instance_;
class ClimbConfig_TriggerPolicy;
struct ClimbConfig_TriggerPolicyDefaultTypeInternal;
extern ClimbConfig_TriggerPolicyDefaultTypeInternal _ClimbConfig_TriggerPolicy_default_instance_;
class ClimbConfig_TriggerPolicy_ErrorRate;
struct ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal;
extern ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal _ClimbConfig_TriggerPolicy_ErrorRate_default_instance_;
class ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig;
struct ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal;
extern ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal _ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig_default_instance_;
class ClimbConfig_TriggerPolicy_SlowRate;
struct ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal;
extern ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal _ClimbConfig_TriggerPolicy_SlowRate_default_instance_;
class MatchString;
struct MatchStringDefaultTypeInternal;
extern MatchStringDefaultTypeInternal _MatchString_default_instance_;
class RateLimit;
struct RateLimitDefaultTypeInternal;
extern RateLimitDefaultTypeInternal _RateLimit_default_instance_;
class RateLimitCluster;
struct RateLimitClusterDefaultTypeInternal;
extern RateLimitClusterDefaultTypeInternal _RateLimitCluster_default_instance_;
class ReportPolicy;
struct ReportPolicyDefaultTypeInternal;
extern ReportPolicyDefaultTypeInternal _ReportPolicy_default_instance_;
class Rule;
struct RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class Rule_LabelsEntry_DoNotUse;
struct Rule_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Rule_LabelsEntry_DoNotUseDefaultTypeInternal _Rule_LabelsEntry_DoNotUse_default_instance_;
class Rule_SubsetEntry_DoNotUse;
struct Rule_SubsetEntry_DoNotUseDefaultTypeInternal;
extern Rule_SubsetEntry_DoNotUseDefaultTypeInternal _Rule_SubsetEntry_DoNotUse_default_instance_;
}  // namespace accesscontrol
PROTOBUF_NAMESPACE_OPEN
template<> ::accesscontrol::Amount* Arena::CreateMaybeMessage<::accesscontrol::Amount>(Arena*);
template<> ::accesscontrol::AmountAdjusterAlgorithm* Arena::CreateMaybeMessage<::accesscontrol::AmountAdjusterAlgorithm>(Arena*);
template<> ::accesscontrol::ClimbConfig* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig>(Arena*);
template<> ::accesscontrol::ClimbConfig_ClimbThrottling* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_ClimbThrottling>(Arena*);
template<> ::accesscontrol::ClimbConfig_MetricConfig* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_MetricConfig>(Arena*);
template<> ::accesscontrol::ClimbConfig_TriggerPolicy* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy>(Arena*);
template<> ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate>(Arena*);
template<> ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig>(Arena*);
template<> ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* Arena::CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate>(Arena*);
template<> ::accesscontrol::MatchString* Arena::CreateMaybeMessage<::accesscontrol::MatchString>(Arena*);
template<> ::accesscontrol::RateLimit* Arena::CreateMaybeMessage<::accesscontrol::RateLimit>(Arena*);
template<> ::accesscontrol::RateLimitCluster* Arena::CreateMaybeMessage<::accesscontrol::RateLimitCluster>(Arena*);
template<> ::accesscontrol::ReportPolicy* Arena::CreateMaybeMessage<::accesscontrol::ReportPolicy>(Arena*);
template<> ::accesscontrol::Rule* Arena::CreateMaybeMessage<::accesscontrol::Rule>(Arena*);
template<> ::accesscontrol::Rule_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::accesscontrol::Rule_LabelsEntry_DoNotUse>(Arena*);
template<> ::accesscontrol::Rule_SubsetEntry_DoNotUse* Arena::CreateMaybeMessage<::accesscontrol::Rule_SubsetEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accesscontrol {

enum MatchString_MatchStringType : int {
  MatchString_MatchStringType_EXACT = 0,
  MatchString_MatchStringType_REGEX = 1,
  MatchString_MatchStringType_MatchString_MatchStringType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MatchString_MatchStringType_MatchString_MatchStringType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MatchString_MatchStringType_IsValid(int value);
constexpr MatchString_MatchStringType MatchString_MatchStringType_MatchStringType_MIN = MatchString_MatchStringType_EXACT;
constexpr MatchString_MatchStringType MatchString_MatchStringType_MatchStringType_MAX = MatchString_MatchStringType_REGEX;
constexpr int MatchString_MatchStringType_MatchStringType_ARRAYSIZE = MatchString_MatchStringType_MatchStringType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_MatchStringType_descriptor();
template<typename T>
inline const std::string& MatchString_MatchStringType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchString_MatchStringType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchString_MatchStringType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchString_MatchStringType_descriptor(), enum_t_value);
}
inline bool MatchString_MatchStringType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchString_MatchStringType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchString_MatchStringType>(
    MatchString_MatchStringType_descriptor(), name, value);
}
enum MatchString_ValueType : int {
  MatchString_ValueType_TEXT = 0,
  MatchString_ValueType_PARAMETER = 1,
  MatchString_ValueType_VARIABLE = 2,
  MatchString_ValueType_MatchString_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MatchString_ValueType_MatchString_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MatchString_ValueType_IsValid(int value);
constexpr MatchString_ValueType MatchString_ValueType_ValueType_MIN = MatchString_ValueType_TEXT;
constexpr MatchString_ValueType MatchString_ValueType_ValueType_MAX = MatchString_ValueType_VARIABLE;
constexpr int MatchString_ValueType_ValueType_ARRAYSIZE = MatchString_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_ValueType_descriptor();
template<typename T>
inline const std::string& MatchString_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchString_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchString_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchString_ValueType_descriptor(), enum_t_value);
}
inline bool MatchString_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchString_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchString_ValueType>(
    MatchString_ValueType_descriptor(), name, value);
}
enum ResourceType : int {
  QPS = 0,
  CONCURRENCY = 1,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = QPS;
constexpr ResourceType ResourceType_MAX = CONCURRENCY;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
enum Type : int {
  GLOBAL = 0,
  LOCAL = 1,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = GLOBAL;
constexpr Type Type_MAX = LOCAL;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum AmountMode : int {
  GLOBAL_TOTAL = 0,
  SHARE_EQUALLY = 1,
  AmountMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AmountMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AmountMode_IsValid(int value);
constexpr AmountMode AmountMode_MIN = GLOBAL_TOTAL;
constexpr AmountMode AmountMode_MAX = SHARE_EQUALLY;
constexpr int AmountMode_ARRAYSIZE = AmountMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AmountMode_descriptor();
template<typename T>
inline const std::string& AmountMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AmountMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AmountMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AmountMode_descriptor(), enum_t_value);
}
inline bool AmountMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AmountMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AmountMode>(
    AmountMode_descriptor(), name, value);
}
enum FailoverType : int {
  FAILOVER_LOCAL = 0,
  FAILOVER_PASS = 1,
  FailoverType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FailoverType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FailoverType_IsValid(int value);
constexpr FailoverType FailoverType_MIN = FAILOVER_LOCAL;
constexpr FailoverType FailoverType_MAX = FAILOVER_PASS;
constexpr int FailoverType_ARRAYSIZE = FailoverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailoverType_descriptor();
template<typename T>
inline const std::string& FailoverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FailoverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FailoverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FailoverType_descriptor(), enum_t_value);
}
inline bool FailoverType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FailoverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FailoverType>(
    FailoverType_descriptor(), name, value);
}
// ===================================================================

class RateLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.RateLimit) */ {
 public:
  inline RateLimit() : RateLimit(nullptr) {}
  ~RateLimit() override;
  explicit PROTOBUF_CONSTEXPR RateLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateLimit(const RateLimit& from);
  RateLimit(RateLimit&& from) noexcept
    : RateLimit() {
    *this = ::std::move(from);
  }

  inline RateLimit& operator=(const RateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimit& operator=(RateLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimit* internal_default_instance() {
    return reinterpret_cast<const RateLimit*>(
               &_RateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RateLimit& a, RateLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RateLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RateLimit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.RateLimit";
  }
  protected:
  explicit RateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
    kRevisionFieldNumber = 2,
  };
  // repeated .accesscontrol.Rule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::accesscontrol::Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Rule >*
      mutable_rules();
  private:
  const ::accesscontrol::Rule& _internal_rules(int index) const;
  ::accesscontrol::Rule* _internal_add_rules();
  public:
  const ::accesscontrol::Rule& rules(int index) const;
  ::accesscontrol::Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Rule >&
      rules() const;

  // .google.protobuf.StringValue revision = 2;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& revision() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_revision();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_revision();
  void set_allocated_revision(::PROTOBUF_NAMESPACE_ID::StringValue* revision);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_revision() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::PROTOBUF_NAMESPACE_ID::StringValue* revision);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_revision();

  // @@protoc_insertion_point(class_scope:accesscontrol.RateLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Rule > rules_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class Rule_SubsetEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rule_SubsetEntry_DoNotUse, 
    std::string, ::accesscontrol::MatchString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rule_SubsetEntry_DoNotUse, 
    std::string, ::accesscontrol::MatchString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Rule_SubsetEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Rule_SubsetEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Rule_SubsetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Rule_SubsetEntry_DoNotUse& other);
  static const Rule_SubsetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Rule_SubsetEntry_DoNotUse*>(&_Rule_SubsetEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "accesscontrol.Rule.SubsetEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_limiter_2eproto;
};

// -------------------------------------------------------------------

class Rule_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rule_LabelsEntry_DoNotUse, 
    std::string, ::accesscontrol::MatchString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rule_LabelsEntry_DoNotUse, 
    std::string, ::accesscontrol::MatchString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Rule_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Rule_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Rule_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Rule_LabelsEntry_DoNotUse& other);
  static const Rule_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Rule_LabelsEntry_DoNotUse*>(&_Rule_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "accesscontrol.Rule.LabelsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_limiter_2eproto;
};

// -------------------------------------------------------------------

class Rule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {}
  ~Rule() override;
  explicit PROTOBUF_CONSTEXPR Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubsetFieldNumber = 4,
    kLabelsFieldNumber = 8,
    kAmountsFieldNumber = 9,
    kIdFieldNumber = 1,
    kServiceFieldNumber = 2,
    kNamespaceFieldNumber = 3,
    kPriorityFieldNumber = 5,
    kActionFieldNumber = 10,
    kDisableFieldNumber = 11,
    kReportFieldNumber = 12,
    kCtimeFieldNumber = 13,
    kMtimeFieldNumber = 14,
    kRevisionFieldNumber = 15,
    kServiceTokenFieldNumber = 16,
    kAdjusterFieldNumber = 17,
    kRegexCombineFieldNumber = 18,
    kClusterFieldNumber = 21,
    kMethodFieldNumber = 22,
    kResourceFieldNumber = 6,
    kTypeFieldNumber = 7,
    kAmountModeFieldNumber = 19,
    kFailoverFieldNumber = 20,
  };
  // map<string, .accesscontrol.MatchString> subset = 4;
  int subset_size() const;
  private:
  int _internal_subset_size() const;
  public:
  void clear_subset();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
      _internal_subset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
      _internal_mutable_subset();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
      subset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
      mutable_subset();

  // map<string, .accesscontrol.MatchString> labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
      mutable_labels();

  // repeated .accesscontrol.Amount amounts = 9;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  ::accesscontrol::Amount* mutable_amounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Amount >*
      mutable_amounts();
  private:
  const ::accesscontrol::Amount& _internal_amounts(int index) const;
  ::accesscontrol::Amount* _internal_add_amounts();
  public:
  const ::accesscontrol::Amount& amounts(int index) const;
  ::accesscontrol::Amount* add_amounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Amount >&
      amounts() const;

  // .google.protobuf.StringValue id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& id() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_id();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_id();
  void set_allocated_id(::PROTOBUF_NAMESPACE_ID::StringValue* id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_id() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::PROTOBUF_NAMESPACE_ID::StringValue* id);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_id();

  // .google.protobuf.StringValue service = 2;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& service() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_service();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_service();
  void set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_service() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_service();
  public:
  void unsafe_arena_set_allocated_service(
      ::PROTOBUF_NAMESPACE_ID::StringValue* service);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_service();

  // .google.protobuf.StringValue namespace = 3;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_namespace_();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_namespace_();
  void set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_namespace_() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_namespace_();

  // .google.protobuf.UInt32Value priority = 5;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& priority() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_priority();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_priority();
  void set_allocated_priority(::PROTOBUF_NAMESPACE_ID::UInt32Value* priority);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_priority() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_priority();
  public:
  void unsafe_arena_set_allocated_priority(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* priority);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_priority();

  // .google.protobuf.StringValue action = 10;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& action() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_action();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_action();
  void set_allocated_action(::PROTOBUF_NAMESPACE_ID::StringValue* action);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_action() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::PROTOBUF_NAMESPACE_ID::StringValue* action);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_action();

  // .google.protobuf.BoolValue disable = 11;
  bool has_disable() const;
  private:
  bool _internal_has_disable() const;
  public:
  void clear_disable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& disable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_disable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_disable();
  void set_allocated_disable(::PROTOBUF_NAMESPACE_ID::BoolValue* disable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_disable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_disable();
  public:
  void unsafe_arena_set_allocated_disable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* disable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_disable();

  // .accesscontrol.ReportPolicy report = 12;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::accesscontrol::ReportPolicy& report() const;
  PROTOBUF_NODISCARD ::accesscontrol::ReportPolicy* release_report();
  ::accesscontrol::ReportPolicy* mutable_report();
  void set_allocated_report(::accesscontrol::ReportPolicy* report);
  private:
  const ::accesscontrol::ReportPolicy& _internal_report() const;
  ::accesscontrol::ReportPolicy* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::accesscontrol::ReportPolicy* report);
  ::accesscontrol::ReportPolicy* unsafe_arena_release_report();

  // .google.protobuf.StringValue ctime = 13;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& ctime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_ctime();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_ctime();
  void set_allocated_ctime(::PROTOBUF_NAMESPACE_ID::StringValue* ctime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_ctime() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_ctime();
  public:
  void unsafe_arena_set_allocated_ctime(
      ::PROTOBUF_NAMESPACE_ID::StringValue* ctime);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_ctime();

  // .google.protobuf.StringValue mtime = 14;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& mtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_mtime();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_mtime();
  void set_allocated_mtime(::PROTOBUF_NAMESPACE_ID::StringValue* mtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_mtime() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_mtime();
  public:
  void unsafe_arena_set_allocated_mtime(
      ::PROTOBUF_NAMESPACE_ID::StringValue* mtime);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_mtime();

  // .google.protobuf.StringValue revision = 15;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& revision() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_revision();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_revision();
  void set_allocated_revision(::PROTOBUF_NAMESPACE_ID::StringValue* revision);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_revision() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::PROTOBUF_NAMESPACE_ID::StringValue* revision);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_revision();

  // .google.protobuf.StringValue service_token = 16 [json_name = "service_token"];
  bool has_service_token() const;
  private:
  bool _internal_has_service_token() const;
  public:
  void clear_service_token();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& service_token() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_service_token();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_service_token();
  void set_allocated_service_token(::PROTOBUF_NAMESPACE_ID::StringValue* service_token);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_service_token() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_service_token();
  public:
  void unsafe_arena_set_allocated_service_token(
      ::PROTOBUF_NAMESPACE_ID::StringValue* service_token);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_service_token();

  // .accesscontrol.AmountAdjusterAlgorithm adjuster = 17;
  bool has_adjuster() const;
  private:
  bool _internal_has_adjuster() const;
  public:
  void clear_adjuster();
  const ::accesscontrol::AmountAdjusterAlgorithm& adjuster() const;
  PROTOBUF_NODISCARD ::accesscontrol::AmountAdjusterAlgorithm* release_adjuster();
  ::accesscontrol::AmountAdjusterAlgorithm* mutable_adjuster();
  void set_allocated_adjuster(::accesscontrol::AmountAdjusterAlgorithm* adjuster);
  private:
  const ::accesscontrol::AmountAdjusterAlgorithm& _internal_adjuster() const;
  ::accesscontrol::AmountAdjusterAlgorithm* _internal_mutable_adjuster();
  public:
  void unsafe_arena_set_allocated_adjuster(
      ::accesscontrol::AmountAdjusterAlgorithm* adjuster);
  ::accesscontrol::AmountAdjusterAlgorithm* unsafe_arena_release_adjuster();

  // .google.protobuf.BoolValue regex_combine = 18;
  bool has_regex_combine() const;
  private:
  bool _internal_has_regex_combine() const;
  public:
  void clear_regex_combine();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& regex_combine() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_regex_combine();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_regex_combine();
  void set_allocated_regex_combine(::PROTOBUF_NAMESPACE_ID::BoolValue* regex_combine);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_regex_combine() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_regex_combine();
  public:
  void unsafe_arena_set_allocated_regex_combine(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* regex_combine);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_regex_combine();

  // .accesscontrol.RateLimitCluster cluster = 21;
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  const ::accesscontrol::RateLimitCluster& cluster() const;
  PROTOBUF_NODISCARD ::accesscontrol::RateLimitCluster* release_cluster();
  ::accesscontrol::RateLimitCluster* mutable_cluster();
  void set_allocated_cluster(::accesscontrol::RateLimitCluster* cluster);
  private:
  const ::accesscontrol::RateLimitCluster& _internal_cluster() const;
  ::accesscontrol::RateLimitCluster* _internal_mutable_cluster();
  public:
  void unsafe_arena_set_allocated_cluster(
      ::accesscontrol::RateLimitCluster* cluster);
  ::accesscontrol::RateLimitCluster* unsafe_arena_release_cluster();

  // .accesscontrol.MatchString method = 22;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const ::accesscontrol::MatchString& method() const;
  PROTOBUF_NODISCARD ::accesscontrol::MatchString* release_method();
  ::accesscontrol::MatchString* mutable_method();
  void set_allocated_method(::accesscontrol::MatchString* method);
  private:
  const ::accesscontrol::MatchString& _internal_method() const;
  ::accesscontrol::MatchString* _internal_mutable_method();
  public:
  void unsafe_arena_set_allocated_method(
      ::accesscontrol::MatchString* method);
  ::accesscontrol::MatchString* unsafe_arena_release_method();

  // .accesscontrol.ResourceType resource = 6;
  void clear_resource();
  ::accesscontrol::ResourceType resource() const;
  void set_resource(::accesscontrol::ResourceType value);
  private:
  ::accesscontrol::ResourceType _internal_resource() const;
  void _internal_set_resource(::accesscontrol::ResourceType value);
  public:

  // .accesscontrol.Type type = 7;
  void clear_type();
  ::accesscontrol::Type type() const;
  void set_type(::accesscontrol::Type value);
  private:
  ::accesscontrol::Type _internal_type() const;
  void _internal_set_type(::accesscontrol::Type value);
  public:

  // .accesscontrol.AmountMode amount_mode = 19;
  void clear_amount_mode();
  ::accesscontrol::AmountMode amount_mode() const;
  void set_amount_mode(::accesscontrol::AmountMode value);
  private:
  ::accesscontrol::AmountMode _internal_amount_mode() const;
  void _internal_set_amount_mode(::accesscontrol::AmountMode value);
  public:

  // .accesscontrol.FailoverType failover = 20;
  void clear_failover();
  ::accesscontrol::FailoverType failover() const;
  void set_failover(::accesscontrol::FailoverType value);
  private:
  ::accesscontrol::FailoverType _internal_failover() const;
  void _internal_set_failover(::accesscontrol::FailoverType value);
  public:

  // @@protoc_insertion_point(class_scope:accesscontrol.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Rule_SubsetEntry_DoNotUse,
      std::string, ::accesscontrol::MatchString,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> subset_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Rule_LabelsEntry_DoNotUse,
      std::string, ::accesscontrol::MatchString,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Amount > amounts_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* id_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* service_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* namespace__;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* priority_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* action_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* disable_;
  ::accesscontrol::ReportPolicy* report_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* ctime_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* mtime_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* revision_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* service_token_;
  ::accesscontrol::AmountAdjusterAlgorithm* adjuster_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* regex_combine_;
  ::accesscontrol::RateLimitCluster* cluster_;
  ::accesscontrol::MatchString* method_;
  int resource_;
  int type_;
  int amount_mode_;
  int failover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class MatchString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.MatchString) */ {
 public:
  inline MatchString() : MatchString(nullptr) {}
  ~MatchString() override;
  explicit PROTOBUF_CONSTEXPR MatchString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchString(const MatchString& from);
  MatchString(MatchString&& from) noexcept
    : MatchString() {
    *this = ::std::move(from);
  }

  inline MatchString& operator=(const MatchString& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchString& operator=(MatchString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchString& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchString* internal_default_instance() {
    return reinterpret_cast<const MatchString*>(
               &_MatchString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MatchString& a, MatchString& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.MatchString";
  }
  protected:
  explicit MatchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchString_MatchStringType MatchStringType;
  static constexpr MatchStringType EXACT =
    MatchString_MatchStringType_EXACT;
  static constexpr MatchStringType REGEX =
    MatchString_MatchStringType_REGEX;
  static inline bool MatchStringType_IsValid(int value) {
    return MatchString_MatchStringType_IsValid(value);
  }
  static constexpr MatchStringType MatchStringType_MIN =
    MatchString_MatchStringType_MatchStringType_MIN;
  static constexpr MatchStringType MatchStringType_MAX =
    MatchString_MatchStringType_MatchStringType_MAX;
  static constexpr int MatchStringType_ARRAYSIZE =
    MatchString_MatchStringType_MatchStringType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatchStringType_descriptor() {
    return MatchString_MatchStringType_descriptor();
  }
  template<typename T>
  static inline const std::string& MatchStringType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchStringType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatchStringType_Name.");
    return MatchString_MatchStringType_Name(enum_t_value);
  }
  static inline bool MatchStringType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatchStringType* value) {
    return MatchString_MatchStringType_Parse(name, value);
  }

  typedef MatchString_ValueType ValueType;
  static constexpr ValueType TEXT =
    MatchString_ValueType_TEXT;
  static constexpr ValueType PARAMETER =
    MatchString_ValueType_PARAMETER;
  static constexpr ValueType VARIABLE =
    MatchString_ValueType_VARIABLE;
  static inline bool ValueType_IsValid(int value) {
    return MatchString_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    MatchString_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    MatchString_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    MatchString_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return MatchString_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return MatchString_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return MatchString_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
    kValueTypeFieldNumber = 3,
  };
  // .google.protobuf.StringValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_value();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::StringValue* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::StringValue* value);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_value();

  // .accesscontrol.MatchString.MatchStringType type = 1;
  void clear_type();
  ::accesscontrol::MatchString_MatchStringType type() const;
  void set_type(::accesscontrol::MatchString_MatchStringType value);
  private:
  ::accesscontrol::MatchString_MatchStringType _internal_type() const;
  void _internal_set_type(::accesscontrol::MatchString_MatchStringType value);
  public:

  // .accesscontrol.MatchString.ValueType value_type = 3;
  void clear_value_type();
  ::accesscontrol::MatchString_ValueType value_type() const;
  void set_value_type(::accesscontrol::MatchString_ValueType value);
  private:
  ::accesscontrol::MatchString_ValueType _internal_value_type() const;
  void _internal_set_value_type(::accesscontrol::MatchString_ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:accesscontrol.MatchString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* value_;
  int type_;
  int value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class Amount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.Amount) */ {
 public:
  inline Amount() : Amount(nullptr) {}
  ~Amount() override;
  explicit PROTOBUF_CONSTEXPR Amount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Amount(const Amount& from);
  Amount(Amount&& from) noexcept
    : Amount() {
    *this = ::std::move(from);
  }

  inline Amount& operator=(const Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amount& operator=(Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const Amount* internal_default_instance() {
    return reinterpret_cast<const Amount*>(
               &_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Amount& a, Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Amount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Amount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Amount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Amount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.Amount";
  }
  protected:
  explicit Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAmountFieldNumber = 1,
    kValidDurationFieldNumber = 2,
    kPrecisionFieldNumber = 3,
    kStartAmountFieldNumber = 4,
    kMinAmountFieldNumber = 5,
  };
  // .google.protobuf.UInt32Value maxAmount = 1;
  bool has_maxamount() const;
  private:
  bool _internal_has_maxamount() const;
  public:
  void clear_maxamount();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& maxamount() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_maxamount();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_maxamount();
  void set_allocated_maxamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* maxamount);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_maxamount() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_maxamount();
  public:
  void unsafe_arena_set_allocated_maxamount(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* maxamount);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_maxamount();

  // .google.protobuf.Duration validDuration = 2;
  bool has_validduration() const;
  private:
  bool _internal_has_validduration() const;
  public:
  void clear_validduration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& validduration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_validduration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_validduration();
  void set_allocated_validduration(::PROTOBUF_NAMESPACE_ID::Duration* validduration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_validduration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_validduration();
  public:
  void unsafe_arena_set_allocated_validduration(
      ::PROTOBUF_NAMESPACE_ID::Duration* validduration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_validduration();

  // .google.protobuf.UInt32Value precision = 3;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& precision() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_precision();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_precision();
  void set_allocated_precision(::PROTOBUF_NAMESPACE_ID::UInt32Value* precision);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_precision() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_precision();
  public:
  void unsafe_arena_set_allocated_precision(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_precision();

  // .google.protobuf.UInt32Value startAmount = 4;
  bool has_startamount() const;
  private:
  bool _internal_has_startamount() const;
  public:
  void clear_startamount();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& startamount() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_startamount();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_startamount();
  void set_allocated_startamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* startamount);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_startamount() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_startamount();
  public:
  void unsafe_arena_set_allocated_startamount(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* startamount);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_startamount();

  // .google.protobuf.UInt32Value minAmount = 5;
  bool has_minamount() const;
  private:
  bool _internal_has_minamount() const;
  public:
  void clear_minamount();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& minamount() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_minamount();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_minamount();
  void set_allocated_minamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* minamount);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_minamount() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_minamount();
  public:
  void unsafe_arena_set_allocated_minamount(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* minamount);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_minamount();

  // @@protoc_insertion_point(class_scope:accesscontrol.Amount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* maxamount_;
  ::PROTOBUF_NAMESPACE_ID::Duration* validduration_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* startamount_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* minamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ReportPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ReportPolicy) */ {
 public:
  inline ReportPolicy() : ReportPolicy(nullptr) {}
  ~ReportPolicy() override;
  explicit PROTOBUF_CONSTEXPR ReportPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportPolicy(const ReportPolicy& from);
  ReportPolicy(ReportPolicy&& from) noexcept
    : ReportPolicy() {
    *this = ::std::move(from);
  }

  inline ReportPolicy& operator=(const ReportPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportPolicy& operator=(ReportPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportPolicy* internal_default_instance() {
    return reinterpret_cast<const ReportPolicy*>(
               &_ReportPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReportPolicy& a, ReportPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ReportPolicy";
  }
  protected:
  explicit ReportPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kAmountPercentFieldNumber = 2,
  };
  // .google.protobuf.Duration interval = 1;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::PROTOBUF_NAMESPACE_ID::Duration& interval() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_interval();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_interval();
  void set_allocated_interval(::PROTOBUF_NAMESPACE_ID::Duration* interval);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_interval() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::PROTOBUF_NAMESPACE_ID::Duration* interval);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_interval();

  // .google.protobuf.UInt32Value amountPercent = 2;
  bool has_amountpercent() const;
  private:
  bool _internal_has_amountpercent() const;
  public:
  void clear_amountpercent();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& amountpercent() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_amountpercent();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_amountpercent();
  void set_allocated_amountpercent(::PROTOBUF_NAMESPACE_ID::UInt32Value* amountpercent);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_amountpercent() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_amountpercent();
  public:
  void unsafe_arena_set_allocated_amountpercent(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* amountpercent);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_amountpercent();

  // @@protoc_insertion_point(class_scope:accesscontrol.ReportPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* interval_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* amountpercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class AmountAdjusterAlgorithm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.AmountAdjusterAlgorithm) */ {
 public:
  inline AmountAdjusterAlgorithm() : AmountAdjusterAlgorithm(nullptr) {}
  ~AmountAdjusterAlgorithm() override;
  explicit PROTOBUF_CONSTEXPR AmountAdjusterAlgorithm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmountAdjusterAlgorithm(const AmountAdjusterAlgorithm& from);
  AmountAdjusterAlgorithm(AmountAdjusterAlgorithm&& from) noexcept
    : AmountAdjusterAlgorithm() {
    *this = ::std::move(from);
  }

  inline AmountAdjusterAlgorithm& operator=(const AmountAdjusterAlgorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountAdjusterAlgorithm& operator=(AmountAdjusterAlgorithm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmountAdjusterAlgorithm& default_instance() {
    return *internal_default_instance();
  }
  static inline const AmountAdjusterAlgorithm* internal_default_instance() {
    return reinterpret_cast<const AmountAdjusterAlgorithm*>(
               &_AmountAdjusterAlgorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AmountAdjusterAlgorithm& a, AmountAdjusterAlgorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountAdjusterAlgorithm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountAdjusterAlgorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmountAdjusterAlgorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmountAdjusterAlgorithm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmountAdjusterAlgorithm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AmountAdjusterAlgorithm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountAdjusterAlgorithm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.AmountAdjusterAlgorithm";
  }
  protected:
  explicit AmountAdjusterAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClimbFieldNumber = 1,
  };
  // .accesscontrol.ClimbConfig climb = 1;
  bool has_climb() const;
  private:
  bool _internal_has_climb() const;
  public:
  void clear_climb();
  const ::accesscontrol::ClimbConfig& climb() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig* release_climb();
  ::accesscontrol::ClimbConfig* mutable_climb();
  void set_allocated_climb(::accesscontrol::ClimbConfig* climb);
  private:
  const ::accesscontrol::ClimbConfig& _internal_climb() const;
  ::accesscontrol::ClimbConfig* _internal_mutable_climb();
  public:
  void unsafe_arena_set_allocated_climb(
      ::accesscontrol::ClimbConfig* climb);
  ::accesscontrol::ClimbConfig* unsafe_arena_release_climb();

  // @@protoc_insertion_point(class_scope:accesscontrol.AmountAdjusterAlgorithm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accesscontrol::ClimbConfig* climb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_MetricConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.MetricConfig) */ {
 public:
  inline ClimbConfig_MetricConfig() : ClimbConfig_MetricConfig(nullptr) {}
  ~ClimbConfig_MetricConfig() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_MetricConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_MetricConfig(const ClimbConfig_MetricConfig& from);
  ClimbConfig_MetricConfig(ClimbConfig_MetricConfig&& from) noexcept
    : ClimbConfig_MetricConfig() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_MetricConfig& operator=(const ClimbConfig_MetricConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_MetricConfig& operator=(ClimbConfig_MetricConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_MetricConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_MetricConfig* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_MetricConfig*>(
               &_ClimbConfig_MetricConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClimbConfig_MetricConfig& a, ClimbConfig_MetricConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_MetricConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_MetricConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_MetricConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_MetricConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_MetricConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_MetricConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_MetricConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.MetricConfig";
  }
  protected:
  explicit ClimbConfig_MetricConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kReportIntervalFieldNumber = 3,
  };
  // .google.protobuf.Duration window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::PROTOBUF_NAMESPACE_ID::Duration& window() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_window();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_window();
  void set_allocated_window(::PROTOBUF_NAMESPACE_ID::Duration* window);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_window() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::PROTOBUF_NAMESPACE_ID::Duration* window);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_window();

  // .google.protobuf.UInt32Value precision = 2;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& precision() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_precision();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_precision();
  void set_allocated_precision(::PROTOBUF_NAMESPACE_ID::UInt32Value* precision);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_precision() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_precision();
  public:
  void unsafe_arena_set_allocated_precision(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_precision();

  // .google.protobuf.Duration reportInterval = 3;
  bool has_reportinterval() const;
  private:
  bool _internal_has_reportinterval() const;
  public:
  void clear_reportinterval();
  const ::PROTOBUF_NAMESPACE_ID::Duration& reportinterval() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_reportinterval();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_reportinterval();
  void set_allocated_reportinterval(::PROTOBUF_NAMESPACE_ID::Duration* reportinterval);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_reportinterval() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_reportinterval();
  public:
  void unsafe_arena_set_allocated_reportinterval(
      ::PROTOBUF_NAMESPACE_ID::Duration* reportinterval);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_reportinterval();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.MetricConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* window_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision_;
  ::PROTOBUF_NAMESPACE_ID::Duration* reportinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig) */ {
 public:
  inline ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig() : ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(nullptr) {}
  ~ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from);
  ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig&& from) noexcept
    : ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& operator=(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& operator=(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig*>(
               &_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& a, ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig";
  }
  protected:
  explicit ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodesFieldNumber = 2,
    kTypeFieldNumber = 1,
    kErrorRateFieldNumber = 3,
  };
  // repeated .google.protobuf.Int64Value errorCodes = 2;
  int errorcodes_size() const;
  private:
  int _internal_errorcodes_size() const;
  public:
  void clear_errorcodes();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_errorcodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Int64Value >*
      mutable_errorcodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_errorcodes(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_add_errorcodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& errorcodes(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* add_errorcodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Int64Value >&
      errorcodes() const;

  // .google.protobuf.StringValue type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& type() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_type();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_type();
  void set_allocated_type(::PROTOBUF_NAMESPACE_ID::StringValue* type);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_type() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::PROTOBUF_NAMESPACE_ID::StringValue* type);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_type();

  // .google.protobuf.Int32Value errorRate = 3;
  bool has_errorrate() const;
  private:
  bool _internal_has_errorrate() const;
  public:
  void clear_errorrate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& errorrate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_errorrate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_errorrate();
  void set_allocated_errorrate(::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_errorrate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_errorrate();
  public:
  void unsafe_arena_set_allocated_errorrate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_errorrate();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Int64Value > errorcodes_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* type_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_TriggerPolicy_ErrorRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate) */ {
 public:
  inline ClimbConfig_TriggerPolicy_ErrorRate() : ClimbConfig_TriggerPolicy_ErrorRate(nullptr) {}
  ~ClimbConfig_TriggerPolicy_ErrorRate() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_TriggerPolicy_ErrorRate(const ClimbConfig_TriggerPolicy_ErrorRate& from);
  ClimbConfig_TriggerPolicy_ErrorRate(ClimbConfig_TriggerPolicy_ErrorRate&& from) noexcept
    : ClimbConfig_TriggerPolicy_ErrorRate() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_TriggerPolicy_ErrorRate& operator=(const ClimbConfig_TriggerPolicy_ErrorRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_TriggerPolicy_ErrorRate& operator=(ClimbConfig_TriggerPolicy_ErrorRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_TriggerPolicy_ErrorRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_TriggerPolicy_ErrorRate* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_TriggerPolicy_ErrorRate*>(
               &_ClimbConfig_TriggerPolicy_ErrorRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClimbConfig_TriggerPolicy_ErrorRate& a, ClimbConfig_TriggerPolicy_ErrorRate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_TriggerPolicy_ErrorRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_TriggerPolicy_ErrorRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_TriggerPolicy_ErrorRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_TriggerPolicy_ErrorRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_TriggerPolicy_ErrorRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_TriggerPolicy_ErrorRate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_TriggerPolicy_ErrorRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate";
  }
  protected:
  explicit ClimbConfig_TriggerPolicy_ErrorRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig SpecialConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialsFieldNumber = 4,
    kEnableFieldNumber = 1,
    kRequestVolumeThresholdFieldNumber = 2,
    kErrorRateFieldNumber = 3,
  };
  // repeated .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig specials = 4;
  int specials_size() const;
  private:
  int _internal_specials_size() const;
  public:
  void clear_specials();
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* mutable_specials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >*
      mutable_specials();
  private:
  const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& _internal_specials(int index) const;
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* _internal_add_specials();
  public:
  const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& specials(int index) const;
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* add_specials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >&
      specials() const;

  // .google.protobuf.BoolValue enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enable();
  void set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enable();

  // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
  bool has_requestvolumethreshold() const;
  private:
  bool _internal_has_requestvolumethreshold() const;
  public:
  void clear_requestvolumethreshold();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& requestvolumethreshold() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_requestvolumethreshold();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_requestvolumethreshold();
  void set_allocated_requestvolumethreshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* requestvolumethreshold);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_requestvolumethreshold() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_requestvolumethreshold();
  public:
  void unsafe_arena_set_allocated_requestvolumethreshold(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* requestvolumethreshold);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_requestvolumethreshold();

  // .google.protobuf.Int32Value errorRate = 3;
  bool has_errorrate() const;
  private:
  bool _internal_has_errorrate() const;
  public:
  void clear_errorrate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& errorrate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_errorrate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_errorrate();
  void set_allocated_errorrate(::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_errorrate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_errorrate();
  public:
  void unsafe_arena_set_allocated_errorrate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_errorrate();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig > specials_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* requestvolumethreshold_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_TriggerPolicy_SlowRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate) */ {
 public:
  inline ClimbConfig_TriggerPolicy_SlowRate() : ClimbConfig_TriggerPolicy_SlowRate(nullptr) {}
  ~ClimbConfig_TriggerPolicy_SlowRate() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_SlowRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_TriggerPolicy_SlowRate(const ClimbConfig_TriggerPolicy_SlowRate& from);
  ClimbConfig_TriggerPolicy_SlowRate(ClimbConfig_TriggerPolicy_SlowRate&& from) noexcept
    : ClimbConfig_TriggerPolicy_SlowRate() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_TriggerPolicy_SlowRate& operator=(const ClimbConfig_TriggerPolicy_SlowRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_TriggerPolicy_SlowRate& operator=(ClimbConfig_TriggerPolicy_SlowRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_TriggerPolicy_SlowRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_TriggerPolicy_SlowRate* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_TriggerPolicy_SlowRate*>(
               &_ClimbConfig_TriggerPolicy_SlowRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClimbConfig_TriggerPolicy_SlowRate& a, ClimbConfig_TriggerPolicy_SlowRate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_TriggerPolicy_SlowRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_TriggerPolicy_SlowRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_TriggerPolicy_SlowRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_TriggerPolicy_SlowRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_TriggerPolicy_SlowRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_TriggerPolicy_SlowRate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_TriggerPolicy_SlowRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.TriggerPolicy.SlowRate";
  }
  protected:
  explicit ClimbConfig_TriggerPolicy_SlowRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kMaxRtFieldNumber = 2,
    kSlowRateFieldNumber = 3,
  };
  // .google.protobuf.BoolValue enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enable();
  void set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enable();

  // .google.protobuf.Duration maxRt = 2;
  bool has_maxrt() const;
  private:
  bool _internal_has_maxrt() const;
  public:
  void clear_maxrt();
  const ::PROTOBUF_NAMESPACE_ID::Duration& maxrt() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_maxrt();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_maxrt();
  void set_allocated_maxrt(::PROTOBUF_NAMESPACE_ID::Duration* maxrt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_maxrt() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_maxrt();
  public:
  void unsafe_arena_set_allocated_maxrt(
      ::PROTOBUF_NAMESPACE_ID::Duration* maxrt);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_maxrt();

  // .google.protobuf.Int32Value slowRate = 3;
  bool has_slowrate() const;
  private:
  bool _internal_has_slowrate() const;
  public:
  void clear_slowrate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& slowrate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_slowrate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_slowrate();
  void set_allocated_slowrate(::PROTOBUF_NAMESPACE_ID::Int32Value* slowrate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_slowrate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_slowrate();
  public:
  void unsafe_arena_set_allocated_slowrate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* slowrate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_slowrate();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* maxrt_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* slowrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_TriggerPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.TriggerPolicy) */ {
 public:
  inline ClimbConfig_TriggerPolicy() : ClimbConfig_TriggerPolicy(nullptr) {}
  ~ClimbConfig_TriggerPolicy() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_TriggerPolicy(const ClimbConfig_TriggerPolicy& from);
  ClimbConfig_TriggerPolicy(ClimbConfig_TriggerPolicy&& from) noexcept
    : ClimbConfig_TriggerPolicy() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_TriggerPolicy& operator=(const ClimbConfig_TriggerPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_TriggerPolicy& operator=(ClimbConfig_TriggerPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_TriggerPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_TriggerPolicy* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_TriggerPolicy*>(
               &_ClimbConfig_TriggerPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClimbConfig_TriggerPolicy& a, ClimbConfig_TriggerPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_TriggerPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_TriggerPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_TriggerPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_TriggerPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_TriggerPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_TriggerPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_TriggerPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.TriggerPolicy";
  }
  protected:
  explicit ClimbConfig_TriggerPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClimbConfig_TriggerPolicy_ErrorRate ErrorRate;
  typedef ClimbConfig_TriggerPolicy_SlowRate SlowRate;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorRateFieldNumber = 1,
    kSlowRateFieldNumber = 2,
  };
  // .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate errorRate = 1;
  bool has_errorrate() const;
  private:
  bool _internal_has_errorrate() const;
  public:
  void clear_errorrate();
  const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate& errorrate() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* release_errorrate();
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* mutable_errorrate();
  void set_allocated_errorrate(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* errorrate);
  private:
  const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate& _internal_errorrate() const;
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* _internal_mutable_errorrate();
  public:
  void unsafe_arena_set_allocated_errorrate(
      ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* errorrate);
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* unsafe_arena_release_errorrate();

  // .accesscontrol.ClimbConfig.TriggerPolicy.SlowRate slowRate = 2;
  bool has_slowrate() const;
  private:
  bool _internal_has_slowrate() const;
  public:
  void clear_slowrate();
  const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate& slowrate() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* release_slowrate();
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* mutable_slowrate();
  void set_allocated_slowrate(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* slowrate);
  private:
  const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate& _internal_slowrate() const;
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* _internal_mutable_slowrate();
  public:
  void unsafe_arena_set_allocated_slowrate(
      ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* slowrate);
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* unsafe_arena_release_slowrate();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.TriggerPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* errorrate_;
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* slowrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig_ClimbThrottling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig.ClimbThrottling) */ {
 public:
  inline ClimbConfig_ClimbThrottling() : ClimbConfig_ClimbThrottling(nullptr) {}
  ~ClimbConfig_ClimbThrottling() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig_ClimbThrottling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig_ClimbThrottling(const ClimbConfig_ClimbThrottling& from);
  ClimbConfig_ClimbThrottling(ClimbConfig_ClimbThrottling&& from) noexcept
    : ClimbConfig_ClimbThrottling() {
    *this = ::std::move(from);
  }

  inline ClimbConfig_ClimbThrottling& operator=(const ClimbConfig_ClimbThrottling& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig_ClimbThrottling& operator=(ClimbConfig_ClimbThrottling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig_ClimbThrottling& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig_ClimbThrottling* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig_ClimbThrottling*>(
               &_ClimbConfig_ClimbThrottling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClimbConfig_ClimbThrottling& a, ClimbConfig_ClimbThrottling& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig_ClimbThrottling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig_ClimbThrottling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig_ClimbThrottling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig_ClimbThrottling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig_ClimbThrottling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig_ClimbThrottling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig_ClimbThrottling* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig.ClimbThrottling";
  }
  protected:
  explicit ClimbConfig_ClimbThrottling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColdBelowTuneDownRateFieldNumber = 1,
    kColdBelowTuneUpRateFieldNumber = 2,
    kColdAboveTuneDownRateFieldNumber = 3,
    kColdAboveTuneUpRateFieldNumber = 4,
    kLimitThresholdToTuneUpFieldNumber = 5,
    kJudgeDurationFieldNumber = 6,
    kTuneUpPeriodFieldNumber = 7,
    kTuneDownPeriodFieldNumber = 8,
  };
  // .google.protobuf.Int32Value coldBelowTuneDownRate = 1;
  bool has_coldbelowtunedownrate() const;
  private:
  bool _internal_has_coldbelowtunedownrate() const;
  public:
  void clear_coldbelowtunedownrate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldbelowtunedownrate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_coldbelowtunedownrate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_coldbelowtunedownrate();
  void set_allocated_coldbelowtunedownrate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtunedownrate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_coldbelowtunedownrate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_coldbelowtunedownrate();
  public:
  void unsafe_arena_set_allocated_coldbelowtunedownrate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtunedownrate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_coldbelowtunedownrate();

  // .google.protobuf.Int32Value coldBelowTuneUpRate = 2;
  bool has_coldbelowtuneuprate() const;
  private:
  bool _internal_has_coldbelowtuneuprate() const;
  public:
  void clear_coldbelowtuneuprate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldbelowtuneuprate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_coldbelowtuneuprate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_coldbelowtuneuprate();
  void set_allocated_coldbelowtuneuprate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtuneuprate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_coldbelowtuneuprate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_coldbelowtuneuprate();
  public:
  void unsafe_arena_set_allocated_coldbelowtuneuprate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtuneuprate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_coldbelowtuneuprate();

  // .google.protobuf.Int32Value coldAboveTuneDownRate = 3;
  bool has_coldabovetunedownrate() const;
  private:
  bool _internal_has_coldabovetunedownrate() const;
  public:
  void clear_coldabovetunedownrate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldabovetunedownrate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_coldabovetunedownrate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_coldabovetunedownrate();
  void set_allocated_coldabovetunedownrate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetunedownrate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_coldabovetunedownrate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_coldabovetunedownrate();
  public:
  void unsafe_arena_set_allocated_coldabovetunedownrate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetunedownrate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_coldabovetunedownrate();

  // .google.protobuf.Int32Value coldAboveTuneUpRate = 4;
  bool has_coldabovetuneuprate() const;
  private:
  bool _internal_has_coldabovetuneuprate() const;
  public:
  void clear_coldabovetuneuprate();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldabovetuneuprate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_coldabovetuneuprate();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_coldabovetuneuprate();
  void set_allocated_coldabovetuneuprate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetuneuprate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_coldabovetuneuprate() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_coldabovetuneuprate();
  public:
  void unsafe_arena_set_allocated_coldabovetuneuprate(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetuneuprate);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_coldabovetuneuprate();

  // .google.protobuf.Int32Value limitThresholdToTuneUp = 5;
  bool has_limitthresholdtotuneup() const;
  private:
  bool _internal_has_limitthresholdtotuneup() const;
  public:
  void clear_limitthresholdtotuneup();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& limitthresholdtotuneup() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_limitthresholdtotuneup();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_limitthresholdtotuneup();
  void set_allocated_limitthresholdtotuneup(::PROTOBUF_NAMESPACE_ID::Int32Value* limitthresholdtotuneup);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_limitthresholdtotuneup() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_limitthresholdtotuneup();
  public:
  void unsafe_arena_set_allocated_limitthresholdtotuneup(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* limitthresholdtotuneup);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_limitthresholdtotuneup();

  // .google.protobuf.Duration judgeDuration = 6;
  bool has_judgeduration() const;
  private:
  bool _internal_has_judgeduration() const;
  public:
  void clear_judgeduration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& judgeduration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_judgeduration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_judgeduration();
  void set_allocated_judgeduration(::PROTOBUF_NAMESPACE_ID::Duration* judgeduration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_judgeduration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_judgeduration();
  public:
  void unsafe_arena_set_allocated_judgeduration(
      ::PROTOBUF_NAMESPACE_ID::Duration* judgeduration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_judgeduration();

  // .google.protobuf.Int32Value tuneUpPeriod = 7;
  bool has_tuneupperiod() const;
  private:
  bool _internal_has_tuneupperiod() const;
  public:
  void clear_tuneupperiod();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& tuneupperiod() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_tuneupperiod();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_tuneupperiod();
  void set_allocated_tuneupperiod(::PROTOBUF_NAMESPACE_ID::Int32Value* tuneupperiod);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_tuneupperiod() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_tuneupperiod();
  public:
  void unsafe_arena_set_allocated_tuneupperiod(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* tuneupperiod);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_tuneupperiod();

  // .google.protobuf.Int32Value tuneDownPeriod = 8;
  bool has_tunedownperiod() const;
  private:
  bool _internal_has_tunedownperiod() const;
  public:
  void clear_tunedownperiod();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& tunedownperiod() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_tunedownperiod();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_tunedownperiod();
  void set_allocated_tunedownperiod(::PROTOBUF_NAMESPACE_ID::Int32Value* tunedownperiod);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_tunedownperiod() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_tunedownperiod();
  public:
  void unsafe_arena_set_allocated_tunedownperiod(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* tunedownperiod);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_tunedownperiod();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig.ClimbThrottling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtunedownrate_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtuneuprate_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetunedownrate_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetuneuprate_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* limitthresholdtotuneup_;
  ::PROTOBUF_NAMESPACE_ID::Duration* judgeduration_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* tuneupperiod_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* tunedownperiod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class ClimbConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.ClimbConfig) */ {
 public:
  inline ClimbConfig() : ClimbConfig(nullptr) {}
  ~ClimbConfig() override;
  explicit PROTOBUF_CONSTEXPR ClimbConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClimbConfig(const ClimbConfig& from);
  ClimbConfig(ClimbConfig&& from) noexcept
    : ClimbConfig() {
    *this = ::std::move(from);
  }

  inline ClimbConfig& operator=(const ClimbConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClimbConfig& operator=(ClimbConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClimbConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClimbConfig* internal_default_instance() {
    return reinterpret_cast<const ClimbConfig*>(
               &_ClimbConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ClimbConfig& a, ClimbConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClimbConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClimbConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClimbConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClimbConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClimbConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClimbConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClimbConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.ClimbConfig";
  }
  protected:
  explicit ClimbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClimbConfig_MetricConfig MetricConfig;
  typedef ClimbConfig_TriggerPolicy TriggerPolicy;
  typedef ClimbConfig_ClimbThrottling ClimbThrottling;

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kMetricFieldNumber = 2,
    kPolicyFieldNumber = 3,
    kThrottlingFieldNumber = 4,
  };
  // .google.protobuf.BoolValue enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_enable();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_enable();
  void set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_enable() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* enable);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_enable();

  // .accesscontrol.ClimbConfig.MetricConfig metric = 2;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::accesscontrol::ClimbConfig_MetricConfig& metric() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig_MetricConfig* release_metric();
  ::accesscontrol::ClimbConfig_MetricConfig* mutable_metric();
  void set_allocated_metric(::accesscontrol::ClimbConfig_MetricConfig* metric);
  private:
  const ::accesscontrol::ClimbConfig_MetricConfig& _internal_metric() const;
  ::accesscontrol::ClimbConfig_MetricConfig* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::accesscontrol::ClimbConfig_MetricConfig* metric);
  ::accesscontrol::ClimbConfig_MetricConfig* unsafe_arena_release_metric();

  // .accesscontrol.ClimbConfig.TriggerPolicy policy = 3;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::accesscontrol::ClimbConfig_TriggerPolicy& policy() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig_TriggerPolicy* release_policy();
  ::accesscontrol::ClimbConfig_TriggerPolicy* mutable_policy();
  void set_allocated_policy(::accesscontrol::ClimbConfig_TriggerPolicy* policy);
  private:
  const ::accesscontrol::ClimbConfig_TriggerPolicy& _internal_policy() const;
  ::accesscontrol::ClimbConfig_TriggerPolicy* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::accesscontrol::ClimbConfig_TriggerPolicy* policy);
  ::accesscontrol::ClimbConfig_TriggerPolicy* unsafe_arena_release_policy();

  // .accesscontrol.ClimbConfig.ClimbThrottling throttling = 4;
  bool has_throttling() const;
  private:
  bool _internal_has_throttling() const;
  public:
  void clear_throttling();
  const ::accesscontrol::ClimbConfig_ClimbThrottling& throttling() const;
  PROTOBUF_NODISCARD ::accesscontrol::ClimbConfig_ClimbThrottling* release_throttling();
  ::accesscontrol::ClimbConfig_ClimbThrottling* mutable_throttling();
  void set_allocated_throttling(::accesscontrol::ClimbConfig_ClimbThrottling* throttling);
  private:
  const ::accesscontrol::ClimbConfig_ClimbThrottling& _internal_throttling() const;
  ::accesscontrol::ClimbConfig_ClimbThrottling* _internal_mutable_throttling();
  public:
  void unsafe_arena_set_allocated_throttling(
      ::accesscontrol::ClimbConfig_ClimbThrottling* throttling);
  ::accesscontrol::ClimbConfig_ClimbThrottling* unsafe_arena_release_throttling();

  // @@protoc_insertion_point(class_scope:accesscontrol.ClimbConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* enable_;
  ::accesscontrol::ClimbConfig_MetricConfig* metric_;
  ::accesscontrol::ClimbConfig_TriggerPolicy* policy_;
  ::accesscontrol::ClimbConfig_ClimbThrottling* throttling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// -------------------------------------------------------------------

class RateLimitCluster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accesscontrol.RateLimitCluster) */ {
 public:
  inline RateLimitCluster() : RateLimitCluster(nullptr) {}
  ~RateLimitCluster() override;
  explicit PROTOBUF_CONSTEXPR RateLimitCluster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateLimitCluster(const RateLimitCluster& from);
  RateLimitCluster(RateLimitCluster&& from) noexcept
    : RateLimitCluster() {
    *this = ::std::move(from);
  }

  inline RateLimitCluster& operator=(const RateLimitCluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimitCluster& operator=(RateLimitCluster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateLimitCluster& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimitCluster* internal_default_instance() {
    return reinterpret_cast<const RateLimitCluster*>(
               &_RateLimitCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RateLimitCluster& a, RateLimitCluster& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimitCluster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimitCluster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateLimitCluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateLimitCluster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RateLimitCluster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RateLimitCluster& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimitCluster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accesscontrol.RateLimitCluster";
  }
  protected:
  explicit RateLimitCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // .google.protobuf.StringValue service = 1;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& service() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_service();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_service();
  void set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_service() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_service();
  public:
  void unsafe_arena_set_allocated_service(
      ::PROTOBUF_NAMESPACE_ID::StringValue* service);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_service();

  // .google.protobuf.StringValue namespace = 2;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_namespace_();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_namespace_();
  void set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_namespace_() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_namespace_();

  // @@protoc_insertion_point(class_scope:accesscontrol.RateLimitCluster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* service_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_limiter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RateLimit

// repeated .accesscontrol.Rule rules = 1;
inline int RateLimit::_internal_rules_size() const {
  return rules_.size();
}
inline int RateLimit::rules_size() const {
  return _internal_rules_size();
}
inline void RateLimit::clear_rules() {
  rules_.Clear();
}
inline ::accesscontrol::Rule* RateLimit::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:accesscontrol.RateLimit.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Rule >*
RateLimit::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:accesscontrol.RateLimit.rules)
  return &rules_;
}
inline const ::accesscontrol::Rule& RateLimit::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::accesscontrol::Rule& RateLimit::rules(int index) const {
  // @@protoc_insertion_point(field_get:accesscontrol.RateLimit.rules)
  return _internal_rules(index);
}
inline ::accesscontrol::Rule* RateLimit::_internal_add_rules() {
  return rules_.Add();
}
inline ::accesscontrol::Rule* RateLimit::add_rules() {
  ::accesscontrol::Rule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:accesscontrol.RateLimit.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Rule >&
RateLimit::rules() const {
  // @@protoc_insertion_point(field_list:accesscontrol.RateLimit.rules)
  return rules_;
}

// .google.protobuf.StringValue revision = 2;
inline bool RateLimit::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool RateLimit::has_revision() const {
  return _internal_has_revision();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimit::_internal_revision() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimit::revision() const {
  // @@protoc_insertion_point(field_get:accesscontrol.RateLimit.revision)
  return _internal_revision();
}
inline void RateLimit::unsafe_arena_set_allocated_revision(
    ::PROTOBUF_NAMESPACE_ID::StringValue* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.RateLimit.revision)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimit::release_revision() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimit::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:accesscontrol.RateLimit.revision)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimit::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimit::mutable_revision() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:accesscontrol.RateLimit.revision)
  return _msg;
}
inline void RateLimit::set_allocated_revision(::PROTOBUF_NAMESPACE_ID::StringValue* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.RateLimit.revision)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Rule

// .google.protobuf.StringValue id = 1;
inline bool Rule::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Rule::has_id() const {
  return _internal_has_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_id() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::id() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.id)
  return _internal_id();
}
inline void Rule::unsafe_arena_set_allocated_id(
    ::PROTOBUF_NAMESPACE_ID::StringValue* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.id)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_id() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.id)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_id() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.id)
  return _msg;
}
inline void Rule::set_allocated_id(::PROTOBUF_NAMESPACE_ID::StringValue* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.id)
}

// .google.protobuf.StringValue service = 2;
inline bool Rule::_internal_has_service() const {
  return this != internal_default_instance() && service_ != nullptr;
}
inline bool Rule::has_service() const {
  return _internal_has_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_service() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = service_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::service() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.service)
  return _internal_service();
}
inline void Rule::unsafe_arena_set_allocated_service(
    ::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.service)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_service() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_service() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.service)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_service() {
  
  if (service_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    service_ = p;
  }
  return service_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_service() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.service)
  return _msg;
}
inline void Rule::set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service));
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.service)
}

// .google.protobuf.StringValue namespace = 3;
inline bool Rule::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool Rule::has_namespace_() const {
  return _internal_has_namespace_();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_namespace_() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::namespace_() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.namespace)
  return _internal_namespace_();
}
inline void Rule::unsafe_arena_set_allocated_namespace_(
    ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.namespace)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_namespace_() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.namespace)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_namespace_() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.namespace)
  return _msg;
}
inline void Rule::set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_));
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.namespace)
}

// map<string, .accesscontrol.MatchString> subset = 4;
inline int Rule::_internal_subset_size() const {
  return subset_.size();
}
inline int Rule::subset_size() const {
  return _internal_subset_size();
}
inline void Rule::clear_subset() {
  subset_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
Rule::_internal_subset() const {
  return subset_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
Rule::subset() const {
  // @@protoc_insertion_point(field_map:accesscontrol.Rule.subset)
  return _internal_subset();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
Rule::_internal_mutable_subset() {
  return subset_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
Rule::mutable_subset() {
  // @@protoc_insertion_point(field_mutable_map:accesscontrol.Rule.subset)
  return _internal_mutable_subset();
}

// .google.protobuf.UInt32Value priority = 5;
inline bool Rule::_internal_has_priority() const {
  return this != internal_default_instance() && priority_ != nullptr;
}
inline bool Rule::has_priority() const {
  return _internal_has_priority();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Rule::_internal_priority() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = priority_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Rule::priority() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.priority)
  return _internal_priority();
}
inline void Rule::unsafe_arena_set_allocated_priority(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* priority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_);
  }
  priority_ = priority;
  if (priority) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.priority)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Rule::release_priority() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = priority_;
  priority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Rule::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.priority)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = priority_;
  priority_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Rule::_internal_mutable_priority() {
  
  if (priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    priority_ = p;
  }
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Rule::mutable_priority() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.priority)
  return _msg;
}
inline void Rule::set_allocated_priority(::PROTOBUF_NAMESPACE_ID::UInt32Value* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_);
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority));
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    
  } else {
    
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.priority)
}

// .accesscontrol.ResourceType resource = 6;
inline void Rule::clear_resource() {
  resource_ = 0;
}
inline ::accesscontrol::ResourceType Rule::_internal_resource() const {
  return static_cast< ::accesscontrol::ResourceType >(resource_);
}
inline ::accesscontrol::ResourceType Rule::resource() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.resource)
  return _internal_resource();
}
inline void Rule::_internal_set_resource(::accesscontrol::ResourceType value) {
  
  resource_ = value;
}
inline void Rule::set_resource(::accesscontrol::ResourceType value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:accesscontrol.Rule.resource)
}

// .accesscontrol.Type type = 7;
inline void Rule::clear_type() {
  type_ = 0;
}
inline ::accesscontrol::Type Rule::_internal_type() const {
  return static_cast< ::accesscontrol::Type >(type_);
}
inline ::accesscontrol::Type Rule::type() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.type)
  return _internal_type();
}
inline void Rule::_internal_set_type(::accesscontrol::Type value) {
  
  type_ = value;
}
inline void Rule::set_type(::accesscontrol::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:accesscontrol.Rule.type)
}

// map<string, .accesscontrol.MatchString> labels = 8;
inline int Rule::_internal_labels_size() const {
  return labels_.size();
}
inline int Rule::labels_size() const {
  return _internal_labels_size();
}
inline void Rule::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
Rule::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >&
Rule::labels() const {
  // @@protoc_insertion_point(field_map:accesscontrol.Rule.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
Rule::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >*
Rule::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:accesscontrol.Rule.labels)
  return _internal_mutable_labels();
}

// repeated .accesscontrol.Amount amounts = 9;
inline int Rule::_internal_amounts_size() const {
  return amounts_.size();
}
inline int Rule::amounts_size() const {
  return _internal_amounts_size();
}
inline void Rule::clear_amounts() {
  amounts_.Clear();
}
inline ::accesscontrol::Amount* Rule::mutable_amounts(int index) {
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.amounts)
  return amounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Amount >*
Rule::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:accesscontrol.Rule.amounts)
  return &amounts_;
}
inline const ::accesscontrol::Amount& Rule::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline const ::accesscontrol::Amount& Rule::amounts(int index) const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.amounts)
  return _internal_amounts(index);
}
inline ::accesscontrol::Amount* Rule::_internal_add_amounts() {
  return amounts_.Add();
}
inline ::accesscontrol::Amount* Rule::add_amounts() {
  ::accesscontrol::Amount* _add = _internal_add_amounts();
  // @@protoc_insertion_point(field_add:accesscontrol.Rule.amounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::Amount >&
Rule::amounts() const {
  // @@protoc_insertion_point(field_list:accesscontrol.Rule.amounts)
  return amounts_;
}

// .google.protobuf.StringValue action = 10;
inline bool Rule::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool Rule::has_action() const {
  return _internal_has_action();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_action() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::action() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.action)
  return _internal_action();
}
inline void Rule::unsafe_arena_set_allocated_action(
    ::PROTOBUF_NAMESPACE_ID::StringValue* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.action)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_action() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = action_;
  action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.action)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    action_ = p;
  }
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_action() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.action)
  return _msg;
}
inline void Rule::set_allocated_action(::PROTOBUF_NAMESPACE_ID::StringValue* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action));
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.action)
}

// .google.protobuf.BoolValue disable = 11;
inline bool Rule::_internal_has_disable() const {
  return this != internal_default_instance() && disable_ != nullptr;
}
inline bool Rule::has_disable() const {
  return _internal_has_disable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Rule::_internal_disable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = disable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Rule::disable() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.disable)
  return _internal_disable();
}
inline void Rule::unsafe_arena_set_allocated_disable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* disable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_);
  }
  disable_ = disable;
  if (disable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.disable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::release_disable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = disable_;
  disable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::unsafe_arena_release_disable() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.disable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = disable_;
  disable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::_internal_mutable_disable() {
  
  if (disable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    disable_ = p;
  }
  return disable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::mutable_disable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_disable();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.disable)
  return _msg;
}
inline void Rule::set_allocated_disable(::PROTOBUF_NAMESPACE_ID::BoolValue* disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_);
  }
  if (disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable));
    if (message_arena != submessage_arena) {
      disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable, submessage_arena);
    }
    
  } else {
    
  }
  disable_ = disable;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.disable)
}

// .accesscontrol.ReportPolicy report = 12;
inline bool Rule::_internal_has_report() const {
  return this != internal_default_instance() && report_ != nullptr;
}
inline bool Rule::has_report() const {
  return _internal_has_report();
}
inline void Rule::clear_report() {
  if (GetArenaForAllocation() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
}
inline const ::accesscontrol::ReportPolicy& Rule::_internal_report() const {
  const ::accesscontrol::ReportPolicy* p = report_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ReportPolicy&>(
      ::accesscontrol::_ReportPolicy_default_instance_);
}
inline const ::accesscontrol::ReportPolicy& Rule::report() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.report)
  return _internal_report();
}
inline void Rule::unsafe_arena_set_allocated_report(
    ::accesscontrol::ReportPolicy* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report_);
  }
  report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.report)
}
inline ::accesscontrol::ReportPolicy* Rule::release_report() {
  
  ::accesscontrol::ReportPolicy* temp = report_;
  report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ReportPolicy* Rule::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.report)
  
  ::accesscontrol::ReportPolicy* temp = report_;
  report_ = nullptr;
  return temp;
}
inline ::accesscontrol::ReportPolicy* Rule::_internal_mutable_report() {
  
  if (report_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ReportPolicy>(GetArenaForAllocation());
    report_ = p;
  }
  return report_;
}
inline ::accesscontrol::ReportPolicy* Rule::mutable_report() {
  ::accesscontrol::ReportPolicy* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.report)
  return _msg;
}
inline void Rule::set_allocated_report(::accesscontrol::ReportPolicy* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete report_;
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(report);
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  report_ = report;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.report)
}

// .google.protobuf.StringValue ctime = 13;
inline bool Rule::_internal_has_ctime() const {
  return this != internal_default_instance() && ctime_ != nullptr;
}
inline bool Rule::has_ctime() const {
  return _internal_has_ctime();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_ctime() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = ctime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::ctime() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.ctime)
  return _internal_ctime();
}
inline void Rule::unsafe_arena_set_allocated_ctime(
    ::PROTOBUF_NAMESPACE_ID::StringValue* ctime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctime_);
  }
  ctime_ = ctime;
  if (ctime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.ctime)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_ctime() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = ctime_;
  ctime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_ctime() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.ctime)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = ctime_;
  ctime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_ctime() {
  
  if (ctime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    ctime_ = p;
  }
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_ctime() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_ctime();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.ctime)
  return _msg;
}
inline void Rule::set_allocated_ctime(::PROTOBUF_NAMESPACE_ID::StringValue* ctime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctime_);
  }
  if (ctime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctime));
    if (message_arena != submessage_arena) {
      ctime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctime, submessage_arena);
    }
    
  } else {
    
  }
  ctime_ = ctime;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.ctime)
}

// .google.protobuf.StringValue mtime = 14;
inline bool Rule::_internal_has_mtime() const {
  return this != internal_default_instance() && mtime_ != nullptr;
}
inline bool Rule::has_mtime() const {
  return _internal_has_mtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_mtime() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = mtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::mtime() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.mtime)
  return _internal_mtime();
}
inline void Rule::unsafe_arena_set_allocated_mtime(
    ::PROTOBUF_NAMESPACE_ID::StringValue* mtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime_);
  }
  mtime_ = mtime;
  if (mtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.mtime)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_mtime() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = mtime_;
  mtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_mtime() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.mtime)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = mtime_;
  mtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_mtime() {
  
  if (mtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    mtime_ = p;
  }
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_mtime() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_mtime();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.mtime)
  return _msg;
}
inline void Rule::set_allocated_mtime(::PROTOBUF_NAMESPACE_ID::StringValue* mtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime_);
  }
  if (mtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime));
    if (message_arena != submessage_arena) {
      mtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtime, submessage_arena);
    }
    
  } else {
    
  }
  mtime_ = mtime;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.mtime)
}

// .google.protobuf.StringValue revision = 15;
inline bool Rule::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Rule::has_revision() const {
  return _internal_has_revision();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_revision() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::revision() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.revision)
  return _internal_revision();
}
inline void Rule::unsafe_arena_set_allocated_revision(
    ::PROTOBUF_NAMESPACE_ID::StringValue* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.revision)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_revision() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.revision)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_revision() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.revision)
  return _msg;
}
inline void Rule::set_allocated_revision(::PROTOBUF_NAMESPACE_ID::StringValue* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.revision)
}

// .google.protobuf.StringValue service_token = 16 [json_name = "service_token"];
inline bool Rule::_internal_has_service_token() const {
  return this != internal_default_instance() && service_token_ != nullptr;
}
inline bool Rule::has_service_token() const {
  return _internal_has_service_token();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::_internal_service_token() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = service_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Rule::service_token() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.service_token)
  return _internal_service_token();
}
inline void Rule::unsafe_arena_set_allocated_service_token(
    ::PROTOBUF_NAMESPACE_ID::StringValue* service_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_token_);
  }
  service_token_ = service_token;
  if (service_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.service_token)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::release_service_token() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_token_;
  service_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::unsafe_arena_release_service_token() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.service_token)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_token_;
  service_token_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::_internal_mutable_service_token() {
  
  if (service_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    service_token_ = p;
  }
  return service_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Rule::mutable_service_token() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_service_token();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.service_token)
  return _msg;
}
inline void Rule::set_allocated_service_token(::PROTOBUF_NAMESPACE_ID::StringValue* service_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_token_);
  }
  if (service_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_token));
    if (message_arena != submessage_arena) {
      service_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_token, submessage_arena);
    }
    
  } else {
    
  }
  service_token_ = service_token;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.service_token)
}

// .accesscontrol.AmountAdjusterAlgorithm adjuster = 17;
inline bool Rule::_internal_has_adjuster() const {
  return this != internal_default_instance() && adjuster_ != nullptr;
}
inline bool Rule::has_adjuster() const {
  return _internal_has_adjuster();
}
inline void Rule::clear_adjuster() {
  if (GetArenaForAllocation() == nullptr && adjuster_ != nullptr) {
    delete adjuster_;
  }
  adjuster_ = nullptr;
}
inline const ::accesscontrol::AmountAdjusterAlgorithm& Rule::_internal_adjuster() const {
  const ::accesscontrol::AmountAdjusterAlgorithm* p = adjuster_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::AmountAdjusterAlgorithm&>(
      ::accesscontrol::_AmountAdjusterAlgorithm_default_instance_);
}
inline const ::accesscontrol::AmountAdjusterAlgorithm& Rule::adjuster() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.adjuster)
  return _internal_adjuster();
}
inline void Rule::unsafe_arena_set_allocated_adjuster(
    ::accesscontrol::AmountAdjusterAlgorithm* adjuster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjuster_);
  }
  adjuster_ = adjuster;
  if (adjuster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.adjuster)
}
inline ::accesscontrol::AmountAdjusterAlgorithm* Rule::release_adjuster() {
  
  ::accesscontrol::AmountAdjusterAlgorithm* temp = adjuster_;
  adjuster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::AmountAdjusterAlgorithm* Rule::unsafe_arena_release_adjuster() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.adjuster)
  
  ::accesscontrol::AmountAdjusterAlgorithm* temp = adjuster_;
  adjuster_ = nullptr;
  return temp;
}
inline ::accesscontrol::AmountAdjusterAlgorithm* Rule::_internal_mutable_adjuster() {
  
  if (adjuster_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::AmountAdjusterAlgorithm>(GetArenaForAllocation());
    adjuster_ = p;
  }
  return adjuster_;
}
inline ::accesscontrol::AmountAdjusterAlgorithm* Rule::mutable_adjuster() {
  ::accesscontrol::AmountAdjusterAlgorithm* _msg = _internal_mutable_adjuster();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.adjuster)
  return _msg;
}
inline void Rule::set_allocated_adjuster(::accesscontrol::AmountAdjusterAlgorithm* adjuster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjuster_;
  }
  if (adjuster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(adjuster);
    if (message_arena != submessage_arena) {
      adjuster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjuster, submessage_arena);
    }
    
  } else {
    
  }
  adjuster_ = adjuster;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.adjuster)
}

// .google.protobuf.BoolValue regex_combine = 18;
inline bool Rule::_internal_has_regex_combine() const {
  return this != internal_default_instance() && regex_combine_ != nullptr;
}
inline bool Rule::has_regex_combine() const {
  return _internal_has_regex_combine();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Rule::_internal_regex_combine() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = regex_combine_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Rule::regex_combine() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.regex_combine)
  return _internal_regex_combine();
}
inline void Rule::unsafe_arena_set_allocated_regex_combine(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* regex_combine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regex_combine_);
  }
  regex_combine_ = regex_combine;
  if (regex_combine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.regex_combine)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::release_regex_combine() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = regex_combine_;
  regex_combine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::unsafe_arena_release_regex_combine() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.regex_combine)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = regex_combine_;
  regex_combine_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::_internal_mutable_regex_combine() {
  
  if (regex_combine_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    regex_combine_ = p;
  }
  return regex_combine_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Rule::mutable_regex_combine() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_regex_combine();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.regex_combine)
  return _msg;
}
inline void Rule::set_allocated_regex_combine(::PROTOBUF_NAMESPACE_ID::BoolValue* regex_combine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(regex_combine_);
  }
  if (regex_combine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regex_combine));
    if (message_arena != submessage_arena) {
      regex_combine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regex_combine, submessage_arena);
    }
    
  } else {
    
  }
  regex_combine_ = regex_combine;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.regex_combine)
}

// .accesscontrol.AmountMode amount_mode = 19;
inline void Rule::clear_amount_mode() {
  amount_mode_ = 0;
}
inline ::accesscontrol::AmountMode Rule::_internal_amount_mode() const {
  return static_cast< ::accesscontrol::AmountMode >(amount_mode_);
}
inline ::accesscontrol::AmountMode Rule::amount_mode() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.amount_mode)
  return _internal_amount_mode();
}
inline void Rule::_internal_set_amount_mode(::accesscontrol::AmountMode value) {
  
  amount_mode_ = value;
}
inline void Rule::set_amount_mode(::accesscontrol::AmountMode value) {
  _internal_set_amount_mode(value);
  // @@protoc_insertion_point(field_set:accesscontrol.Rule.amount_mode)
}

// .accesscontrol.FailoverType failover = 20;
inline void Rule::clear_failover() {
  failover_ = 0;
}
inline ::accesscontrol::FailoverType Rule::_internal_failover() const {
  return static_cast< ::accesscontrol::FailoverType >(failover_);
}
inline ::accesscontrol::FailoverType Rule::failover() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.failover)
  return _internal_failover();
}
inline void Rule::_internal_set_failover(::accesscontrol::FailoverType value) {
  
  failover_ = value;
}
inline void Rule::set_failover(::accesscontrol::FailoverType value) {
  _internal_set_failover(value);
  // @@protoc_insertion_point(field_set:accesscontrol.Rule.failover)
}

// .accesscontrol.RateLimitCluster cluster = 21;
inline bool Rule::_internal_has_cluster() const {
  return this != internal_default_instance() && cluster_ != nullptr;
}
inline bool Rule::has_cluster() const {
  return _internal_has_cluster();
}
inline void Rule::clear_cluster() {
  if (GetArenaForAllocation() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
}
inline const ::accesscontrol::RateLimitCluster& Rule::_internal_cluster() const {
  const ::accesscontrol::RateLimitCluster* p = cluster_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::RateLimitCluster&>(
      ::accesscontrol::_RateLimitCluster_default_instance_);
}
inline const ::accesscontrol::RateLimitCluster& Rule::cluster() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.cluster)
  return _internal_cluster();
}
inline void Rule::unsafe_arena_set_allocated_cluster(
    ::accesscontrol::RateLimitCluster* cluster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster_);
  }
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.cluster)
}
inline ::accesscontrol::RateLimitCluster* Rule::release_cluster() {
  
  ::accesscontrol::RateLimitCluster* temp = cluster_;
  cluster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::RateLimitCluster* Rule::unsafe_arena_release_cluster() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.cluster)
  
  ::accesscontrol::RateLimitCluster* temp = cluster_;
  cluster_ = nullptr;
  return temp;
}
inline ::accesscontrol::RateLimitCluster* Rule::_internal_mutable_cluster() {
  
  if (cluster_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::RateLimitCluster>(GetArenaForAllocation());
    cluster_ = p;
  }
  return cluster_;
}
inline ::accesscontrol::RateLimitCluster* Rule::mutable_cluster() {
  ::accesscontrol::RateLimitCluster* _msg = _internal_mutable_cluster();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.cluster)
  return _msg;
}
inline void Rule::set_allocated_cluster(::accesscontrol::RateLimitCluster* cluster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cluster_;
  }
  if (cluster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cluster);
    if (message_arena != submessage_arena) {
      cluster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.cluster)
}

// .accesscontrol.MatchString method = 22;
inline bool Rule::_internal_has_method() const {
  return this != internal_default_instance() && method_ != nullptr;
}
inline bool Rule::has_method() const {
  return _internal_has_method();
}
inline void Rule::clear_method() {
  if (GetArenaForAllocation() == nullptr && method_ != nullptr) {
    delete method_;
  }
  method_ = nullptr;
}
inline const ::accesscontrol::MatchString& Rule::_internal_method() const {
  const ::accesscontrol::MatchString* p = method_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::MatchString&>(
      ::accesscontrol::_MatchString_default_instance_);
}
inline const ::accesscontrol::MatchString& Rule::method() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Rule.method)
  return _internal_method();
}
inline void Rule::unsafe_arena_set_allocated_method(
    ::accesscontrol::MatchString* method) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(method_);
  }
  method_ = method;
  if (method) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Rule.method)
}
inline ::accesscontrol::MatchString* Rule::release_method() {
  
  ::accesscontrol::MatchString* temp = method_;
  method_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::MatchString* Rule::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_release:accesscontrol.Rule.method)
  
  ::accesscontrol::MatchString* temp = method_;
  method_ = nullptr;
  return temp;
}
inline ::accesscontrol::MatchString* Rule::_internal_mutable_method() {
  
  if (method_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::MatchString>(GetArenaForAllocation());
    method_ = p;
  }
  return method_;
}
inline ::accesscontrol::MatchString* Rule::mutable_method() {
  ::accesscontrol::MatchString* _msg = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Rule.method)
  return _msg;
}
inline void Rule::set_allocated_method(::accesscontrol::MatchString* method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete method_;
  }
  if (method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(method);
    if (message_arena != submessage_arena) {
      method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    
  } else {
    
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Rule.method)
}

// -------------------------------------------------------------------

// MatchString

// .accesscontrol.MatchString.MatchStringType type = 1;
inline void MatchString::clear_type() {
  type_ = 0;
}
inline ::accesscontrol::MatchString_MatchStringType MatchString::_internal_type() const {
  return static_cast< ::accesscontrol::MatchString_MatchStringType >(type_);
}
inline ::accesscontrol::MatchString_MatchStringType MatchString::type() const {
  // @@protoc_insertion_point(field_get:accesscontrol.MatchString.type)
  return _internal_type();
}
inline void MatchString::_internal_set_type(::accesscontrol::MatchString_MatchStringType value) {
  
  type_ = value;
}
inline void MatchString::set_type(::accesscontrol::MatchString_MatchStringType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:accesscontrol.MatchString.type)
}

// .google.protobuf.StringValue value = 2;
inline bool MatchString::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool MatchString::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& MatchString::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& MatchString::value() const {
  // @@protoc_insertion_point(field_get:accesscontrol.MatchString.value)
  return _internal_value();
}
inline void MatchString::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::StringValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.MatchString.value)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* MatchString::release_value() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* MatchString::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:accesscontrol.MatchString.value)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* MatchString::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* MatchString::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:accesscontrol.MatchString.value)
  return _msg;
}
inline void MatchString::set_allocated_value(::PROTOBUF_NAMESPACE_ID::StringValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.MatchString.value)
}

// .accesscontrol.MatchString.ValueType value_type = 3;
inline void MatchString::clear_value_type() {
  value_type_ = 0;
}
inline ::accesscontrol::MatchString_ValueType MatchString::_internal_value_type() const {
  return static_cast< ::accesscontrol::MatchString_ValueType >(value_type_);
}
inline ::accesscontrol::MatchString_ValueType MatchString::value_type() const {
  // @@protoc_insertion_point(field_get:accesscontrol.MatchString.value_type)
  return _internal_value_type();
}
inline void MatchString::_internal_set_value_type(::accesscontrol::MatchString_ValueType value) {
  
  value_type_ = value;
}
inline void MatchString::set_value_type(::accesscontrol::MatchString_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:accesscontrol.MatchString.value_type)
}

// -------------------------------------------------------------------

// Amount

// .google.protobuf.UInt32Value maxAmount = 1;
inline bool Amount::_internal_has_maxamount() const {
  return this != internal_default_instance() && maxamount_ != nullptr;
}
inline bool Amount::has_maxamount() const {
  return _internal_has_maxamount();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::_internal_maxamount() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = maxamount_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::maxamount() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Amount.maxAmount)
  return _internal_maxamount();
}
inline void Amount::unsafe_arena_set_allocated_maxamount(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* maxamount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxamount_);
  }
  maxamount_ = maxamount;
  if (maxamount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Amount.maxAmount)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::release_maxamount() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = maxamount_;
  maxamount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::unsafe_arena_release_maxamount() {
  // @@protoc_insertion_point(field_release:accesscontrol.Amount.maxAmount)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = maxamount_;
  maxamount_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::_internal_mutable_maxamount() {
  
  if (maxamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    maxamount_ = p;
  }
  return maxamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::mutable_maxamount() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_maxamount();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Amount.maxAmount)
  return _msg;
}
inline void Amount::set_allocated_maxamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* maxamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxamount_);
  }
  if (maxamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxamount));
    if (message_arena != submessage_arena) {
      maxamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxamount, submessage_arena);
    }
    
  } else {
    
  }
  maxamount_ = maxamount;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Amount.maxAmount)
}

// .google.protobuf.Duration validDuration = 2;
inline bool Amount::_internal_has_validduration() const {
  return this != internal_default_instance() && validduration_ != nullptr;
}
inline bool Amount::has_validduration() const {
  return _internal_has_validduration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Amount::_internal_validduration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = validduration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Amount::validduration() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Amount.validDuration)
  return _internal_validduration();
}
inline void Amount::unsafe_arena_set_allocated_validduration(
    ::PROTOBUF_NAMESPACE_ID::Duration* validduration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validduration_);
  }
  validduration_ = validduration;
  if (validduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Amount.validDuration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Amount::release_validduration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = validduration_;
  validduration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Amount::unsafe_arena_release_validduration() {
  // @@protoc_insertion_point(field_release:accesscontrol.Amount.validDuration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = validduration_;
  validduration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Amount::_internal_mutable_validduration() {
  
  if (validduration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    validduration_ = p;
  }
  return validduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Amount::mutable_validduration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_validduration();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Amount.validDuration)
  return _msg;
}
inline void Amount::set_allocated_validduration(::PROTOBUF_NAMESPACE_ID::Duration* validduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validduration_);
  }
  if (validduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validduration));
    if (message_arena != submessage_arena) {
      validduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validduration, submessage_arena);
    }
    
  } else {
    
  }
  validduration_ = validduration;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Amount.validDuration)
}

// .google.protobuf.UInt32Value precision = 3;
inline bool Amount::_internal_has_precision() const {
  return this != internal_default_instance() && precision_ != nullptr;
}
inline bool Amount::has_precision() const {
  return _internal_has_precision();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::_internal_precision() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = precision_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::precision() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Amount.precision)
  return _internal_precision();
}
inline void Amount::unsafe_arena_set_allocated_precision(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_);
  }
  precision_ = precision;
  if (precision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Amount.precision)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::release_precision() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = precision_;
  precision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::unsafe_arena_release_precision() {
  // @@protoc_insertion_point(field_release:accesscontrol.Amount.precision)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = precision_;
  precision_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::_internal_mutable_precision() {
  
  if (precision_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    precision_ = p;
  }
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::mutable_precision() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_precision();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Amount.precision)
  return _msg;
}
inline void Amount::set_allocated_precision(::PROTOBUF_NAMESPACE_ID::UInt32Value* precision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_);
  }
  if (precision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision));
    if (message_arena != submessage_arena) {
      precision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision, submessage_arena);
    }
    
  } else {
    
  }
  precision_ = precision;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Amount.precision)
}

// .google.protobuf.UInt32Value startAmount = 4;
inline bool Amount::_internal_has_startamount() const {
  return this != internal_default_instance() && startamount_ != nullptr;
}
inline bool Amount::has_startamount() const {
  return _internal_has_startamount();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::_internal_startamount() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = startamount_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::startamount() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Amount.startAmount)
  return _internal_startamount();
}
inline void Amount::unsafe_arena_set_allocated_startamount(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* startamount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startamount_);
  }
  startamount_ = startamount;
  if (startamount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Amount.startAmount)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::release_startamount() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = startamount_;
  startamount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::unsafe_arena_release_startamount() {
  // @@protoc_insertion_point(field_release:accesscontrol.Amount.startAmount)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = startamount_;
  startamount_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::_internal_mutable_startamount() {
  
  if (startamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    startamount_ = p;
  }
  return startamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::mutable_startamount() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_startamount();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Amount.startAmount)
  return _msg;
}
inline void Amount::set_allocated_startamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* startamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startamount_);
  }
  if (startamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startamount));
    if (message_arena != submessage_arena) {
      startamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startamount, submessage_arena);
    }
    
  } else {
    
  }
  startamount_ = startamount;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Amount.startAmount)
}

// .google.protobuf.UInt32Value minAmount = 5;
inline bool Amount::_internal_has_minamount() const {
  return this != internal_default_instance() && minamount_ != nullptr;
}
inline bool Amount::has_minamount() const {
  return _internal_has_minamount();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::_internal_minamount() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = minamount_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Amount::minamount() const {
  // @@protoc_insertion_point(field_get:accesscontrol.Amount.minAmount)
  return _internal_minamount();
}
inline void Amount::unsafe_arena_set_allocated_minamount(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* minamount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minamount_);
  }
  minamount_ = minamount;
  if (minamount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.Amount.minAmount)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::release_minamount() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = minamount_;
  minamount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::unsafe_arena_release_minamount() {
  // @@protoc_insertion_point(field_release:accesscontrol.Amount.minAmount)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = minamount_;
  minamount_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::_internal_mutable_minamount() {
  
  if (minamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    minamount_ = p;
  }
  return minamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Amount::mutable_minamount() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_minamount();
  // @@protoc_insertion_point(field_mutable:accesscontrol.Amount.minAmount)
  return _msg;
}
inline void Amount::set_allocated_minamount(::PROTOBUF_NAMESPACE_ID::UInt32Value* minamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minamount_);
  }
  if (minamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minamount));
    if (message_arena != submessage_arena) {
      minamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minamount, submessage_arena);
    }
    
  } else {
    
  }
  minamount_ = minamount;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.Amount.minAmount)
}

// -------------------------------------------------------------------

// ReportPolicy

// .google.protobuf.Duration interval = 1;
inline bool ReportPolicy::_internal_has_interval() const {
  return this != internal_default_instance() && interval_ != nullptr;
}
inline bool ReportPolicy::has_interval() const {
  return _internal_has_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ReportPolicy::_internal_interval() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ReportPolicy::interval() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ReportPolicy.interval)
  return _internal_interval();
}
inline void ReportPolicy::unsafe_arena_set_allocated_interval(
    ::PROTOBUF_NAMESPACE_ID::Duration* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ReportPolicy.interval)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReportPolicy::release_interval() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = interval_;
  interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReportPolicy::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:accesscontrol.ReportPolicy.interval)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = interval_;
  interval_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReportPolicy::_internal_mutable_interval() {
  
  if (interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    interval_ = p;
  }
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ReportPolicy::mutable_interval() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ReportPolicy.interval)
  return _msg;
}
inline void ReportPolicy::set_allocated_interval(::PROTOBUF_NAMESPACE_ID::Duration* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ReportPolicy.interval)
}

// .google.protobuf.UInt32Value amountPercent = 2;
inline bool ReportPolicy::_internal_has_amountpercent() const {
  return this != internal_default_instance() && amountpercent_ != nullptr;
}
inline bool ReportPolicy::has_amountpercent() const {
  return _internal_has_amountpercent();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ReportPolicy::_internal_amountpercent() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = amountpercent_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ReportPolicy::amountpercent() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ReportPolicy.amountPercent)
  return _internal_amountpercent();
}
inline void ReportPolicy::unsafe_arena_set_allocated_amountpercent(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* amountpercent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amountpercent_);
  }
  amountpercent_ = amountpercent;
  if (amountpercent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ReportPolicy.amountPercent)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReportPolicy::release_amountpercent() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = amountpercent_;
  amountpercent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReportPolicy::unsafe_arena_release_amountpercent() {
  // @@protoc_insertion_point(field_release:accesscontrol.ReportPolicy.amountPercent)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = amountpercent_;
  amountpercent_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReportPolicy::_internal_mutable_amountpercent() {
  
  if (amountpercent_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    amountpercent_ = p;
  }
  return amountpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReportPolicy::mutable_amountpercent() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_amountpercent();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ReportPolicy.amountPercent)
  return _msg;
}
inline void ReportPolicy::set_allocated_amountpercent(::PROTOBUF_NAMESPACE_ID::UInt32Value* amountpercent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amountpercent_);
  }
  if (amountpercent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amountpercent));
    if (message_arena != submessage_arena) {
      amountpercent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amountpercent, submessage_arena);
    }
    
  } else {
    
  }
  amountpercent_ = amountpercent;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ReportPolicy.amountPercent)
}

// -------------------------------------------------------------------

// AmountAdjusterAlgorithm

// .accesscontrol.ClimbConfig climb = 1;
inline bool AmountAdjusterAlgorithm::_internal_has_climb() const {
  return this != internal_default_instance() && climb_ != nullptr;
}
inline bool AmountAdjusterAlgorithm::has_climb() const {
  return _internal_has_climb();
}
inline void AmountAdjusterAlgorithm::clear_climb() {
  if (GetArenaForAllocation() == nullptr && climb_ != nullptr) {
    delete climb_;
  }
  climb_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig& AmountAdjusterAlgorithm::_internal_climb() const {
  const ::accesscontrol::ClimbConfig* p = climb_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig&>(
      ::accesscontrol::_ClimbConfig_default_instance_);
}
inline const ::accesscontrol::ClimbConfig& AmountAdjusterAlgorithm::climb() const {
  // @@protoc_insertion_point(field_get:accesscontrol.AmountAdjusterAlgorithm.climb)
  return _internal_climb();
}
inline void AmountAdjusterAlgorithm::unsafe_arena_set_allocated_climb(
    ::accesscontrol::ClimbConfig* climb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(climb_);
  }
  climb_ = climb;
  if (climb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.AmountAdjusterAlgorithm.climb)
}
inline ::accesscontrol::ClimbConfig* AmountAdjusterAlgorithm::release_climb() {
  
  ::accesscontrol::ClimbConfig* temp = climb_;
  climb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig* AmountAdjusterAlgorithm::unsafe_arena_release_climb() {
  // @@protoc_insertion_point(field_release:accesscontrol.AmountAdjusterAlgorithm.climb)
  
  ::accesscontrol::ClimbConfig* temp = climb_;
  climb_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig* AmountAdjusterAlgorithm::_internal_mutable_climb() {
  
  if (climb_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig>(GetArenaForAllocation());
    climb_ = p;
  }
  return climb_;
}
inline ::accesscontrol::ClimbConfig* AmountAdjusterAlgorithm::mutable_climb() {
  ::accesscontrol::ClimbConfig* _msg = _internal_mutable_climb();
  // @@protoc_insertion_point(field_mutable:accesscontrol.AmountAdjusterAlgorithm.climb)
  return _msg;
}
inline void AmountAdjusterAlgorithm::set_allocated_climb(::accesscontrol::ClimbConfig* climb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete climb_;
  }
  if (climb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(climb);
    if (message_arena != submessage_arena) {
      climb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, climb, submessage_arena);
    }
    
  } else {
    
  }
  climb_ = climb;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.AmountAdjusterAlgorithm.climb)
}

// -------------------------------------------------------------------

// ClimbConfig_MetricConfig

// .google.protobuf.Duration window = 1;
inline bool ClimbConfig_MetricConfig::_internal_has_window() const {
  return this != internal_default_instance() && window_ != nullptr;
}
inline bool ClimbConfig_MetricConfig::has_window() const {
  return _internal_has_window();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_MetricConfig::_internal_window() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = window_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_MetricConfig::window() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.MetricConfig.window)
  return _internal_window();
}
inline void ClimbConfig_MetricConfig::unsafe_arena_set_allocated_window(
    ::PROTOBUF_NAMESPACE_ID::Duration* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.MetricConfig.window)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::release_window() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = window_;
  window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.MetricConfig.window)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::_internal_mutable_window() {
  
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    window_ = p;
  }
  return window_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::mutable_window() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.MetricConfig.window)
  return _msg;
}
inline void ClimbConfig_MetricConfig::set_allocated_window(::PROTOBUF_NAMESPACE_ID::Duration* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_);
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window));
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.MetricConfig.window)
}

// .google.protobuf.UInt32Value precision = 2;
inline bool ClimbConfig_MetricConfig::_internal_has_precision() const {
  return this != internal_default_instance() && precision_ != nullptr;
}
inline bool ClimbConfig_MetricConfig::has_precision() const {
  return _internal_has_precision();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ClimbConfig_MetricConfig::_internal_precision() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = precision_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ClimbConfig_MetricConfig::precision() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.MetricConfig.precision)
  return _internal_precision();
}
inline void ClimbConfig_MetricConfig::unsafe_arena_set_allocated_precision(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* precision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_);
  }
  precision_ = precision;
  if (precision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.MetricConfig.precision)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_MetricConfig::release_precision() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = precision_;
  precision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_MetricConfig::unsafe_arena_release_precision() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.MetricConfig.precision)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = precision_;
  precision_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_MetricConfig::_internal_mutable_precision() {
  
  if (precision_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    precision_ = p;
  }
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_MetricConfig::mutable_precision() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_precision();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.MetricConfig.precision)
  return _msg;
}
inline void ClimbConfig_MetricConfig::set_allocated_precision(::PROTOBUF_NAMESPACE_ID::UInt32Value* precision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision_);
  }
  if (precision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precision));
    if (message_arena != submessage_arena) {
      precision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision, submessage_arena);
    }
    
  } else {
    
  }
  precision_ = precision;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.MetricConfig.precision)
}

// .google.protobuf.Duration reportInterval = 3;
inline bool ClimbConfig_MetricConfig::_internal_has_reportinterval() const {
  return this != internal_default_instance() && reportinterval_ != nullptr;
}
inline bool ClimbConfig_MetricConfig::has_reportinterval() const {
  return _internal_has_reportinterval();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_MetricConfig::_internal_reportinterval() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = reportinterval_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_MetricConfig::reportinterval() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.MetricConfig.reportInterval)
  return _internal_reportinterval();
}
inline void ClimbConfig_MetricConfig::unsafe_arena_set_allocated_reportinterval(
    ::PROTOBUF_NAMESPACE_ID::Duration* reportinterval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportinterval_);
  }
  reportinterval_ = reportinterval;
  if (reportinterval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.MetricConfig.reportInterval)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::release_reportinterval() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = reportinterval_;
  reportinterval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::unsafe_arena_release_reportinterval() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.MetricConfig.reportInterval)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = reportinterval_;
  reportinterval_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::_internal_mutable_reportinterval() {
  
  if (reportinterval_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    reportinterval_ = p;
  }
  return reportinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_MetricConfig::mutable_reportinterval() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_reportinterval();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.MetricConfig.reportInterval)
  return _msg;
}
inline void ClimbConfig_MetricConfig::set_allocated_reportinterval(::PROTOBUF_NAMESPACE_ID::Duration* reportinterval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportinterval_);
  }
  if (reportinterval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportinterval));
    if (message_arena != submessage_arena) {
      reportinterval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportinterval, submessage_arena);
    }
    
  } else {
    
  }
  reportinterval_ = reportinterval;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.MetricConfig.reportInterval)
}

// -------------------------------------------------------------------

// ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig

// .google.protobuf.StringValue type = 1;
inline bool ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::has_type() const {
  return _internal_has_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_type() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::type() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type)
  return _internal_type();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::unsafe_arena_set_allocated_type(
    ::PROTOBUF_NAMESPACE_ID::StringValue* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::release_type() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = type_;
  type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    type_ = p;
  }
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::mutable_type() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::set_allocated_type(::PROTOBUF_NAMESPACE_ID::StringValue* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type)
}

// repeated .google.protobuf.Int64Value errorCodes = 2;
inline int ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_errorcodes_size() const {
  return errorcodes_.size();
}
inline int ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::errorcodes_size() const {
  return _internal_errorcodes_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::mutable_errorcodes(int index) {
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes)
  return errorcodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Int64Value >*
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::mutable_errorcodes() {
  // @@protoc_insertion_point(field_mutable_list:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes)
  return &errorcodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_errorcodes(int index) const {
  return errorcodes_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::errorcodes(int index) const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes)
  return _internal_errorcodes(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_add_errorcodes() {
  return errorcodes_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::add_errorcodes() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _add = _internal_add_errorcodes();
  // @@protoc_insertion_point(field_add:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Int64Value >&
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::errorcodes() const {
  // @@protoc_insertion_point(field_list:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes)
  return errorcodes_;
}

// .google.protobuf.Int32Value errorRate = 3;
inline bool ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_has_errorrate() const {
  return this != internal_default_instance() && errorrate_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::has_errorrate() const {
  return _internal_has_errorrate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_errorrate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = errorrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::errorrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate)
  return _internal_errorrate();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::unsafe_arena_set_allocated_errorrate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate_);
  }
  errorrate_ = errorrate;
  if (errorrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::release_errorrate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = errorrate_;
  errorrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::unsafe_arena_release_errorrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = errorrate_;
  errorrate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_internal_mutable_errorrate() {
  
  if (errorrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    errorrate_ = p;
  }
  return errorrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::mutable_errorrate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_errorrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::set_allocated_errorrate(::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate_);
  }
  if (errorrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate));
    if (message_arena != submessage_arena) {
      errorrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorrate, submessage_arena);
    }
    
  } else {
    
  }
  errorrate_ = errorrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate)
}

// -------------------------------------------------------------------

// ClimbConfig_TriggerPolicy_ErrorRate

// .google.protobuf.BoolValue enable = 1;
inline bool ClimbConfig_TriggerPolicy_ErrorRate::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_ErrorRate::has_enable() const {
  return _internal_has_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig_TriggerPolicy_ErrorRate::_internal_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig_TriggerPolicy_ErrorRate::enable() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable)
  return _internal_enable();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_set_allocated_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_ErrorRate::release_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_ErrorRate::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_ErrorRate::mutable_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable));
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable)
}

// .google.protobuf.UInt32Value requestVolumeThreshold = 2;
inline bool ClimbConfig_TriggerPolicy_ErrorRate::_internal_has_requestvolumethreshold() const {
  return this != internal_default_instance() && requestvolumethreshold_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_ErrorRate::has_requestvolumethreshold() const {
  return _internal_has_requestvolumethreshold();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ClimbConfig_TriggerPolicy_ErrorRate::_internal_requestvolumethreshold() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = requestvolumethreshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ClimbConfig_TriggerPolicy_ErrorRate::requestvolumethreshold() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold)
  return _internal_requestvolumethreshold();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_set_allocated_requestvolumethreshold(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* requestvolumethreshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestvolumethreshold_);
  }
  requestvolumethreshold_ = requestvolumethreshold;
  if (requestvolumethreshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_TriggerPolicy_ErrorRate::release_requestvolumethreshold() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = requestvolumethreshold_;
  requestvolumethreshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_release_requestvolumethreshold() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = requestvolumethreshold_;
  requestvolumethreshold_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_TriggerPolicy_ErrorRate::_internal_mutable_requestvolumethreshold() {
  
  if (requestvolumethreshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    requestvolumethreshold_ = p;
  }
  return requestvolumethreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ClimbConfig_TriggerPolicy_ErrorRate::mutable_requestvolumethreshold() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_requestvolumethreshold();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::set_allocated_requestvolumethreshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* requestvolumethreshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestvolumethreshold_);
  }
  if (requestvolumethreshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestvolumethreshold));
    if (message_arena != submessage_arena) {
      requestvolumethreshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestvolumethreshold, submessage_arena);
    }
    
  } else {
    
  }
  requestvolumethreshold_ = requestvolumethreshold;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold)
}

// .google.protobuf.Int32Value errorRate = 3;
inline bool ClimbConfig_TriggerPolicy_ErrorRate::_internal_has_errorrate() const {
  return this != internal_default_instance() && errorrate_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_ErrorRate::has_errorrate() const {
  return _internal_has_errorrate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_ErrorRate::_internal_errorrate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = errorrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_ErrorRate::errorrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate)
  return _internal_errorrate();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_set_allocated_errorrate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate_);
  }
  errorrate_ = errorrate;
  if (errorrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate::release_errorrate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = errorrate_;
  errorrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate::unsafe_arena_release_errorrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = errorrate_;
  errorrate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate::_internal_mutable_errorrate() {
  
  if (errorrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    errorrate_ = p;
  }
  return errorrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_ErrorRate::mutable_errorrate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_errorrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::set_allocated_errorrate(::PROTOBUF_NAMESPACE_ID::Int32Value* errorrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate_);
  }
  if (errorrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate));
    if (message_arena != submessage_arena) {
      errorrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorrate, submessage_arena);
    }
    
  } else {
    
  }
  errorrate_ = errorrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate)
}

// repeated .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig specials = 4;
inline int ClimbConfig_TriggerPolicy_ErrorRate::_internal_specials_size() const {
  return specials_.size();
}
inline int ClimbConfig_TriggerPolicy_ErrorRate::specials_size() const {
  return _internal_specials_size();
}
inline void ClimbConfig_TriggerPolicy_ErrorRate::clear_specials() {
  specials_.Clear();
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* ClimbConfig_TriggerPolicy_ErrorRate::mutable_specials(int index) {
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials)
  return specials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >*
ClimbConfig_TriggerPolicy_ErrorRate::mutable_specials() {
  // @@protoc_insertion_point(field_mutable_list:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials)
  return &specials_;
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& ClimbConfig_TriggerPolicy_ErrorRate::_internal_specials(int index) const {
  return specials_.Get(index);
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& ClimbConfig_TriggerPolicy_ErrorRate::specials(int index) const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials)
  return _internal_specials(index);
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* ClimbConfig_TriggerPolicy_ErrorRate::_internal_add_specials() {
  return specials_.Add();
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* ClimbConfig_TriggerPolicy_ErrorRate::add_specials() {
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* _add = _internal_add_specials();
  // @@protoc_insertion_point(field_add:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >&
ClimbConfig_TriggerPolicy_ErrorRate::specials() const {
  // @@protoc_insertion_point(field_list:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials)
  return specials_;
}

// -------------------------------------------------------------------

// ClimbConfig_TriggerPolicy_SlowRate

// .google.protobuf.BoolValue enable = 1;
inline bool ClimbConfig_TriggerPolicy_SlowRate::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_SlowRate::has_enable() const {
  return _internal_has_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig_TriggerPolicy_SlowRate::_internal_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig_TriggerPolicy_SlowRate::enable() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable)
  return _internal_enable();
}
inline void ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_set_allocated_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_SlowRate::release_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_SlowRate::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig_TriggerPolicy_SlowRate::mutable_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_SlowRate::set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable));
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable)
}

// .google.protobuf.Duration maxRt = 2;
inline bool ClimbConfig_TriggerPolicy_SlowRate::_internal_has_maxrt() const {
  return this != internal_default_instance() && maxrt_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_SlowRate::has_maxrt() const {
  return _internal_has_maxrt();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_TriggerPolicy_SlowRate::_internal_maxrt() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = maxrt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_TriggerPolicy_SlowRate::maxrt() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt)
  return _internal_maxrt();
}
inline void ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_set_allocated_maxrt(
    ::PROTOBUF_NAMESPACE_ID::Duration* maxrt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxrt_);
  }
  maxrt_ = maxrt;
  if (maxrt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_TriggerPolicy_SlowRate::release_maxrt() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = maxrt_;
  maxrt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_release_maxrt() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = maxrt_;
  maxrt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_TriggerPolicy_SlowRate::_internal_mutable_maxrt() {
  
  if (maxrt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    maxrt_ = p;
  }
  return maxrt_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_TriggerPolicy_SlowRate::mutable_maxrt() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_maxrt();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_SlowRate::set_allocated_maxrt(::PROTOBUF_NAMESPACE_ID::Duration* maxrt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxrt_);
  }
  if (maxrt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxrt));
    if (message_arena != submessage_arena) {
      maxrt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxrt, submessage_arena);
    }
    
  } else {
    
  }
  maxrt_ = maxrt;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt)
}

// .google.protobuf.Int32Value slowRate = 3;
inline bool ClimbConfig_TriggerPolicy_SlowRate::_internal_has_slowrate() const {
  return this != internal_default_instance() && slowrate_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy_SlowRate::has_slowrate() const {
  return _internal_has_slowrate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_SlowRate::_internal_slowrate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = slowrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_TriggerPolicy_SlowRate::slowrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate)
  return _internal_slowrate();
}
inline void ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_set_allocated_slowrate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* slowrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowrate_);
  }
  slowrate_ = slowrate;
  if (slowrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_SlowRate::release_slowrate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = slowrate_;
  slowrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_SlowRate::unsafe_arena_release_slowrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = slowrate_;
  slowrate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_SlowRate::_internal_mutable_slowrate() {
  
  if (slowrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    slowrate_ = p;
  }
  return slowrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_TriggerPolicy_SlowRate::mutable_slowrate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_slowrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy_SlowRate::set_allocated_slowrate(::PROTOBUF_NAMESPACE_ID::Int32Value* slowrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowrate_);
  }
  if (slowrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowrate));
    if (message_arena != submessage_arena) {
      slowrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slowrate, submessage_arena);
    }
    
  } else {
    
  }
  slowrate_ = slowrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate)
}

// -------------------------------------------------------------------

// ClimbConfig_TriggerPolicy

// .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate errorRate = 1;
inline bool ClimbConfig_TriggerPolicy::_internal_has_errorrate() const {
  return this != internal_default_instance() && errorrate_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy::has_errorrate() const {
  return _internal_has_errorrate();
}
inline void ClimbConfig_TriggerPolicy::clear_errorrate() {
  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate& ClimbConfig_TriggerPolicy::_internal_errorrate() const {
  const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* p = errorrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate&>(
      ::accesscontrol::_ClimbConfig_TriggerPolicy_ErrorRate_default_instance_);
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate& ClimbConfig_TriggerPolicy::errorrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.errorRate)
  return _internal_errorrate();
}
inline void ClimbConfig_TriggerPolicy::unsafe_arena_set_allocated_errorrate(
    ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* errorrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errorrate_);
  }
  errorrate_ = errorrate;
  if (errorrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.errorRate)
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* ClimbConfig_TriggerPolicy::release_errorrate() {
  
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* temp = errorrate_;
  errorrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* ClimbConfig_TriggerPolicy::unsafe_arena_release_errorrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.errorRate)
  
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* temp = errorrate_;
  errorrate_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* ClimbConfig_TriggerPolicy::_internal_mutable_errorrate() {
  
  if (errorrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate>(GetArenaForAllocation());
    errorrate_ = p;
  }
  return errorrate_;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* ClimbConfig_TriggerPolicy::mutable_errorrate() {
  ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* _msg = _internal_mutable_errorrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.errorRate)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy::set_allocated_errorrate(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate* errorrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete errorrate_;
  }
  if (errorrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(errorrate);
    if (message_arena != submessage_arena) {
      errorrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorrate, submessage_arena);
    }
    
  } else {
    
  }
  errorrate_ = errorrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.errorRate)
}

// .accesscontrol.ClimbConfig.TriggerPolicy.SlowRate slowRate = 2;
inline bool ClimbConfig_TriggerPolicy::_internal_has_slowrate() const {
  return this != internal_default_instance() && slowrate_ != nullptr;
}
inline bool ClimbConfig_TriggerPolicy::has_slowrate() const {
  return _internal_has_slowrate();
}
inline void ClimbConfig_TriggerPolicy::clear_slowrate() {
  if (GetArenaForAllocation() == nullptr && slowrate_ != nullptr) {
    delete slowrate_;
  }
  slowrate_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate& ClimbConfig_TriggerPolicy::_internal_slowrate() const {
  const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* p = slowrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate&>(
      ::accesscontrol::_ClimbConfig_TriggerPolicy_SlowRate_default_instance_);
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate& ClimbConfig_TriggerPolicy::slowrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.TriggerPolicy.slowRate)
  return _internal_slowrate();
}
inline void ClimbConfig_TriggerPolicy::unsafe_arena_set_allocated_slowrate(
    ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* slowrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowrate_);
  }
  slowrate_ = slowrate;
  if (slowrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.slowRate)
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* ClimbConfig_TriggerPolicy::release_slowrate() {
  
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* temp = slowrate_;
  slowrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* ClimbConfig_TriggerPolicy::unsafe_arena_release_slowrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.TriggerPolicy.slowRate)
  
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* temp = slowrate_;
  slowrate_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* ClimbConfig_TriggerPolicy::_internal_mutable_slowrate() {
  
  if (slowrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate>(GetArenaForAllocation());
    slowrate_ = p;
  }
  return slowrate_;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* ClimbConfig_TriggerPolicy::mutable_slowrate() {
  ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* _msg = _internal_mutable_slowrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.TriggerPolicy.slowRate)
  return _msg;
}
inline void ClimbConfig_TriggerPolicy::set_allocated_slowrate(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate* slowrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete slowrate_;
  }
  if (slowrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slowrate);
    if (message_arena != submessage_arena) {
      slowrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slowrate, submessage_arena);
    }
    
  } else {
    
  }
  slowrate_ = slowrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.TriggerPolicy.slowRate)
}

// -------------------------------------------------------------------

// ClimbConfig_ClimbThrottling

// .google.protobuf.Int32Value coldBelowTuneDownRate = 1;
inline bool ClimbConfig_ClimbThrottling::_internal_has_coldbelowtunedownrate() const {
  return this != internal_default_instance() && coldbelowtunedownrate_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_coldbelowtunedownrate() const {
  return _internal_has_coldbelowtunedownrate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_coldbelowtunedownrate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = coldbelowtunedownrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::coldbelowtunedownrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate)
  return _internal_coldbelowtunedownrate();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_coldbelowtunedownrate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtunedownrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtunedownrate_);
  }
  coldbelowtunedownrate_ = coldbelowtunedownrate;
  if (coldbelowtunedownrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_coldbelowtunedownrate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldbelowtunedownrate_;
  coldbelowtunedownrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_coldbelowtunedownrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldbelowtunedownrate_;
  coldbelowtunedownrate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_coldbelowtunedownrate() {
  
  if (coldbelowtunedownrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    coldbelowtunedownrate_ = p;
  }
  return coldbelowtunedownrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_coldbelowtunedownrate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_coldbelowtunedownrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_coldbelowtunedownrate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtunedownrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtunedownrate_);
  }
  if (coldbelowtunedownrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtunedownrate));
    if (message_arena != submessage_arena) {
      coldbelowtunedownrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coldbelowtunedownrate, submessage_arena);
    }
    
  } else {
    
  }
  coldbelowtunedownrate_ = coldbelowtunedownrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate)
}

// .google.protobuf.Int32Value coldBelowTuneUpRate = 2;
inline bool ClimbConfig_ClimbThrottling::_internal_has_coldbelowtuneuprate() const {
  return this != internal_default_instance() && coldbelowtuneuprate_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_coldbelowtuneuprate() const {
  return _internal_has_coldbelowtuneuprate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_coldbelowtuneuprate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = coldbelowtuneuprate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::coldbelowtuneuprate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate)
  return _internal_coldbelowtuneuprate();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_coldbelowtuneuprate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtuneuprate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtuneuprate_);
  }
  coldbelowtuneuprate_ = coldbelowtuneuprate;
  if (coldbelowtuneuprate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_coldbelowtuneuprate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldbelowtuneuprate_;
  coldbelowtuneuprate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_coldbelowtuneuprate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldbelowtuneuprate_;
  coldbelowtuneuprate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_coldbelowtuneuprate() {
  
  if (coldbelowtuneuprate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    coldbelowtuneuprate_ = p;
  }
  return coldbelowtuneuprate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_coldbelowtuneuprate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_coldbelowtuneuprate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_coldbelowtuneuprate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldbelowtuneuprate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtuneuprate_);
  }
  if (coldbelowtuneuprate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldbelowtuneuprate));
    if (message_arena != submessage_arena) {
      coldbelowtuneuprate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coldbelowtuneuprate, submessage_arena);
    }
    
  } else {
    
  }
  coldbelowtuneuprate_ = coldbelowtuneuprate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate)
}

// .google.protobuf.Int32Value coldAboveTuneDownRate = 3;
inline bool ClimbConfig_ClimbThrottling::_internal_has_coldabovetunedownrate() const {
  return this != internal_default_instance() && coldabovetunedownrate_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_coldabovetunedownrate() const {
  return _internal_has_coldabovetunedownrate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_coldabovetunedownrate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = coldabovetunedownrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::coldabovetunedownrate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate)
  return _internal_coldabovetunedownrate();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_coldabovetunedownrate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetunedownrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetunedownrate_);
  }
  coldabovetunedownrate_ = coldabovetunedownrate;
  if (coldabovetunedownrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_coldabovetunedownrate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldabovetunedownrate_;
  coldabovetunedownrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_coldabovetunedownrate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldabovetunedownrate_;
  coldabovetunedownrate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_coldabovetunedownrate() {
  
  if (coldabovetunedownrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    coldabovetunedownrate_ = p;
  }
  return coldabovetunedownrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_coldabovetunedownrate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_coldabovetunedownrate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_coldabovetunedownrate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetunedownrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetunedownrate_);
  }
  if (coldabovetunedownrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetunedownrate));
    if (message_arena != submessage_arena) {
      coldabovetunedownrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coldabovetunedownrate, submessage_arena);
    }
    
  } else {
    
  }
  coldabovetunedownrate_ = coldabovetunedownrate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate)
}

// .google.protobuf.Int32Value coldAboveTuneUpRate = 4;
inline bool ClimbConfig_ClimbThrottling::_internal_has_coldabovetuneuprate() const {
  return this != internal_default_instance() && coldabovetuneuprate_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_coldabovetuneuprate() const {
  return _internal_has_coldabovetuneuprate();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_coldabovetuneuprate() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = coldabovetuneuprate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::coldabovetuneuprate() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate)
  return _internal_coldabovetuneuprate();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_coldabovetuneuprate(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetuneuprate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetuneuprate_);
  }
  coldabovetuneuprate_ = coldabovetuneuprate;
  if (coldabovetuneuprate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_coldabovetuneuprate() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldabovetuneuprate_;
  coldabovetuneuprate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_coldabovetuneuprate() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = coldabovetuneuprate_;
  coldabovetuneuprate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_coldabovetuneuprate() {
  
  if (coldabovetuneuprate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    coldabovetuneuprate_ = p;
  }
  return coldabovetuneuprate_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_coldabovetuneuprate() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_coldabovetuneuprate();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_coldabovetuneuprate(::PROTOBUF_NAMESPACE_ID::Int32Value* coldabovetuneuprate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetuneuprate_);
  }
  if (coldabovetuneuprate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coldabovetuneuprate));
    if (message_arena != submessage_arena) {
      coldabovetuneuprate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coldabovetuneuprate, submessage_arena);
    }
    
  } else {
    
  }
  coldabovetuneuprate_ = coldabovetuneuprate;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate)
}

// .google.protobuf.Int32Value limitThresholdToTuneUp = 5;
inline bool ClimbConfig_ClimbThrottling::_internal_has_limitthresholdtotuneup() const {
  return this != internal_default_instance() && limitthresholdtotuneup_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_limitthresholdtotuneup() const {
  return _internal_has_limitthresholdtotuneup();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_limitthresholdtotuneup() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = limitthresholdtotuneup_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::limitthresholdtotuneup() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp)
  return _internal_limitthresholdtotuneup();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_limitthresholdtotuneup(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* limitthresholdtotuneup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitthresholdtotuneup_);
  }
  limitthresholdtotuneup_ = limitthresholdtotuneup;
  if (limitthresholdtotuneup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_limitthresholdtotuneup() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = limitthresholdtotuneup_;
  limitthresholdtotuneup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_limitthresholdtotuneup() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = limitthresholdtotuneup_;
  limitthresholdtotuneup_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_limitthresholdtotuneup() {
  
  if (limitthresholdtotuneup_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    limitthresholdtotuneup_ = p;
  }
  return limitthresholdtotuneup_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_limitthresholdtotuneup() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_limitthresholdtotuneup();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_limitthresholdtotuneup(::PROTOBUF_NAMESPACE_ID::Int32Value* limitthresholdtotuneup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitthresholdtotuneup_);
  }
  if (limitthresholdtotuneup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitthresholdtotuneup));
    if (message_arena != submessage_arena) {
      limitthresholdtotuneup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limitthresholdtotuneup, submessage_arena);
    }
    
  } else {
    
  }
  limitthresholdtotuneup_ = limitthresholdtotuneup;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp)
}

// .google.protobuf.Duration judgeDuration = 6;
inline bool ClimbConfig_ClimbThrottling::_internal_has_judgeduration() const {
  return this != internal_default_instance() && judgeduration_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_judgeduration() const {
  return _internal_has_judgeduration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_ClimbThrottling::_internal_judgeduration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = judgeduration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClimbConfig_ClimbThrottling::judgeduration() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration)
  return _internal_judgeduration();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_judgeduration(
    ::PROTOBUF_NAMESPACE_ID::Duration* judgeduration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(judgeduration_);
  }
  judgeduration_ = judgeduration;
  if (judgeduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_ClimbThrottling::release_judgeduration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = judgeduration_;
  judgeduration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_ClimbThrottling::unsafe_arena_release_judgeduration() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = judgeduration_;
  judgeduration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_ClimbThrottling::_internal_mutable_judgeduration() {
  
  if (judgeduration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    judgeduration_ = p;
  }
  return judgeduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClimbConfig_ClimbThrottling::mutable_judgeduration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_judgeduration();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_judgeduration(::PROTOBUF_NAMESPACE_ID::Duration* judgeduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(judgeduration_);
  }
  if (judgeduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(judgeduration));
    if (message_arena != submessage_arena) {
      judgeduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, judgeduration, submessage_arena);
    }
    
  } else {
    
  }
  judgeduration_ = judgeduration;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration)
}

// .google.protobuf.Int32Value tuneUpPeriod = 7;
inline bool ClimbConfig_ClimbThrottling::_internal_has_tuneupperiod() const {
  return this != internal_default_instance() && tuneupperiod_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_tuneupperiod() const {
  return _internal_has_tuneupperiod();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_tuneupperiod() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = tuneupperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::tuneupperiod() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod)
  return _internal_tuneupperiod();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_tuneupperiod(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* tuneupperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuneupperiod_);
  }
  tuneupperiod_ = tuneupperiod;
  if (tuneupperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_tuneupperiod() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = tuneupperiod_;
  tuneupperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_tuneupperiod() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = tuneupperiod_;
  tuneupperiod_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_tuneupperiod() {
  
  if (tuneupperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    tuneupperiod_ = p;
  }
  return tuneupperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_tuneupperiod() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_tuneupperiod();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_tuneupperiod(::PROTOBUF_NAMESPACE_ID::Int32Value* tuneupperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuneupperiod_);
  }
  if (tuneupperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuneupperiod));
    if (message_arena != submessage_arena) {
      tuneupperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuneupperiod, submessage_arena);
    }
    
  } else {
    
  }
  tuneupperiod_ = tuneupperiod;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod)
}

// .google.protobuf.Int32Value tuneDownPeriod = 8;
inline bool ClimbConfig_ClimbThrottling::_internal_has_tunedownperiod() const {
  return this != internal_default_instance() && tunedownperiod_ != nullptr;
}
inline bool ClimbConfig_ClimbThrottling::has_tunedownperiod() const {
  return _internal_has_tunedownperiod();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::_internal_tunedownperiod() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = tunedownperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ClimbConfig_ClimbThrottling::tunedownperiod() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod)
  return _internal_tunedownperiod();
}
inline void ClimbConfig_ClimbThrottling::unsafe_arena_set_allocated_tunedownperiod(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* tunedownperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunedownperiod_);
  }
  tunedownperiod_ = tunedownperiod;
  if (tunedownperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::release_tunedownperiod() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = tunedownperiod_;
  tunedownperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::unsafe_arena_release_tunedownperiod() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = tunedownperiod_;
  tunedownperiod_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::_internal_mutable_tunedownperiod() {
  
  if (tunedownperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    tunedownperiod_ = p;
  }
  return tunedownperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ClimbConfig_ClimbThrottling::mutable_tunedownperiod() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_tunedownperiod();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod)
  return _msg;
}
inline void ClimbConfig_ClimbThrottling::set_allocated_tunedownperiod(::PROTOBUF_NAMESPACE_ID::Int32Value* tunedownperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunedownperiod_);
  }
  if (tunedownperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunedownperiod));
    if (message_arena != submessage_arena) {
      tunedownperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunedownperiod, submessage_arena);
    }
    
  } else {
    
  }
  tunedownperiod_ = tunedownperiod;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod)
}

// -------------------------------------------------------------------

// ClimbConfig

// .google.protobuf.BoolValue enable = 1;
inline bool ClimbConfig::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool ClimbConfig::has_enable() const {
  return _internal_has_enable();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig::_internal_enable() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ClimbConfig::enable() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.enable)
  return _internal_enable();
}
inline void ClimbConfig::unsafe_arena_set_allocated_enable(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.enable)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig::release_enable() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.enable)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ClimbConfig::mutable_enable() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.enable)
  return _msg;
}
inline void ClimbConfig::set_allocated_enable(::PROTOBUF_NAMESPACE_ID::BoolValue* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable));
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.enable)
}

// .accesscontrol.ClimbConfig.MetricConfig metric = 2;
inline bool ClimbConfig::_internal_has_metric() const {
  return this != internal_default_instance() && metric_ != nullptr;
}
inline bool ClimbConfig::has_metric() const {
  return _internal_has_metric();
}
inline void ClimbConfig::clear_metric() {
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig_MetricConfig& ClimbConfig::_internal_metric() const {
  const ::accesscontrol::ClimbConfig_MetricConfig* p = metric_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig_MetricConfig&>(
      ::accesscontrol::_ClimbConfig_MetricConfig_default_instance_);
}
inline const ::accesscontrol::ClimbConfig_MetricConfig& ClimbConfig::metric() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.metric)
  return _internal_metric();
}
inline void ClimbConfig::unsafe_arena_set_allocated_metric(
    ::accesscontrol::ClimbConfig_MetricConfig* metric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric_);
  }
  metric_ = metric;
  if (metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.metric)
}
inline ::accesscontrol::ClimbConfig_MetricConfig* ClimbConfig::release_metric() {
  
  ::accesscontrol::ClimbConfig_MetricConfig* temp = metric_;
  metric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig_MetricConfig* ClimbConfig::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.metric)
  
  ::accesscontrol::ClimbConfig_MetricConfig* temp = metric_;
  metric_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig_MetricConfig* ClimbConfig::_internal_mutable_metric() {
  
  if (metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig_MetricConfig>(GetArenaForAllocation());
    metric_ = p;
  }
  return metric_;
}
inline ::accesscontrol::ClimbConfig_MetricConfig* ClimbConfig::mutable_metric() {
  ::accesscontrol::ClimbConfig_MetricConfig* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.metric)
  return _msg;
}
inline void ClimbConfig::set_allocated_metric(::accesscontrol::ClimbConfig_MetricConfig* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metric_;
  }
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.metric)
}

// .accesscontrol.ClimbConfig.TriggerPolicy policy = 3;
inline bool ClimbConfig::_internal_has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline bool ClimbConfig::has_policy() const {
  return _internal_has_policy();
}
inline void ClimbConfig::clear_policy() {
  if (GetArenaForAllocation() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy& ClimbConfig::_internal_policy() const {
  const ::accesscontrol::ClimbConfig_TriggerPolicy* p = policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig_TriggerPolicy&>(
      ::accesscontrol::_ClimbConfig_TriggerPolicy_default_instance_);
}
inline const ::accesscontrol::ClimbConfig_TriggerPolicy& ClimbConfig::policy() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.policy)
  return _internal_policy();
}
inline void ClimbConfig::unsafe_arena_set_allocated_policy(
    ::accesscontrol::ClimbConfig_TriggerPolicy* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_);
  }
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.policy)
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy* ClimbConfig::release_policy() {
  
  ::accesscontrol::ClimbConfig_TriggerPolicy* temp = policy_;
  policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy* ClimbConfig::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.policy)
  
  ::accesscontrol::ClimbConfig_TriggerPolicy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy* ClimbConfig::_internal_mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig_TriggerPolicy>(GetArenaForAllocation());
    policy_ = p;
  }
  return policy_;
}
inline ::accesscontrol::ClimbConfig_TriggerPolicy* ClimbConfig::mutable_policy() {
  ::accesscontrol::ClimbConfig_TriggerPolicy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.policy)
  return _msg;
}
inline void ClimbConfig::set_allocated_policy(::accesscontrol::ClimbConfig_TriggerPolicy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(policy);
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.policy)
}

// .accesscontrol.ClimbConfig.ClimbThrottling throttling = 4;
inline bool ClimbConfig::_internal_has_throttling() const {
  return this != internal_default_instance() && throttling_ != nullptr;
}
inline bool ClimbConfig::has_throttling() const {
  return _internal_has_throttling();
}
inline void ClimbConfig::clear_throttling() {
  if (GetArenaForAllocation() == nullptr && throttling_ != nullptr) {
    delete throttling_;
  }
  throttling_ = nullptr;
}
inline const ::accesscontrol::ClimbConfig_ClimbThrottling& ClimbConfig::_internal_throttling() const {
  const ::accesscontrol::ClimbConfig_ClimbThrottling* p = throttling_;
  return p != nullptr ? *p : reinterpret_cast<const ::accesscontrol::ClimbConfig_ClimbThrottling&>(
      ::accesscontrol::_ClimbConfig_ClimbThrottling_default_instance_);
}
inline const ::accesscontrol::ClimbConfig_ClimbThrottling& ClimbConfig::throttling() const {
  // @@protoc_insertion_point(field_get:accesscontrol.ClimbConfig.throttling)
  return _internal_throttling();
}
inline void ClimbConfig::unsafe_arena_set_allocated_throttling(
    ::accesscontrol::ClimbConfig_ClimbThrottling* throttling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttling_);
  }
  throttling_ = throttling;
  if (throttling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.ClimbConfig.throttling)
}
inline ::accesscontrol::ClimbConfig_ClimbThrottling* ClimbConfig::release_throttling() {
  
  ::accesscontrol::ClimbConfig_ClimbThrottling* temp = throttling_;
  throttling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::accesscontrol::ClimbConfig_ClimbThrottling* ClimbConfig::unsafe_arena_release_throttling() {
  // @@protoc_insertion_point(field_release:accesscontrol.ClimbConfig.throttling)
  
  ::accesscontrol::ClimbConfig_ClimbThrottling* temp = throttling_;
  throttling_ = nullptr;
  return temp;
}
inline ::accesscontrol::ClimbConfig_ClimbThrottling* ClimbConfig::_internal_mutable_throttling() {
  
  if (throttling_ == nullptr) {
    auto* p = CreateMaybeMessage<::accesscontrol::ClimbConfig_ClimbThrottling>(GetArenaForAllocation());
    throttling_ = p;
  }
  return throttling_;
}
inline ::accesscontrol::ClimbConfig_ClimbThrottling* ClimbConfig::mutable_throttling() {
  ::accesscontrol::ClimbConfig_ClimbThrottling* _msg = _internal_mutable_throttling();
  // @@protoc_insertion_point(field_mutable:accesscontrol.ClimbConfig.throttling)
  return _msg;
}
inline void ClimbConfig::set_allocated_throttling(::accesscontrol::ClimbConfig_ClimbThrottling* throttling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete throttling_;
  }
  if (throttling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttling);
    if (message_arena != submessage_arena) {
      throttling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttling, submessage_arena);
    }
    
  } else {
    
  }
  throttling_ = throttling;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.ClimbConfig.throttling)
}

// -------------------------------------------------------------------

// RateLimitCluster

// .google.protobuf.StringValue service = 1;
inline bool RateLimitCluster::_internal_has_service() const {
  return this != internal_default_instance() && service_ != nullptr;
}
inline bool RateLimitCluster::has_service() const {
  return _internal_has_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimitCluster::_internal_service() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = service_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimitCluster::service() const {
  // @@protoc_insertion_point(field_get:accesscontrol.RateLimitCluster.service)
  return _internal_service();
}
inline void RateLimitCluster::unsafe_arena_set_allocated_service(
    ::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.RateLimitCluster.service)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::release_service() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::unsafe_arena_release_service() {
  // @@protoc_insertion_point(field_release:accesscontrol.RateLimitCluster.service)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::_internal_mutable_service() {
  
  if (service_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    service_ = p;
  }
  return service_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::mutable_service() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:accesscontrol.RateLimitCluster.service)
  return _msg;
}
inline void RateLimitCluster::set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service));
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.RateLimitCluster.service)
}

// .google.protobuf.StringValue namespace = 2;
inline bool RateLimitCluster::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool RateLimitCluster::has_namespace_() const {
  return _internal_has_namespace_();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimitCluster::_internal_namespace_() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& RateLimitCluster::namespace_() const {
  // @@protoc_insertion_point(field_get:accesscontrol.RateLimitCluster.namespace)
  return _internal_namespace_();
}
inline void RateLimitCluster::unsafe_arena_set_allocated_namespace_(
    ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:accesscontrol.RateLimitCluster.namespace)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::release_namespace_() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:accesscontrol.RateLimitCluster.namespace)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* RateLimitCluster::mutable_namespace_() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:accesscontrol.RateLimitCluster.namespace)
  return _msg;
}
inline void RateLimitCluster::set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_));
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:accesscontrol.RateLimitCluster.namespace)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace accesscontrol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::accesscontrol::MatchString_MatchStringType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::MatchString_MatchStringType>() {
  return ::accesscontrol::MatchString_MatchStringType_descriptor();
}
template <> struct is_proto_enum< ::accesscontrol::MatchString_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::MatchString_ValueType>() {
  return ::accesscontrol::MatchString_ValueType_descriptor();
}
template <> struct is_proto_enum< ::accesscontrol::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::ResourceType>() {
  return ::accesscontrol::ResourceType_descriptor();
}
template <> struct is_proto_enum< ::accesscontrol::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::Type>() {
  return ::accesscontrol::Type_descriptor();
}
template <> struct is_proto_enum< ::accesscontrol::AmountMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::AmountMode>() {
  return ::accesscontrol::AmountMode_descriptor();
}
template <> struct is_proto_enum< ::accesscontrol::FailoverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accesscontrol::FailoverType>() {
  return ::accesscontrol::FailoverType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_limiter_2eproto
