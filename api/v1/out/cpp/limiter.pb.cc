// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: limiter.proto

#include "limiter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace accesscontrol {
PROTOBUF_CONSTEXPR RateLimit::RateLimit(
    ::_pbi::ConstantInitialized)
  : rules_()
  , revision_(nullptr){}
struct RateLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateLimitDefaultTypeInternal() {}
  union {
    RateLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateLimitDefaultTypeInternal _RateLimit_default_instance_;
PROTOBUF_CONSTEXPR Rule_SubsetEntry_DoNotUse::Rule_SubsetEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Rule_SubsetEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rule_SubsetEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rule_SubsetEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Rule_SubsetEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rule_SubsetEntry_DoNotUseDefaultTypeInternal _Rule_SubsetEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Rule_LabelsEntry_DoNotUse::Rule_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Rule_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rule_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rule_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Rule_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rule_LabelsEntry_DoNotUseDefaultTypeInternal _Rule_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Rule::Rule(
    ::_pbi::ConstantInitialized)
  : subset_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , amounts_()
  , id_(nullptr)
  , service_(nullptr)
  , namespace__(nullptr)
  , priority_(nullptr)
  , action_(nullptr)
  , disable_(nullptr)
  , report_(nullptr)
  , ctime_(nullptr)
  , mtime_(nullptr)
  , revision_(nullptr)
  , service_token_(nullptr)
  , adjuster_(nullptr)
  , regex_combine_(nullptr)
  , cluster_(nullptr)
  , method_(nullptr)
  , resource_(0)

  , type_(0)

  , amount_mode_(0)

  , failover_(0)
{}
struct RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleDefaultTypeInternal() {}
  union {
    Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleDefaultTypeInternal _Rule_default_instance_;
PROTOBUF_CONSTEXPR MatchString::MatchString(
    ::_pbi::ConstantInitialized)
  : value_(nullptr)
  , type_(0)
{}
struct MatchStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStringDefaultTypeInternal() {}
  union {
    MatchString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStringDefaultTypeInternal _MatchString_default_instance_;
PROTOBUF_CONSTEXPR Amount::Amount(
    ::_pbi::ConstantInitialized)
  : maxamount_(nullptr)
  , validduration_(nullptr)
  , precision_(nullptr)
  , startamount_(nullptr)
  , minamount_(nullptr){}
struct AmountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmountDefaultTypeInternal() {}
  union {
    Amount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmountDefaultTypeInternal _Amount_default_instance_;
PROTOBUF_CONSTEXPR ReportPolicy::ReportPolicy(
    ::_pbi::ConstantInitialized)
  : interval_(nullptr)
  , amountpercent_(nullptr){}
struct ReportPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportPolicyDefaultTypeInternal() {}
  union {
    ReportPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportPolicyDefaultTypeInternal _ReportPolicy_default_instance_;
PROTOBUF_CONSTEXPR AmountAdjusterAlgorithm::AmountAdjusterAlgorithm(
    ::_pbi::ConstantInitialized)
  : climb_(nullptr){}
struct AmountAdjusterAlgorithmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmountAdjusterAlgorithmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmountAdjusterAlgorithmDefaultTypeInternal() {}
  union {
    AmountAdjusterAlgorithm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmountAdjusterAlgorithmDefaultTypeInternal _AmountAdjusterAlgorithm_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_MetricConfig::ClimbConfig_MetricConfig(
    ::_pbi::ConstantInitialized)
  : window_(nullptr)
  , precision_(nullptr)
  , reportinterval_(nullptr){}
struct ClimbConfig_MetricConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_MetricConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_MetricConfigDefaultTypeInternal() {}
  union {
    ClimbConfig_MetricConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_MetricConfigDefaultTypeInternal _ClimbConfig_MetricConfig_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(
    ::_pbi::ConstantInitialized)
  : errorcodes_()
  , type_(nullptr)
  , errorrate_(nullptr){}
struct ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal() {}
  union {
    ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfigDefaultTypeInternal _ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRate::ClimbConfig_TriggerPolicy_ErrorRate(
    ::_pbi::ConstantInitialized)
  : specials_()
  , enable_(nullptr)
  , requestvolumethreshold_(nullptr)
  , errorrate_(nullptr){}
struct ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal() {}
  union {
    ClimbConfig_TriggerPolicy_ErrorRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_TriggerPolicy_ErrorRateDefaultTypeInternal _ClimbConfig_TriggerPolicy_ErrorRate_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_SlowRate::ClimbConfig_TriggerPolicy_SlowRate(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , maxrt_(nullptr)
  , slowrate_(nullptr){}
struct ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal() {}
  union {
    ClimbConfig_TriggerPolicy_SlowRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_TriggerPolicy_SlowRateDefaultTypeInternal _ClimbConfig_TriggerPolicy_SlowRate_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicy::ClimbConfig_TriggerPolicy(
    ::_pbi::ConstantInitialized)
  : errorrate_(nullptr)
  , slowrate_(nullptr){}
struct ClimbConfig_TriggerPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_TriggerPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_TriggerPolicyDefaultTypeInternal() {}
  union {
    ClimbConfig_TriggerPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_TriggerPolicyDefaultTypeInternal _ClimbConfig_TriggerPolicy_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig_ClimbThrottling::ClimbConfig_ClimbThrottling(
    ::_pbi::ConstantInitialized)
  : coldbelowtunedownrate_(nullptr)
  , coldbelowtuneuprate_(nullptr)
  , coldabovetunedownrate_(nullptr)
  , coldabovetuneuprate_(nullptr)
  , limitthresholdtotuneup_(nullptr)
  , judgeduration_(nullptr)
  , tuneupperiod_(nullptr)
  , tunedownperiod_(nullptr){}
struct ClimbConfig_ClimbThrottlingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfig_ClimbThrottlingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfig_ClimbThrottlingDefaultTypeInternal() {}
  union {
    ClimbConfig_ClimbThrottling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfig_ClimbThrottlingDefaultTypeInternal _ClimbConfig_ClimbThrottling_default_instance_;
PROTOBUF_CONSTEXPR ClimbConfig::ClimbConfig(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , metric_(nullptr)
  , policy_(nullptr)
  , throttling_(nullptr){}
struct ClimbConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClimbConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClimbConfigDefaultTypeInternal() {}
  union {
    ClimbConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClimbConfigDefaultTypeInternal _ClimbConfig_default_instance_;
PROTOBUF_CONSTEXPR RateLimitCluster::RateLimitCluster(
    ::_pbi::ConstantInitialized)
  : service_(nullptr)
  , namespace__(nullptr){}
struct RateLimitClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateLimitClusterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateLimitClusterDefaultTypeInternal() {}
  union {
    RateLimitCluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateLimitClusterDefaultTypeInternal _RateLimitCluster_default_instance_;
}  // namespace accesscontrol
static ::_pb::Metadata file_level_metadata_limiter_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_limiter_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_limiter_2eproto = nullptr;

const uint32_t TableStruct_limiter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimit, rules_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimit, revision_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_SubsetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_SubsetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_SubsetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_SubsetEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, id_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, service_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, namespace__),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, subset_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, priority_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, resource_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, type_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, labels_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, amounts_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, action_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, disable_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, report_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, ctime_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, mtime_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, revision_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, service_token_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, adjuster_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, regex_combine_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, amount_mode_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, failover_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, cluster_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Rule, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::MatchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::MatchString, type_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::MatchString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, maxamount_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, validduration_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, precision_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, startamount_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::Amount, minamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ReportPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ReportPolicy, interval_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ReportPolicy, amountpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::AmountAdjusterAlgorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::AmountAdjusterAlgorithm, climb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_MetricConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_MetricConfig, window_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_MetricConfig, precision_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_MetricConfig, reportinterval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, type_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, errorcodes_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, errorrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate, enable_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate, requestvolumethreshold_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate, errorrate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate, specials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate, enable_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate, maxrt_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate, slowrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy, errorrate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_TriggerPolicy, slowrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, coldbelowtunedownrate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, coldbelowtuneuprate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, coldabovetunedownrate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, coldabovetuneuprate_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, limitthresholdtotuneup_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, judgeduration_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, tuneupperiod_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig_ClimbThrottling, tunedownperiod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig, metric_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig, policy_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::ClimbConfig, throttling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimitCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimitCluster, service_),
  PROTOBUF_FIELD_OFFSET(::accesscontrol::RateLimitCluster, namespace__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::accesscontrol::RateLimit)},
  { 8, 16, -1, sizeof(::accesscontrol::Rule_SubsetEntry_DoNotUse)},
  { 18, 26, -1, sizeof(::accesscontrol::Rule_LabelsEntry_DoNotUse)},
  { 28, -1, -1, sizeof(::accesscontrol::Rule)},
  { 56, -1, -1, sizeof(::accesscontrol::MatchString)},
  { 64, -1, -1, sizeof(::accesscontrol::Amount)},
  { 75, -1, -1, sizeof(::accesscontrol::ReportPolicy)},
  { 83, -1, -1, sizeof(::accesscontrol::AmountAdjusterAlgorithm)},
  { 90, -1, -1, sizeof(::accesscontrol::ClimbConfig_MetricConfig)},
  { 99, -1, -1, sizeof(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig)},
  { 108, -1, -1, sizeof(::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate)},
  { 118, -1, -1, sizeof(::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate)},
  { 127, -1, -1, sizeof(::accesscontrol::ClimbConfig_TriggerPolicy)},
  { 135, -1, -1, sizeof(::accesscontrol::ClimbConfig_ClimbThrottling)},
  { 149, -1, -1, sizeof(::accesscontrol::ClimbConfig)},
  { 159, -1, -1, sizeof(::accesscontrol::RateLimitCluster)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::accesscontrol::_RateLimit_default_instance_._instance,
  &::accesscontrol::_Rule_SubsetEntry_DoNotUse_default_instance_._instance,
  &::accesscontrol::_Rule_LabelsEntry_DoNotUse_default_instance_._instance,
  &::accesscontrol::_Rule_default_instance_._instance,
  &::accesscontrol::_MatchString_default_instance_._instance,
  &::accesscontrol::_Amount_default_instance_._instance,
  &::accesscontrol::_ReportPolicy_default_instance_._instance,
  &::accesscontrol::_AmountAdjusterAlgorithm_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_MetricConfig_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_TriggerPolicy_ErrorRate_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_TriggerPolicy_SlowRate_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_TriggerPolicy_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_ClimbThrottling_default_instance_._instance,
  &::accesscontrol::_ClimbConfig_default_instance_._instance,
  &::accesscontrol::_RateLimitCluster_default_instance_._instance,
};

const char descriptor_table_protodef_limiter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rlimiter.proto\022\raccesscontrol\032\036google/p"
  "rotobuf/wrappers.proto\032\036google/protobuf/"
  "duration.proto\"_\n\tRateLimit\022\"\n\005rules\030\001 \003"
  "(\0132\023.accesscontrol.Rule\022.\n\010revision\030\002 \001("
  "\0132\034.google.protobuf.StringValue\"\262\t\n\004Rule"
  "\022(\n\002id\030\001 \001(\0132\034.google.protobuf.StringVal"
  "ue\022-\n\007service\030\002 \001(\0132\034.google.protobuf.St"
  "ringValue\022/\n\tnamespace\030\003 \001(\0132\034.google.pr"
  "otobuf.StringValue\022/\n\006subset\030\004 \003(\0132\037.acc"
  "esscontrol.Rule.SubsetEntry\022.\n\010priority\030"
  "\005 \001(\0132\034.google.protobuf.UInt32Value\022-\n\010r"
  "esource\030\006 \001(\0162\033.accesscontrol.ResourceTy"
  "pe\022!\n\004type\030\007 \001(\0162\023.accesscontrol.Type\022/\n"
  "\006labels\030\010 \003(\0132\037.accesscontrol.Rule.Label"
  "sEntry\022&\n\007amounts\030\t \003(\0132\025.accesscontrol."
  "Amount\022,\n\006action\030\n \001(\0132\034.google.protobuf"
  ".StringValue\022+\n\007disable\030\013 \001(\0132\032.google.p"
  "rotobuf.BoolValue\022+\n\006report\030\014 \001(\0132\033.acce"
  "sscontrol.ReportPolicy\022+\n\005ctime\030\r \001(\0132\034."
  "google.protobuf.StringValue\022+\n\005mtime\030\016 \001"
  "(\0132\034.google.protobuf.StringValue\022.\n\010revi"
  "sion\030\017 \001(\0132\034.google.protobuf.StringValue"
  "\022B\n\rservice_token\030\020 \001(\0132\034.google.protobu"
  "f.StringValueR\rservice_token\0228\n\010adjuster"
  "\030\021 \001(\0132&.accesscontrol.AmountAdjusterAlg"
  "orithm\0221\n\rregex_combine\030\022 \001(\0132\032.google.p"
  "rotobuf.BoolValue\022.\n\013amount_mode\030\023 \001(\0162\031"
  ".accesscontrol.AmountMode\022-\n\010failover\030\024 "
  "\001(\0162\033.accesscontrol.FailoverType\0220\n\007clus"
  "ter\030\025 \001(\0132\037.accesscontrol.RateLimitClust"
  "er\022*\n\006method\030\026 \001(\0132\032.accesscontrol.Match"
  "String\032I\n\013SubsetEntry\022\013\n\003key\030\001 \001(\t\022)\n\005va"
  "lue\030\002 \001(\0132\032.accesscontrol.MatchString:\0028"
  "\001\032I\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002"
  " \001(\0132\032.accesscontrol.MatchString:\0028\001\"\342\001\n"
  "\013MatchString\0228\n\004type\030\001 \001(\0162*.accesscontr"
  "ol.MatchString.MatchStringType\022+\n\005value\030"
  "\002 \001(\0132\034.google.protobuf.StringValue\"U\n\017M"
  "atchStringType\022\t\n\005EXACT\020\000\022\t\n\005REGEX\020\001\022\016\n\n"
  "NOT_EQUALS\020\002\022\013\n\007INCLUDE\020\003\022\017\n\013NOT_INCLUDE"
  "\020\004\"\025\n\tValueType\022\010\n\004TEXT\020\000\"\200\002\n\006Amount\022/\n\t"
  "maxAmount\030\001 \001(\0132\034.google.protobuf.UInt32"
  "Value\0220\n\rvalidDuration\030\002 \001(\0132\031.google.pr"
  "otobuf.Duration\022/\n\tprecision\030\003 \001(\0132\034.goo"
  "gle.protobuf.UInt32Value\0221\n\013startAmount\030"
  "\004 \001(\0132\034.google.protobuf.UInt32Value\022/\n\tm"
  "inAmount\030\005 \001(\0132\034.google.protobuf.UInt32V"
  "alue\"p\n\014ReportPolicy\022+\n\010interval\030\001 \001(\0132\031"
  ".google.protobuf.Duration\0223\n\ramountPerce"
  "nt\030\002 \001(\0132\034.google.protobuf.UInt32Value\"D"
  "\n\027AmountAdjusterAlgorithm\022)\n\005climb\030\001 \001(\013"
  "2\032.accesscontrol.ClimbConfig\"\256\014\n\013ClimbCo"
  "nfig\022*\n\006enable\030\001 \001(\0132\032.google.protobuf.B"
  "oolValue\0227\n\006metric\030\002 \001(\0132\'.accesscontrol"
  ".ClimbConfig.MetricConfig\0228\n\006policy\030\003 \001("
  "\0132(.accesscontrol.ClimbConfig.TriggerPol"
  "icy\022>\n\nthrottling\030\004 \001(\0132*.accesscontrol."
  "ClimbConfig.ClimbThrottling\032\235\001\n\014MetricCo"
  "nfig\022)\n\006window\030\001 \001(\0132\031.google.protobuf.D"
  "uration\022/\n\tprecision\030\002 \001(\0132\034.google.prot"
  "obuf.UInt32Value\0221\n\016reportInterval\030\003 \001(\013"
  "2\031.google.protobuf.Duration\032\310\005\n\rTriggerP"
  "olicy\022E\n\terrorRate\030\001 \001(\01322.accesscontrol"
  ".ClimbConfig.TriggerPolicy.ErrorRate\022C\n\010"
  "slowRate\030\002 \001(\01321.accesscontrol.ClimbConf"
  "ig.TriggerPolicy.SlowRate\032\230\003\n\tErrorRate\022"
  "*\n\006enable\030\001 \001(\0132\032.google.protobuf.BoolVa"
  "lue\022<\n\026requestVolumeThreshold\030\002 \001(\0132\034.go"
  "ogle.protobuf.UInt32Value\022.\n\terrorRate\030\003"
  " \001(\0132\033.google.protobuf.Int32Value\022R\n\010spe"
  "cials\030\004 \003(\0132@.accesscontrol.ClimbConfig."
  "TriggerPolicy.ErrorRate.SpecialConfig\032\234\001"
  "\n\rSpecialConfig\022*\n\004type\030\001 \001(\0132\034.google.p"
  "rotobuf.StringValue\022/\n\nerrorCodes\030\002 \003(\0132"
  "\033.google.protobuf.Int64Value\022.\n\terrorRat"
  "e\030\003 \001(\0132\033.google.protobuf.Int32Value\032\217\001\n"
  "\010SlowRate\022*\n\006enable\030\001 \001(\0132\032.google.proto"
  "buf.BoolValue\022(\n\005maxRt\030\002 \001(\0132\031.google.pr"
  "otobuf.Duration\022-\n\010slowRate\030\003 \001(\0132\033.goog"
  "le.protobuf.Int32Value\032\324\003\n\017ClimbThrottli"
  "ng\022:\n\025coldBelowTuneDownRate\030\001 \001(\0132\033.goog"
  "le.protobuf.Int32Value\0228\n\023coldBelowTuneU"
  "pRate\030\002 \001(\0132\033.google.protobuf.Int32Value"
  "\022:\n\025coldAboveTuneDownRate\030\003 \001(\0132\033.google"
  ".protobuf.Int32Value\0228\n\023coldAboveTuneUpR"
  "ate\030\004 \001(\0132\033.google.protobuf.Int32Value\022;"
  "\n\026limitThresholdToTuneUp\030\005 \001(\0132\033.google."
  "protobuf.Int32Value\0220\n\rjudgeDuration\030\006 \001"
  "(\0132\031.google.protobuf.Duration\0221\n\014tuneUpP"
  "eriod\030\007 \001(\0132\033.google.protobuf.Int32Value"
  "\0223\n\016tuneDownPeriod\030\010 \001(\0132\033.google.protob"
  "uf.Int32Value\"r\n\020RateLimitCluster\022-\n\007ser"
  "vice\030\001 \001(\0132\034.google.protobuf.StringValue"
  "\022/\n\tnamespace\030\002 \001(\0132\034.google.protobuf.St"
  "ringValue*(\n\014ResourceType\022\007\n\003QPS\020\000\022\017\n\013CO"
  "NCURRENCY\020\001*\035\n\004Type\022\n\n\006GLOBAL\020\000\022\t\n\005LOCAL"
  "\020\001*1\n\nAmountMode\022\020\n\014GLOBAL_TOTAL\020\000\022\021\n\rSH"
  "ARE_EQUALLY\020\001*5\n\014FailoverType\022\022\n\016FAILOVE"
  "R_LOCAL\020\000\022\021\n\rFAILOVER_PASS\020\001B<\n$cn.polar"
  "ismesh.polaris.accesscontrolZ\024api/v1/acc"
  "esscontrolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_limiter_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_limiter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_limiter_2eproto = {
    false, false, 4018, descriptor_table_protodef_limiter_2eproto,
    "limiter.proto",
    &descriptor_table_limiter_2eproto_once, descriptor_table_limiter_2eproto_deps, 2, 16,
    schemas, file_default_instances, TableStruct_limiter_2eproto::offsets,
    file_level_metadata_limiter_2eproto, file_level_enum_descriptors_limiter_2eproto,
    file_level_service_descriptors_limiter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_limiter_2eproto_getter() {
  return &descriptor_table_limiter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_limiter_2eproto(&descriptor_table_limiter_2eproto);
namespace accesscontrol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_MatchStringType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[0];
}
bool MatchString_MatchStringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_MatchStringType MatchString::EXACT;
constexpr MatchString_MatchStringType MatchString::REGEX;
constexpr MatchString_MatchStringType MatchString::NOT_EQUALS;
constexpr MatchString_MatchStringType MatchString::INCLUDE;
constexpr MatchString_MatchStringType MatchString::NOT_INCLUDE;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MIN;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MAX;
constexpr int MatchString::MatchStringType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[1];
}
bool MatchString_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_ValueType MatchString::TEXT;
constexpr MatchString_ValueType MatchString::ValueType_MIN;
constexpr MatchString_ValueType MatchString::ValueType_MAX;
constexpr int MatchString::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[2];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[3];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AmountMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[4];
}
bool AmountMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailoverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_limiter_2eproto);
  return file_level_enum_descriptors_limiter_2eproto[5];
}
bool FailoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RateLimit::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& revision(const RateLimit* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
RateLimit::_Internal::revision(const RateLimit* msg) {
  return *msg->revision_;
}
void RateLimit::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
RateLimit::RateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.RateLimit)
}
RateLimit::RateLimit(const RateLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_revision()) {
    revision_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.RateLimit)
}

inline void RateLimit::SharedCtor() {
revision_ = nullptr;
}

RateLimit::~RateLimit() {
  // @@protoc_insertion_point(destructor:accesscontrol.RateLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RateLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete revision_;
}

void RateLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.RateLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .accesscontrol.Rule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RateLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.RateLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .accesscontrol.Rule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue revision = 2;
  if (this->_internal_has_revision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::revision(this),
        _Internal::revision(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.RateLimit)
  return target;
}

size_t RateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.RateLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accesscontrol.Rule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue revision = 2;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RateLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RateLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RateLimit::GetClassData() const { return &_class_data_; }

void RateLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RateLimit *>(to)->MergeFrom(
      static_cast<const RateLimit &>(from));
}


void RateLimit::MergeFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_revision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RateLimit::CopyFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit::IsInitialized() const {
  return true;
}

void RateLimit::InternalSwap(RateLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[0]);
}

// ===================================================================

Rule_SubsetEntry_DoNotUse::Rule_SubsetEntry_DoNotUse() {}
Rule_SubsetEntry_DoNotUse::Rule_SubsetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Rule_SubsetEntry_DoNotUse::MergeFrom(const Rule_SubsetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Rule_SubsetEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[1]);
}

// ===================================================================

Rule_LabelsEntry_DoNotUse::Rule_LabelsEntry_DoNotUse() {}
Rule_LabelsEntry_DoNotUse::Rule_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Rule_LabelsEntry_DoNotUse::MergeFrom(const Rule_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Rule_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[2]);
}

// ===================================================================

class Rule::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& id(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& priority(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& action(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& disable(const Rule* msg);
  static const ::accesscontrol::ReportPolicy& report(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& ctime(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& mtime(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& revision(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service_token(const Rule* msg);
  static const ::accesscontrol::AmountAdjusterAlgorithm& adjuster(const Rule* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& regex_combine(const Rule* msg);
  static const ::accesscontrol::RateLimitCluster& cluster(const Rule* msg);
  static const ::accesscontrol::MatchString& method(const Rule* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::id(const Rule* msg) {
  return *msg->id_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::service(const Rule* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::namespace_(const Rule* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Rule::_Internal::priority(const Rule* msg) {
  return *msg->priority_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::action(const Rule* msg) {
  return *msg->action_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Rule::_Internal::disable(const Rule* msg) {
  return *msg->disable_;
}
const ::accesscontrol::ReportPolicy&
Rule::_Internal::report(const Rule* msg) {
  return *msg->report_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::ctime(const Rule* msg) {
  return *msg->ctime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::mtime(const Rule* msg) {
  return *msg->mtime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::revision(const Rule* msg) {
  return *msg->revision_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Rule::_Internal::service_token(const Rule* msg) {
  return *msg->service_token_;
}
const ::accesscontrol::AmountAdjusterAlgorithm&
Rule::_Internal::adjuster(const Rule* msg) {
  return *msg->adjuster_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Rule::_Internal::regex_combine(const Rule* msg) {
  return *msg->regex_combine_;
}
const ::accesscontrol::RateLimitCluster&
Rule::_Internal::cluster(const Rule* msg) {
  return *msg->cluster_;
}
const ::accesscontrol::MatchString&
Rule::_Internal::method(const Rule* msg) {
  return *msg->method_;
}
void Rule::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Rule::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Rule::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Rule::clear_priority() {
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
void Rule::clear_action() {
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
void Rule::clear_disable() {
  if (GetArenaForAllocation() == nullptr && disable_ != nullptr) {
    delete disable_;
  }
  disable_ = nullptr;
}
void Rule::clear_ctime() {
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
}
void Rule::clear_mtime() {
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
}
void Rule::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
void Rule::clear_service_token() {
  if (GetArenaForAllocation() == nullptr && service_token_ != nullptr) {
    delete service_token_;
  }
  service_token_ = nullptr;
}
void Rule::clear_regex_combine() {
  if (GetArenaForAllocation() == nullptr && regex_combine_ != nullptr) {
    delete regex_combine_;
  }
  regex_combine_ = nullptr;
}
Rule::Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subset_(arena),
  labels_(arena),
  amounts_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Rule::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:accesscontrol.Rule)
}
Rule::Rule(const Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amounts_(from.amounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subset_.MergeFrom(from.subset_);
  labels_.MergeFrom(from.labels_);
  if (from._internal_has_id()) {
    id_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_disable()) {
    disable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.disable_);
  } else {
    disable_ = nullptr;
  }
  if (from._internal_has_report()) {
    report_ = new ::accesscontrol::ReportPolicy(*from.report_);
  } else {
    report_ = nullptr;
  }
  if (from._internal_has_ctime()) {
    ctime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.ctime_);
  } else {
    ctime_ = nullptr;
  }
  if (from._internal_has_mtime()) {
    mtime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.mtime_);
  } else {
    mtime_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  if (from._internal_has_service_token()) {
    service_token_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_token_);
  } else {
    service_token_ = nullptr;
  }
  if (from._internal_has_adjuster()) {
    adjuster_ = new ::accesscontrol::AmountAdjusterAlgorithm(*from.adjuster_);
  } else {
    adjuster_ = nullptr;
  }
  if (from._internal_has_regex_combine()) {
    regex_combine_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.regex_combine_);
  } else {
    regex_combine_ = nullptr;
  }
  if (from._internal_has_cluster()) {
    cluster_ = new ::accesscontrol::RateLimitCluster(*from.cluster_);
  } else {
    cluster_ = nullptr;
  }
  if (from._internal_has_method()) {
    method_ = new ::accesscontrol::MatchString(*from.method_);
  } else {
    method_ = nullptr;
  }
  ::memcpy(&resource_, &from.resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&failover_) -
    reinterpret_cast<char*>(&resource_)) + sizeof(failover_));
  // @@protoc_insertion_point(copy_constructor:accesscontrol.Rule)
}

inline void Rule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failover_) -
    reinterpret_cast<char*>(&id_)) + sizeof(failover_));
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:accesscontrol.Rule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subset_.Destruct();
  labels_.Destruct();
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete disable_;
  if (this != internal_default_instance()) delete report_;
  if (this != internal_default_instance()) delete ctime_;
  if (this != internal_default_instance()) delete mtime_;
  if (this != internal_default_instance()) delete revision_;
  if (this != internal_default_instance()) delete service_token_;
  if (this != internal_default_instance()) delete adjuster_;
  if (this != internal_default_instance()) delete regex_combine_;
  if (this != internal_default_instance()) delete cluster_;
  if (this != internal_default_instance()) delete method_;
}

void Rule::ArenaDtor(void* object) {
  Rule* _this = reinterpret_cast< Rule* >(object);
  _this->subset_.Destruct();
  _this->labels_.Destruct();
}
void Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subset_.Clear();
  labels_.Clear();
  amounts_.Clear();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaForAllocation() == nullptr && disable_ != nullptr) {
    delete disable_;
  }
  disable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_token_ != nullptr) {
    delete service_token_;
  }
  service_token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adjuster_ != nullptr) {
    delete adjuster_;
  }
  adjuster_ = nullptr;
  if (GetArenaForAllocation() == nullptr && regex_combine_ != nullptr) {
    delete regex_combine_;
  }
  regex_combine_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
  if (GetArenaForAllocation() == nullptr && method_ != nullptr) {
    delete method_;
  }
  method_ = nullptr;
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failover_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(failover_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .accesscontrol.MatchString> subset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&subset_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ResourceType resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::accesscontrol::ResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.Type type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::accesscontrol::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .accesscontrol.MatchString> labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .accesscontrol.Amount amounts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue action = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue disable = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_disable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ReportPolicy report = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue ctime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue mtime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue revision = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service_token = 16 [json_name = "service_token"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.AmountAdjusterAlgorithm adjuster = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjuster(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue regex_combine = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_regex_combine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.AmountMode amount_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_amount_mode(static_cast<::accesscontrol::AmountMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.FailoverType failover = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failover(static_cast<::accesscontrol::FailoverType>(val));
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.RateLimitCluster cluster = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.MatchString method = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 3;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // map<string, .accesscontrol.MatchString> subset = 4;
  if (!this->_internal_subset().empty()) {
    using MapType = ::_pb::Map<std::string, ::accesscontrol::MatchString>;
    using WireHelper = Rule_SubsetEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_subset();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "accesscontrol.Rule.SubsetEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.UInt32Value priority = 5;
  if (this->_internal_has_priority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ResourceType resource = 6;
  if (this->_internal_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_resource(), target);
  }

  // .accesscontrol.Type type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // map<string, .accesscontrol.MatchString> labels = 8;
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, ::accesscontrol::MatchString>;
    using WireHelper = Rule_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "accesscontrol.Rule.LabelsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .accesscontrol.Amount amounts = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_amounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue action = 10;
  if (this->_internal_has_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::action(this),
        _Internal::action(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue disable = 11;
  if (this->_internal_has_disable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::disable(this),
        _Internal::disable(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ReportPolicy report = 12;
  if (this->_internal_has_report()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue ctime = 13;
  if (this->_internal_has_ctime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ctime(this),
        _Internal::ctime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue mtime = 14;
  if (this->_internal_has_mtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::mtime(this),
        _Internal::mtime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue revision = 15;
  if (this->_internal_has_revision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::revision(this),
        _Internal::revision(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service_token = 16 [json_name = "service_token"];
  if (this->_internal_has_service_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::service_token(this),
        _Internal::service_token(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.AmountAdjusterAlgorithm adjuster = 17;
  if (this->_internal_has_adjuster()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::adjuster(this),
        _Internal::adjuster(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue regex_combine = 18;
  if (this->_internal_has_regex_combine()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::regex_combine(this),
        _Internal::regex_combine(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.AmountMode amount_mode = 19;
  if (this->_internal_amount_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_amount_mode(), target);
  }

  // .accesscontrol.FailoverType failover = 20;
  if (this->_internal_failover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_failover(), target);
  }

  // .accesscontrol.RateLimitCluster cluster = 21;
  if (this->_internal_has_cluster()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::cluster(this),
        _Internal::cluster(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.MatchString method = 22;
  if (this->_internal_has_method()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::method(this),
        _Internal::method(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.Rule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .accesscontrol.MatchString> subset = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_subset_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >::const_iterator
      it = this->_internal_subset().begin();
      it != this->_internal_subset().end(); ++it) {
    total_size += Rule_SubsetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .accesscontrol.MatchString> labels = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::accesscontrol::MatchString >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Rule_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .accesscontrol.Amount amounts = 9;
  total_size += 1UL * this->_internal_amounts_size();
  for (const auto& msg : this->amounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 3;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.UInt32Value priority = 5;
  if (this->_internal_has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .google.protobuf.StringValue action = 10;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .google.protobuf.BoolValue disable = 11;
  if (this->_internal_has_disable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disable_);
  }

  // .accesscontrol.ReportPolicy report = 12;
  if (this->_internal_has_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_);
  }

  // .google.protobuf.StringValue ctime = 13;
  if (this->_internal_has_ctime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctime_);
  }

  // .google.protobuf.StringValue mtime = 14;
  if (this->_internal_has_mtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtime_);
  }

  // .google.protobuf.StringValue revision = 15;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // .google.protobuf.StringValue service_token = 16 [json_name = "service_token"];
  if (this->_internal_has_service_token()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_token_);
  }

  // .accesscontrol.AmountAdjusterAlgorithm adjuster = 17;
  if (this->_internal_has_adjuster()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjuster_);
  }

  // .google.protobuf.BoolValue regex_combine = 18;
  if (this->_internal_has_regex_combine()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regex_combine_);
  }

  // .accesscontrol.RateLimitCluster cluster = 21;
  if (this->_internal_has_cluster()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  // .accesscontrol.MatchString method = 22;
  if (this->_internal_has_method()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *method_);
  }

  // .accesscontrol.ResourceType resource = 6;
  if (this->_internal_resource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource());
  }

  // .accesscontrol.Type type = 7;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .accesscontrol.AmountMode amount_mode = 19;
  if (this->_internal_amount_mode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_amount_mode());
  }

  // .accesscontrol.FailoverType failover = 20;
  if (this->_internal_failover() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_failover());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rule::GetClassData() const { return &_class_data_; }

void Rule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rule *>(to)->MergeFrom(
      static_cast<const Rule &>(from));
}


void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subset_.MergeFrom(from.subset_);
  labels_.MergeFrom(from.labels_);
  amounts_.MergeFrom(from.amounts_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_id());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_priority()) {
    _internal_mutable_priority()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_priority());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_action());
  }
  if (from._internal_has_disable()) {
    _internal_mutable_disable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_disable());
  }
  if (from._internal_has_report()) {
    _internal_mutable_report()->::accesscontrol::ReportPolicy::MergeFrom(from._internal_report());
  }
  if (from._internal_has_ctime()) {
    _internal_mutable_ctime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_ctime());
  }
  if (from._internal_has_mtime()) {
    _internal_mutable_mtime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_mtime());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_revision());
  }
  if (from._internal_has_service_token()) {
    _internal_mutable_service_token()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service_token());
  }
  if (from._internal_has_adjuster()) {
    _internal_mutable_adjuster()->::accesscontrol::AmountAdjusterAlgorithm::MergeFrom(from._internal_adjuster());
  }
  if (from._internal_has_regex_combine()) {
    _internal_mutable_regex_combine()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_regex_combine());
  }
  if (from._internal_has_cluster()) {
    _internal_mutable_cluster()->::accesscontrol::RateLimitCluster::MergeFrom(from._internal_cluster());
  }
  if (from._internal_has_method()) {
    _internal_mutable_method()->::accesscontrol::MatchString::MergeFrom(from._internal_method());
  }
  if (from._internal_resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_amount_mode() != 0) {
    _internal_set_amount_mode(from._internal_amount_mode());
  }
  if (from._internal_failover() != 0) {
    _internal_set_failover(from._internal_failover());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  return true;
}

void Rule::InternalSwap(Rule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subset_.InternalSwap(&other->subset_);
  labels_.InternalSwap(&other->labels_);
  amounts_.InternalSwap(&other->amounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rule, failover_)
      + sizeof(Rule::failover_)
      - PROTOBUF_FIELD_OFFSET(Rule, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[3]);
}

// ===================================================================

class MatchString::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& value(const MatchString* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
MatchString::_Internal::value(const MatchString* msg) {
  return *msg->value_;
}
void MatchString::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
MatchString::MatchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.MatchString)
}
MatchString::MatchString(const MatchString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:accesscontrol.MatchString)
}

inline void MatchString::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

MatchString::~MatchString() {
  // @@protoc_insertion_point(destructor:accesscontrol.MatchString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void MatchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchString::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.MatchString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accesscontrol.MatchString.MatchStringType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::accesscontrol::MatchString_MatchStringType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.MatchString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .accesscontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.MatchString)
  return target;
}

size_t MatchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.MatchString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .accesscontrol.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchString::GetClassData() const { return &_class_data_; }

void MatchString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchString *>(to)->MergeFrom(
      static_cast<const MatchString &>(from));
}


void MatchString::MergeFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.MatchString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchString::CopyFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.MatchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchString::IsInitialized() const {
  return true;
}

void MatchString::InternalSwap(MatchString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchString, type_)
      + sizeof(MatchString::type_)
      - PROTOBUF_FIELD_OFFSET(MatchString, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[4]);
}

// ===================================================================

class Amount::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& maxamount(const Amount* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& validduration(const Amount* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& precision(const Amount* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& startamount(const Amount* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& minamount(const Amount* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Amount::_Internal::maxamount(const Amount* msg) {
  return *msg->maxamount_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Amount::_Internal::validduration(const Amount* msg) {
  return *msg->validduration_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Amount::_Internal::precision(const Amount* msg) {
  return *msg->precision_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Amount::_Internal::startamount(const Amount* msg) {
  return *msg->startamount_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Amount::_Internal::minamount(const Amount* msg) {
  return *msg->minamount_;
}
void Amount::clear_maxamount() {
  if (GetArenaForAllocation() == nullptr && maxamount_ != nullptr) {
    delete maxamount_;
  }
  maxamount_ = nullptr;
}
void Amount::clear_validduration() {
  if (GetArenaForAllocation() == nullptr && validduration_ != nullptr) {
    delete validduration_;
  }
  validduration_ = nullptr;
}
void Amount::clear_precision() {
  if (GetArenaForAllocation() == nullptr && precision_ != nullptr) {
    delete precision_;
  }
  precision_ = nullptr;
}
void Amount::clear_startamount() {
  if (GetArenaForAllocation() == nullptr && startamount_ != nullptr) {
    delete startamount_;
  }
  startamount_ = nullptr;
}
void Amount::clear_minamount() {
  if (GetArenaForAllocation() == nullptr && minamount_ != nullptr) {
    delete minamount_;
  }
  minamount_ = nullptr;
}
Amount::Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.Amount)
}
Amount::Amount(const Amount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maxamount()) {
    maxamount_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.maxamount_);
  } else {
    maxamount_ = nullptr;
  }
  if (from._internal_has_validduration()) {
    validduration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.validduration_);
  } else {
    validduration_ = nullptr;
  }
  if (from._internal_has_precision()) {
    precision_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.precision_);
  } else {
    precision_ = nullptr;
  }
  if (from._internal_has_startamount()) {
    startamount_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.startamount_);
  } else {
    startamount_ = nullptr;
  }
  if (from._internal_has_minamount()) {
    minamount_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.minamount_);
  } else {
    minamount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.Amount)
}

inline void Amount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxamount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minamount_) -
    reinterpret_cast<char*>(&maxamount_)) + sizeof(minamount_));
}

Amount::~Amount() {
  // @@protoc_insertion_point(destructor:accesscontrol.Amount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Amount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete maxamount_;
  if (this != internal_default_instance()) delete validduration_;
  if (this != internal_default_instance()) delete precision_;
  if (this != internal_default_instance()) delete startamount_;
  if (this != internal_default_instance()) delete minamount_;
}

void Amount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Amount::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.Amount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && maxamount_ != nullptr) {
    delete maxamount_;
  }
  maxamount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validduration_ != nullptr) {
    delete validduration_;
  }
  validduration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && precision_ != nullptr) {
    delete precision_;
  }
  precision_ = nullptr;
  if (GetArenaForAllocation() == nullptr && startamount_ != nullptr) {
    delete startamount_;
  }
  startamount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && minamount_ != nullptr) {
    delete minamount_;
  }
  minamount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Amount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value maxAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration validDuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validduration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value startAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_startamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value minAmount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_minamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Amount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.Amount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value maxAmount = 1;
  if (this->_internal_has_maxamount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::maxamount(this),
        _Internal::maxamount(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration validDuration = 2;
  if (this->_internal_has_validduration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validduration(this),
        _Internal::validduration(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value precision = 3;
  if (this->_internal_has_precision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::precision(this),
        _Internal::precision(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value startAmount = 4;
  if (this->_internal_has_startamount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::startamount(this),
        _Internal::startamount(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value minAmount = 5;
  if (this->_internal_has_minamount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::minamount(this),
        _Internal::minamount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.Amount)
  return target;
}

size_t Amount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.Amount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value maxAmount = 1;
  if (this->_internal_has_maxamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxamount_);
  }

  // .google.protobuf.Duration validDuration = 2;
  if (this->_internal_has_validduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validduration_);
  }

  // .google.protobuf.UInt32Value precision = 3;
  if (this->_internal_has_precision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precision_);
  }

  // .google.protobuf.UInt32Value startAmount = 4;
  if (this->_internal_has_startamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startamount_);
  }

  // .google.protobuf.UInt32Value minAmount = 5;
  if (this->_internal_has_minamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minamount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Amount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Amount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Amount::GetClassData() const { return &_class_data_; }

void Amount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Amount *>(to)->MergeFrom(
      static_cast<const Amount &>(from));
}


void Amount::MergeFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_maxamount()) {
    _internal_mutable_maxamount()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_maxamount());
  }
  if (from._internal_has_validduration()) {
    _internal_mutable_validduration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_validduration());
  }
  if (from._internal_has_precision()) {
    _internal_mutable_precision()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_precision());
  }
  if (from._internal_has_startamount()) {
    _internal_mutable_startamount()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_startamount());
  }
  if (from._internal_has_minamount()) {
    _internal_mutable_minamount()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_minamount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Amount::CopyFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amount::IsInitialized() const {
  return true;
}

void Amount::InternalSwap(Amount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Amount, minamount_)
      + sizeof(Amount::minamount_)
      - PROTOBUF_FIELD_OFFSET(Amount, maxamount_)>(
          reinterpret_cast<char*>(&maxamount_),
          reinterpret_cast<char*>(&other->maxamount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Amount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[5]);
}

// ===================================================================

class ReportPolicy::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& interval(const ReportPolicy* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& amountpercent(const ReportPolicy* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ReportPolicy::_Internal::interval(const ReportPolicy* msg) {
  return *msg->interval_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
ReportPolicy::_Internal::amountpercent(const ReportPolicy* msg) {
  return *msg->amountpercent_;
}
void ReportPolicy::clear_interval() {
  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
void ReportPolicy::clear_amountpercent() {
  if (GetArenaForAllocation() == nullptr && amountpercent_ != nullptr) {
    delete amountpercent_;
  }
  amountpercent_ = nullptr;
}
ReportPolicy::ReportPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ReportPolicy)
}
ReportPolicy::ReportPolicy(const ReportPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interval()) {
    interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  if (from._internal_has_amountpercent()) {
    amountpercent_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.amountpercent_);
  } else {
    amountpercent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ReportPolicy)
}

inline void ReportPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amountpercent_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(amountpercent_));
}

ReportPolicy::~ReportPolicy() {
  // @@protoc_insertion_point(destructor:accesscontrol.ReportPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete interval_;
  if (this != internal_default_instance()) delete amountpercent_;
}

void ReportPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ReportPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && amountpercent_ != nullptr) {
    delete amountpercent_;
  }
  amountpercent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value amountPercent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amountpercent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ReportPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration interval = 1;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value amountPercent = 2;
  if (this->_internal_has_amountpercent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::amountpercent(this),
        _Internal::amountpercent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ReportPolicy)
  return target;
}

size_t ReportPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ReportPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration interval = 1;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // .google.protobuf.UInt32Value amountPercent = 2;
  if (this->_internal_has_amountpercent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amountpercent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportPolicy::GetClassData() const { return &_class_data_; }

void ReportPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportPolicy *>(to)->MergeFrom(
      static_cast<const ReportPolicy &>(from));
}


void ReportPolicy::MergeFrom(const ReportPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ReportPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interval()) {
    _internal_mutable_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_interval());
  }
  if (from._internal_has_amountpercent()) {
    _internal_mutable_amountpercent()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_amountpercent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportPolicy::CopyFrom(const ReportPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ReportPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPolicy::IsInitialized() const {
  return true;
}

void ReportPolicy::InternalSwap(ReportPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportPolicy, amountpercent_)
      + sizeof(ReportPolicy::amountpercent_)
      - PROTOBUF_FIELD_OFFSET(ReportPolicy, interval_)>(
          reinterpret_cast<char*>(&interval_),
          reinterpret_cast<char*>(&other->interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[6]);
}

// ===================================================================

class AmountAdjusterAlgorithm::_Internal {
 public:
  static const ::accesscontrol::ClimbConfig& climb(const AmountAdjusterAlgorithm* msg);
};

const ::accesscontrol::ClimbConfig&
AmountAdjusterAlgorithm::_Internal::climb(const AmountAdjusterAlgorithm* msg) {
  return *msg->climb_;
}
AmountAdjusterAlgorithm::AmountAdjusterAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.AmountAdjusterAlgorithm)
}
AmountAdjusterAlgorithm::AmountAdjusterAlgorithm(const AmountAdjusterAlgorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_climb()) {
    climb_ = new ::accesscontrol::ClimbConfig(*from.climb_);
  } else {
    climb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.AmountAdjusterAlgorithm)
}

inline void AmountAdjusterAlgorithm::SharedCtor() {
climb_ = nullptr;
}

AmountAdjusterAlgorithm::~AmountAdjusterAlgorithm() {
  // @@protoc_insertion_point(destructor:accesscontrol.AmountAdjusterAlgorithm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AmountAdjusterAlgorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete climb_;
}

void AmountAdjusterAlgorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AmountAdjusterAlgorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.AmountAdjusterAlgorithm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && climb_ != nullptr) {
    delete climb_;
  }
  climb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmountAdjusterAlgorithm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accesscontrol.ClimbConfig climb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_climb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AmountAdjusterAlgorithm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.AmountAdjusterAlgorithm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .accesscontrol.ClimbConfig climb = 1;
  if (this->_internal_has_climb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::climb(this),
        _Internal::climb(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.AmountAdjusterAlgorithm)
  return target;
}

size_t AmountAdjusterAlgorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.AmountAdjusterAlgorithm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accesscontrol.ClimbConfig climb = 1;
  if (this->_internal_has_climb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *climb_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmountAdjusterAlgorithm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AmountAdjusterAlgorithm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmountAdjusterAlgorithm::GetClassData() const { return &_class_data_; }

void AmountAdjusterAlgorithm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AmountAdjusterAlgorithm *>(to)->MergeFrom(
      static_cast<const AmountAdjusterAlgorithm &>(from));
}


void AmountAdjusterAlgorithm::MergeFrom(const AmountAdjusterAlgorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.AmountAdjusterAlgorithm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_climb()) {
    _internal_mutable_climb()->::accesscontrol::ClimbConfig::MergeFrom(from._internal_climb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmountAdjusterAlgorithm::CopyFrom(const AmountAdjusterAlgorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.AmountAdjusterAlgorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmountAdjusterAlgorithm::IsInitialized() const {
  return true;
}

void AmountAdjusterAlgorithm::InternalSwap(AmountAdjusterAlgorithm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(climb_, other->climb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmountAdjusterAlgorithm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[7]);
}

// ===================================================================

class ClimbConfig_MetricConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& window(const ClimbConfig_MetricConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& precision(const ClimbConfig_MetricConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& reportinterval(const ClimbConfig_MetricConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ClimbConfig_MetricConfig::_Internal::window(const ClimbConfig_MetricConfig* msg) {
  return *msg->window_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
ClimbConfig_MetricConfig::_Internal::precision(const ClimbConfig_MetricConfig* msg) {
  return *msg->precision_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClimbConfig_MetricConfig::_Internal::reportinterval(const ClimbConfig_MetricConfig* msg) {
  return *msg->reportinterval_;
}
void ClimbConfig_MetricConfig::clear_window() {
  if (GetArenaForAllocation() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
}
void ClimbConfig_MetricConfig::clear_precision() {
  if (GetArenaForAllocation() == nullptr && precision_ != nullptr) {
    delete precision_;
  }
  precision_ = nullptr;
}
void ClimbConfig_MetricConfig::clear_reportinterval() {
  if (GetArenaForAllocation() == nullptr && reportinterval_ != nullptr) {
    delete reportinterval_;
  }
  reportinterval_ = nullptr;
}
ClimbConfig_MetricConfig::ClimbConfig_MetricConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.MetricConfig)
}
ClimbConfig_MetricConfig::ClimbConfig_MetricConfig(const ClimbConfig_MetricConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_window()) {
    window_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.window_);
  } else {
    window_ = nullptr;
  }
  if (from._internal_has_precision()) {
    precision_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.precision_);
  } else {
    precision_ = nullptr;
  }
  if (from._internal_has_reportinterval()) {
    reportinterval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.reportinterval_);
  } else {
    reportinterval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.MetricConfig)
}

inline void ClimbConfig_MetricConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reportinterval_) -
    reinterpret_cast<char*>(&window_)) + sizeof(reportinterval_));
}

ClimbConfig_MetricConfig::~ClimbConfig_MetricConfig() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.MetricConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_MetricConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete window_;
  if (this != internal_default_instance()) delete precision_;
  if (this != internal_default_instance()) delete reportinterval_;
}

void ClimbConfig_MetricConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_MetricConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.MetricConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
  if (GetArenaForAllocation() == nullptr && precision_ != nullptr) {
    delete precision_;
  }
  precision_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reportinterval_ != nullptr) {
    delete reportinterval_;
  }
  reportinterval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_MetricConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_precision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration reportInterval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportinterval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_MetricConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.MetricConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration window = 1;
  if (this->_internal_has_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::window(this),
        _Internal::window(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value precision = 2;
  if (this->_internal_has_precision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::precision(this),
        _Internal::precision(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration reportInterval = 3;
  if (this->_internal_has_reportinterval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::reportinterval(this),
        _Internal::reportinterval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.MetricConfig)
  return target;
}

size_t ClimbConfig_MetricConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.MetricConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration window = 1;
  if (this->_internal_has_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_);
  }

  // .google.protobuf.UInt32Value precision = 2;
  if (this->_internal_has_precision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precision_);
  }

  // .google.protobuf.Duration reportInterval = 3;
  if (this->_internal_has_reportinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reportinterval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_MetricConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_MetricConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_MetricConfig::GetClassData() const { return &_class_data_; }

void ClimbConfig_MetricConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_MetricConfig *>(to)->MergeFrom(
      static_cast<const ClimbConfig_MetricConfig &>(from));
}


void ClimbConfig_MetricConfig::MergeFrom(const ClimbConfig_MetricConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.MetricConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_window()) {
    _internal_mutable_window()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_window());
  }
  if (from._internal_has_precision()) {
    _internal_mutable_precision()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_precision());
  }
  if (from._internal_has_reportinterval()) {
    _internal_mutable_reportinterval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_reportinterval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_MetricConfig::CopyFrom(const ClimbConfig_MetricConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.MetricConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_MetricConfig::IsInitialized() const {
  return true;
}

void ClimbConfig_MetricConfig::InternalSwap(ClimbConfig_MetricConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_MetricConfig, reportinterval_)
      + sizeof(ClimbConfig_MetricConfig::reportinterval_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_MetricConfig, window_)>(
          reinterpret_cast<char*>(&window_),
          reinterpret_cast<char*>(&other->window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_MetricConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[8]);
}

// ===================================================================

class ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& type(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& errorrate(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_Internal::type(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* msg) {
  return *msg->type_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_Internal::errorrate(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* msg) {
  return *msg->errorrate_;
}
void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::clear_errorcodes() {
  errorcodes_.Clear();
}
void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::clear_errorrate() {
  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
}
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  errorcodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
}
ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errorcodes_(from.errorcodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_errorrate()) {
    errorrate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.errorrate_);
  } else {
    errorrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
}

inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorrate_) -
    reinterpret_cast<char*>(&type_)) + sizeof(errorrate_));
}

ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::~ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete errorrate_;
}

void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcodes_.Clear();
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Int64Value errorCodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errorcodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value errorRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue type = 1;
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Int64Value errorCodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_errorcodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_errorcodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value errorRate = 3;
  if (this->_internal_has_errorrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorrate(this),
        _Internal::errorrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  return target;
}

size_t ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Int64Value errorCodes = 2;
  total_size += 1UL * this->_internal_errorcodes_size();
  for (const auto& msg : this->errorcodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue type = 1;
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .google.protobuf.Int32Value errorRate = 3;
  if (this->_internal_has_errorrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::GetClassData() const { return &_class_data_; }

void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig *>(to)->MergeFrom(
      static_cast<const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig &>(from));
}


void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::MergeFrom(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  errorcodes_.MergeFrom(from.errorcodes_);
  if (from._internal_has_type()) {
    _internal_mutable_type()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_type());
  }
  if (from._internal_has_errorrate()) {
    _internal_mutable_errorrate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_errorrate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::CopyFrom(const ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::IsInitialized() const {
  return true;
}

void ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::InternalSwap(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  errorcodes_.InternalSwap(&other->errorcodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, errorrate_)
      + sizeof(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::errorrate_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[9]);
}

// ===================================================================

class ClimbConfig_TriggerPolicy_ErrorRate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const ClimbConfig_TriggerPolicy_ErrorRate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& requestvolumethreshold(const ClimbConfig_TriggerPolicy_ErrorRate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& errorrate(const ClimbConfig_TriggerPolicy_ErrorRate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
ClimbConfig_TriggerPolicy_ErrorRate::_Internal::enable(const ClimbConfig_TriggerPolicy_ErrorRate* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
ClimbConfig_TriggerPolicy_ErrorRate::_Internal::requestvolumethreshold(const ClimbConfig_TriggerPolicy_ErrorRate* msg) {
  return *msg->requestvolumethreshold_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_TriggerPolicy_ErrorRate::_Internal::errorrate(const ClimbConfig_TriggerPolicy_ErrorRate* msg) {
  return *msg->errorrate_;
}
void ClimbConfig_TriggerPolicy_ErrorRate::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void ClimbConfig_TriggerPolicy_ErrorRate::clear_requestvolumethreshold() {
  if (GetArenaForAllocation() == nullptr && requestvolumethreshold_ != nullptr) {
    delete requestvolumethreshold_;
  }
  requestvolumethreshold_ = nullptr;
}
void ClimbConfig_TriggerPolicy_ErrorRate::clear_errorrate() {
  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
}
ClimbConfig_TriggerPolicy_ErrorRate::ClimbConfig_TriggerPolicy_ErrorRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specials_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
}
ClimbConfig_TriggerPolicy_ErrorRate::ClimbConfig_TriggerPolicy_ErrorRate(const ClimbConfig_TriggerPolicy_ErrorRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specials_(from.specials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_requestvolumethreshold()) {
    requestvolumethreshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.requestvolumethreshold_);
  } else {
    requestvolumethreshold_ = nullptr;
  }
  if (from._internal_has_errorrate()) {
    errorrate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.errorrate_);
  } else {
    errorrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
}

inline void ClimbConfig_TriggerPolicy_ErrorRate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorrate_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(errorrate_));
}

ClimbConfig_TriggerPolicy_ErrorRate::~ClimbConfig_TriggerPolicy_ErrorRate() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_TriggerPolicy_ErrorRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete requestvolumethreshold_;
  if (this != internal_default_instance()) delete errorrate_;
}

void ClimbConfig_TriggerPolicy_ErrorRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_TriggerPolicy_ErrorRate::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specials_.Clear();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && requestvolumethreshold_ != nullptr) {
    delete requestvolumethreshold_;
  }
  requestvolumethreshold_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_TriggerPolicy_ErrorRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestvolumethreshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value errorRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig specials = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_TriggerPolicy_ErrorRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
  if (this->_internal_has_requestvolumethreshold()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::requestvolumethreshold(this),
        _Internal::requestvolumethreshold(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value errorRate = 3;
  if (this->_internal_has_errorrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorrate(this),
        _Internal::errorrate(this).GetCachedSize(), target, stream);
  }

  // repeated .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig specials = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_specials_size()); i < n; i++) {
    const auto& repfield = this->_internal_specials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  return target;
}

size_t ClimbConfig_TriggerPolicy_ErrorRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig specials = 4;
  total_size += 1UL * this->_internal_specials_size();
  for (const auto& msg : this->specials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
  if (this->_internal_has_requestvolumethreshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestvolumethreshold_);
  }

  // .google.protobuf.Int32Value errorRate = 3;
  if (this->_internal_has_errorrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_TriggerPolicy_ErrorRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_TriggerPolicy_ErrorRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_TriggerPolicy_ErrorRate::GetClassData() const { return &_class_data_; }

void ClimbConfig_TriggerPolicy_ErrorRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_TriggerPolicy_ErrorRate *>(to)->MergeFrom(
      static_cast<const ClimbConfig_TriggerPolicy_ErrorRate &>(from));
}


void ClimbConfig_TriggerPolicy_ErrorRate::MergeFrom(const ClimbConfig_TriggerPolicy_ErrorRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  specials_.MergeFrom(from.specials_);
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_requestvolumethreshold()) {
    _internal_mutable_requestvolumethreshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_requestvolumethreshold());
  }
  if (from._internal_has_errorrate()) {
    _internal_mutable_errorrate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_errorrate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_TriggerPolicy_ErrorRate::CopyFrom(const ClimbConfig_TriggerPolicy_ErrorRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_TriggerPolicy_ErrorRate::IsInitialized() const {
  return true;
}

void ClimbConfig_TriggerPolicy_ErrorRate::InternalSwap(ClimbConfig_TriggerPolicy_ErrorRate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specials_.InternalSwap(&other->specials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_ErrorRate, errorrate_)
      + sizeof(ClimbConfig_TriggerPolicy_ErrorRate::errorrate_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_ErrorRate, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_TriggerPolicy_ErrorRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[10]);
}

// ===================================================================

class ClimbConfig_TriggerPolicy_SlowRate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const ClimbConfig_TriggerPolicy_SlowRate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& maxrt(const ClimbConfig_TriggerPolicy_SlowRate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& slowrate(const ClimbConfig_TriggerPolicy_SlowRate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
ClimbConfig_TriggerPolicy_SlowRate::_Internal::enable(const ClimbConfig_TriggerPolicy_SlowRate* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClimbConfig_TriggerPolicy_SlowRate::_Internal::maxrt(const ClimbConfig_TriggerPolicy_SlowRate* msg) {
  return *msg->maxrt_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_TriggerPolicy_SlowRate::_Internal::slowrate(const ClimbConfig_TriggerPolicy_SlowRate* msg) {
  return *msg->slowrate_;
}
void ClimbConfig_TriggerPolicy_SlowRate::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void ClimbConfig_TriggerPolicy_SlowRate::clear_maxrt() {
  if (GetArenaForAllocation() == nullptr && maxrt_ != nullptr) {
    delete maxrt_;
  }
  maxrt_ = nullptr;
}
void ClimbConfig_TriggerPolicy_SlowRate::clear_slowrate() {
  if (GetArenaForAllocation() == nullptr && slowrate_ != nullptr) {
    delete slowrate_;
  }
  slowrate_ = nullptr;
}
ClimbConfig_TriggerPolicy_SlowRate::ClimbConfig_TriggerPolicy_SlowRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
}
ClimbConfig_TriggerPolicy_SlowRate::ClimbConfig_TriggerPolicy_SlowRate(const ClimbConfig_TriggerPolicy_SlowRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_maxrt()) {
    maxrt_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.maxrt_);
  } else {
    maxrt_ = nullptr;
  }
  if (from._internal_has_slowrate()) {
    slowrate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.slowrate_);
  } else {
    slowrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
}

inline void ClimbConfig_TriggerPolicy_SlowRate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slowrate_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(slowrate_));
}

ClimbConfig_TriggerPolicy_SlowRate::~ClimbConfig_TriggerPolicy_SlowRate() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_TriggerPolicy_SlowRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete maxrt_;
  if (this != internal_default_instance()) delete slowrate_;
}

void ClimbConfig_TriggerPolicy_SlowRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_TriggerPolicy_SlowRate::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxrt_ != nullptr) {
    delete maxrt_;
  }
  maxrt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slowrate_ != nullptr) {
    delete slowrate_;
  }
  slowrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_TriggerPolicy_SlowRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration maxRt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxrt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value slowRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_TriggerPolicy_SlowRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration maxRt = 2;
  if (this->_internal_has_maxrt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maxrt(this),
        _Internal::maxrt(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value slowRate = 3;
  if (this->_internal_has_slowrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slowrate(this),
        _Internal::slowrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  return target;
}

size_t ClimbConfig_TriggerPolicy_SlowRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.Duration maxRt = 2;
  if (this->_internal_has_maxrt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxrt_);
  }

  // .google.protobuf.Int32Value slowRate = 3;
  if (this->_internal_has_slowrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_TriggerPolicy_SlowRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_TriggerPolicy_SlowRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_TriggerPolicy_SlowRate::GetClassData() const { return &_class_data_; }

void ClimbConfig_TriggerPolicy_SlowRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_TriggerPolicy_SlowRate *>(to)->MergeFrom(
      static_cast<const ClimbConfig_TriggerPolicy_SlowRate &>(from));
}


void ClimbConfig_TriggerPolicy_SlowRate::MergeFrom(const ClimbConfig_TriggerPolicy_SlowRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_maxrt()) {
    _internal_mutable_maxrt()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_maxrt());
  }
  if (from._internal_has_slowrate()) {
    _internal_mutable_slowrate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_slowrate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_TriggerPolicy_SlowRate::CopyFrom(const ClimbConfig_TriggerPolicy_SlowRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.TriggerPolicy.SlowRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_TriggerPolicy_SlowRate::IsInitialized() const {
  return true;
}

void ClimbConfig_TriggerPolicy_SlowRate::InternalSwap(ClimbConfig_TriggerPolicy_SlowRate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_SlowRate, slowrate_)
      + sizeof(ClimbConfig_TriggerPolicy_SlowRate::slowrate_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy_SlowRate, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_TriggerPolicy_SlowRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[11]);
}

// ===================================================================

class ClimbConfig_TriggerPolicy::_Internal {
 public:
  static const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate& errorrate(const ClimbConfig_TriggerPolicy* msg);
  static const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate& slowrate(const ClimbConfig_TriggerPolicy* msg);
};

const ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate&
ClimbConfig_TriggerPolicy::_Internal::errorrate(const ClimbConfig_TriggerPolicy* msg) {
  return *msg->errorrate_;
}
const ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate&
ClimbConfig_TriggerPolicy::_Internal::slowrate(const ClimbConfig_TriggerPolicy* msg) {
  return *msg->slowrate_;
}
ClimbConfig_TriggerPolicy::ClimbConfig_TriggerPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.TriggerPolicy)
}
ClimbConfig_TriggerPolicy::ClimbConfig_TriggerPolicy(const ClimbConfig_TriggerPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errorrate()) {
    errorrate_ = new ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate(*from.errorrate_);
  } else {
    errorrate_ = nullptr;
  }
  if (from._internal_has_slowrate()) {
    slowrate_ = new ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate(*from.slowrate_);
  } else {
    slowrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.TriggerPolicy)
}

inline void ClimbConfig_TriggerPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errorrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slowrate_) -
    reinterpret_cast<char*>(&errorrate_)) + sizeof(slowrate_));
}

ClimbConfig_TriggerPolicy::~ClimbConfig_TriggerPolicy() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.TriggerPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_TriggerPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errorrate_;
  if (this != internal_default_instance()) delete slowrate_;
}

void ClimbConfig_TriggerPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_TriggerPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.TriggerPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slowrate_ != nullptr) {
    delete slowrate_;
  }
  slowrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_TriggerPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate errorRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ClimbConfig.TriggerPolicy.SlowRate slowRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_TriggerPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.TriggerPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate errorRate = 1;
  if (this->_internal_has_errorrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::errorrate(this),
        _Internal::errorrate(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ClimbConfig.TriggerPolicy.SlowRate slowRate = 2;
  if (this->_internal_has_slowrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slowrate(this),
        _Internal::slowrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.TriggerPolicy)
  return target;
}

size_t ClimbConfig_TriggerPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.TriggerPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate errorRate = 1;
  if (this->_internal_has_errorrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorrate_);
  }

  // .accesscontrol.ClimbConfig.TriggerPolicy.SlowRate slowRate = 2;
  if (this->_internal_has_slowrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_TriggerPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_TriggerPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_TriggerPolicy::GetClassData() const { return &_class_data_; }

void ClimbConfig_TriggerPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_TriggerPolicy *>(to)->MergeFrom(
      static_cast<const ClimbConfig_TriggerPolicy &>(from));
}


void ClimbConfig_TriggerPolicy::MergeFrom(const ClimbConfig_TriggerPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.TriggerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorrate()) {
    _internal_mutable_errorrate()->::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate::MergeFrom(from._internal_errorrate());
  }
  if (from._internal_has_slowrate()) {
    _internal_mutable_slowrate()->::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate::MergeFrom(from._internal_slowrate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_TriggerPolicy::CopyFrom(const ClimbConfig_TriggerPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.TriggerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_TriggerPolicy::IsInitialized() const {
  return true;
}

void ClimbConfig_TriggerPolicy::InternalSwap(ClimbConfig_TriggerPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy, slowrate_)
      + sizeof(ClimbConfig_TriggerPolicy::slowrate_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_TriggerPolicy, errorrate_)>(
          reinterpret_cast<char*>(&errorrate_),
          reinterpret_cast<char*>(&other->errorrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_TriggerPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[12]);
}

// ===================================================================

class ClimbConfig_ClimbThrottling::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldbelowtunedownrate(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldbelowtuneuprate(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldabovetunedownrate(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& coldabovetuneuprate(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& limitthresholdtotuneup(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& judgeduration(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& tuneupperiod(const ClimbConfig_ClimbThrottling* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& tunedownperiod(const ClimbConfig_ClimbThrottling* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::coldbelowtunedownrate(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->coldbelowtunedownrate_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::coldbelowtuneuprate(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->coldbelowtuneuprate_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::coldabovetunedownrate(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->coldabovetunedownrate_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::coldabovetuneuprate(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->coldabovetuneuprate_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::limitthresholdtotuneup(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->limitthresholdtotuneup_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClimbConfig_ClimbThrottling::_Internal::judgeduration(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->judgeduration_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::tuneupperiod(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->tuneupperiod_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ClimbConfig_ClimbThrottling::_Internal::tunedownperiod(const ClimbConfig_ClimbThrottling* msg) {
  return *msg->tunedownperiod_;
}
void ClimbConfig_ClimbThrottling::clear_coldbelowtunedownrate() {
  if (GetArenaForAllocation() == nullptr && coldbelowtunedownrate_ != nullptr) {
    delete coldbelowtunedownrate_;
  }
  coldbelowtunedownrate_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_coldbelowtuneuprate() {
  if (GetArenaForAllocation() == nullptr && coldbelowtuneuprate_ != nullptr) {
    delete coldbelowtuneuprate_;
  }
  coldbelowtuneuprate_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_coldabovetunedownrate() {
  if (GetArenaForAllocation() == nullptr && coldabovetunedownrate_ != nullptr) {
    delete coldabovetunedownrate_;
  }
  coldabovetunedownrate_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_coldabovetuneuprate() {
  if (GetArenaForAllocation() == nullptr && coldabovetuneuprate_ != nullptr) {
    delete coldabovetuneuprate_;
  }
  coldabovetuneuprate_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_limitthresholdtotuneup() {
  if (GetArenaForAllocation() == nullptr && limitthresholdtotuneup_ != nullptr) {
    delete limitthresholdtotuneup_;
  }
  limitthresholdtotuneup_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_judgeduration() {
  if (GetArenaForAllocation() == nullptr && judgeduration_ != nullptr) {
    delete judgeduration_;
  }
  judgeduration_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_tuneupperiod() {
  if (GetArenaForAllocation() == nullptr && tuneupperiod_ != nullptr) {
    delete tuneupperiod_;
  }
  tuneupperiod_ = nullptr;
}
void ClimbConfig_ClimbThrottling::clear_tunedownperiod() {
  if (GetArenaForAllocation() == nullptr && tunedownperiod_ != nullptr) {
    delete tunedownperiod_;
  }
  tunedownperiod_ = nullptr;
}
ClimbConfig_ClimbThrottling::ClimbConfig_ClimbThrottling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig.ClimbThrottling)
}
ClimbConfig_ClimbThrottling::ClimbConfig_ClimbThrottling(const ClimbConfig_ClimbThrottling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coldbelowtunedownrate()) {
    coldbelowtunedownrate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.coldbelowtunedownrate_);
  } else {
    coldbelowtunedownrate_ = nullptr;
  }
  if (from._internal_has_coldbelowtuneuprate()) {
    coldbelowtuneuprate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.coldbelowtuneuprate_);
  } else {
    coldbelowtuneuprate_ = nullptr;
  }
  if (from._internal_has_coldabovetunedownrate()) {
    coldabovetunedownrate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.coldabovetunedownrate_);
  } else {
    coldabovetunedownrate_ = nullptr;
  }
  if (from._internal_has_coldabovetuneuprate()) {
    coldabovetuneuprate_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.coldabovetuneuprate_);
  } else {
    coldabovetuneuprate_ = nullptr;
  }
  if (from._internal_has_limitthresholdtotuneup()) {
    limitthresholdtotuneup_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.limitthresholdtotuneup_);
  } else {
    limitthresholdtotuneup_ = nullptr;
  }
  if (from._internal_has_judgeduration()) {
    judgeduration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.judgeduration_);
  } else {
    judgeduration_ = nullptr;
  }
  if (from._internal_has_tuneupperiod()) {
    tuneupperiod_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.tuneupperiod_);
  } else {
    tuneupperiod_ = nullptr;
  }
  if (from._internal_has_tunedownperiod()) {
    tunedownperiod_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.tunedownperiod_);
  } else {
    tunedownperiod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig.ClimbThrottling)
}

inline void ClimbConfig_ClimbThrottling::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coldbelowtunedownrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tunedownperiod_) -
    reinterpret_cast<char*>(&coldbelowtunedownrate_)) + sizeof(tunedownperiod_));
}

ClimbConfig_ClimbThrottling::~ClimbConfig_ClimbThrottling() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig.ClimbThrottling)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig_ClimbThrottling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete coldbelowtunedownrate_;
  if (this != internal_default_instance()) delete coldbelowtuneuprate_;
  if (this != internal_default_instance()) delete coldabovetunedownrate_;
  if (this != internal_default_instance()) delete coldabovetuneuprate_;
  if (this != internal_default_instance()) delete limitthresholdtotuneup_;
  if (this != internal_default_instance()) delete judgeduration_;
  if (this != internal_default_instance()) delete tuneupperiod_;
  if (this != internal_default_instance()) delete tunedownperiod_;
}

void ClimbConfig_ClimbThrottling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig_ClimbThrottling::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig.ClimbThrottling)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && coldbelowtunedownrate_ != nullptr) {
    delete coldbelowtunedownrate_;
  }
  coldbelowtunedownrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coldbelowtuneuprate_ != nullptr) {
    delete coldbelowtuneuprate_;
  }
  coldbelowtuneuprate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coldabovetunedownrate_ != nullptr) {
    delete coldabovetunedownrate_;
  }
  coldabovetunedownrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coldabovetuneuprate_ != nullptr) {
    delete coldabovetuneuprate_;
  }
  coldabovetuneuprate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limitthresholdtotuneup_ != nullptr) {
    delete limitthresholdtotuneup_;
  }
  limitthresholdtotuneup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && judgeduration_ != nullptr) {
    delete judgeduration_;
  }
  judgeduration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tuneupperiod_ != nullptr) {
    delete tuneupperiod_;
  }
  tuneupperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tunedownperiod_ != nullptr) {
    delete tunedownperiod_;
  }
  tunedownperiod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig_ClimbThrottling::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value coldBelowTuneDownRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coldbelowtunedownrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value coldBelowTuneUpRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coldbelowtuneuprate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value coldAboveTuneDownRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coldabovetunedownrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value coldAboveTuneUpRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coldabovetuneuprate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value limitThresholdToTuneUp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_limitthresholdtotuneup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration judgeDuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_judgeduration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value tuneUpPeriod = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuneupperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value tuneDownPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunedownperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig_ClimbThrottling::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig.ClimbThrottling)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value coldBelowTuneDownRate = 1;
  if (this->_internal_has_coldbelowtunedownrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coldbelowtunedownrate(this),
        _Internal::coldbelowtunedownrate(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value coldBelowTuneUpRate = 2;
  if (this->_internal_has_coldbelowtuneuprate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coldbelowtuneuprate(this),
        _Internal::coldbelowtuneuprate(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value coldAboveTuneDownRate = 3;
  if (this->_internal_has_coldabovetunedownrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::coldabovetunedownrate(this),
        _Internal::coldabovetunedownrate(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value coldAboveTuneUpRate = 4;
  if (this->_internal_has_coldabovetuneuprate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coldabovetuneuprate(this),
        _Internal::coldabovetuneuprate(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value limitThresholdToTuneUp = 5;
  if (this->_internal_has_limitthresholdtotuneup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::limitthresholdtotuneup(this),
        _Internal::limitthresholdtotuneup(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration judgeDuration = 6;
  if (this->_internal_has_judgeduration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::judgeduration(this),
        _Internal::judgeduration(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value tuneUpPeriod = 7;
  if (this->_internal_has_tuneupperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tuneupperiod(this),
        _Internal::tuneupperiod(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value tuneDownPeriod = 8;
  if (this->_internal_has_tunedownperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tunedownperiod(this),
        _Internal::tunedownperiod(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig.ClimbThrottling)
  return target;
}

size_t ClimbConfig_ClimbThrottling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig.ClimbThrottling)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value coldBelowTuneDownRate = 1;
  if (this->_internal_has_coldbelowtunedownrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coldbelowtunedownrate_);
  }

  // .google.protobuf.Int32Value coldBelowTuneUpRate = 2;
  if (this->_internal_has_coldbelowtuneuprate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coldbelowtuneuprate_);
  }

  // .google.protobuf.Int32Value coldAboveTuneDownRate = 3;
  if (this->_internal_has_coldabovetunedownrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coldabovetunedownrate_);
  }

  // .google.protobuf.Int32Value coldAboveTuneUpRate = 4;
  if (this->_internal_has_coldabovetuneuprate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coldabovetuneuprate_);
  }

  // .google.protobuf.Int32Value limitThresholdToTuneUp = 5;
  if (this->_internal_has_limitthresholdtotuneup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limitthresholdtotuneup_);
  }

  // .google.protobuf.Duration judgeDuration = 6;
  if (this->_internal_has_judgeduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *judgeduration_);
  }

  // .google.protobuf.Int32Value tuneUpPeriod = 7;
  if (this->_internal_has_tuneupperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tuneupperiod_);
  }

  // .google.protobuf.Int32Value tuneDownPeriod = 8;
  if (this->_internal_has_tunedownperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tunedownperiod_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig_ClimbThrottling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig_ClimbThrottling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig_ClimbThrottling::GetClassData() const { return &_class_data_; }

void ClimbConfig_ClimbThrottling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig_ClimbThrottling *>(to)->MergeFrom(
      static_cast<const ClimbConfig_ClimbThrottling &>(from));
}


void ClimbConfig_ClimbThrottling::MergeFrom(const ClimbConfig_ClimbThrottling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig.ClimbThrottling)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_coldbelowtunedownrate()) {
    _internal_mutable_coldbelowtunedownrate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_coldbelowtunedownrate());
  }
  if (from._internal_has_coldbelowtuneuprate()) {
    _internal_mutable_coldbelowtuneuprate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_coldbelowtuneuprate());
  }
  if (from._internal_has_coldabovetunedownrate()) {
    _internal_mutable_coldabovetunedownrate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_coldabovetunedownrate());
  }
  if (from._internal_has_coldabovetuneuprate()) {
    _internal_mutable_coldabovetuneuprate()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_coldabovetuneuprate());
  }
  if (from._internal_has_limitthresholdtotuneup()) {
    _internal_mutable_limitthresholdtotuneup()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_limitthresholdtotuneup());
  }
  if (from._internal_has_judgeduration()) {
    _internal_mutable_judgeduration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_judgeduration());
  }
  if (from._internal_has_tuneupperiod()) {
    _internal_mutable_tuneupperiod()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_tuneupperiod());
  }
  if (from._internal_has_tunedownperiod()) {
    _internal_mutable_tunedownperiod()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_tunedownperiod());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig_ClimbThrottling::CopyFrom(const ClimbConfig_ClimbThrottling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig.ClimbThrottling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig_ClimbThrottling::IsInitialized() const {
  return true;
}

void ClimbConfig_ClimbThrottling::InternalSwap(ClimbConfig_ClimbThrottling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig_ClimbThrottling, tunedownperiod_)
      + sizeof(ClimbConfig_ClimbThrottling::tunedownperiod_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig_ClimbThrottling, coldbelowtunedownrate_)>(
          reinterpret_cast<char*>(&coldbelowtunedownrate_),
          reinterpret_cast<char*>(&other->coldbelowtunedownrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig_ClimbThrottling::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[13]);
}

// ===================================================================

class ClimbConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const ClimbConfig* msg);
  static const ::accesscontrol::ClimbConfig_MetricConfig& metric(const ClimbConfig* msg);
  static const ::accesscontrol::ClimbConfig_TriggerPolicy& policy(const ClimbConfig* msg);
  static const ::accesscontrol::ClimbConfig_ClimbThrottling& throttling(const ClimbConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
ClimbConfig::_Internal::enable(const ClimbConfig* msg) {
  return *msg->enable_;
}
const ::accesscontrol::ClimbConfig_MetricConfig&
ClimbConfig::_Internal::metric(const ClimbConfig* msg) {
  return *msg->metric_;
}
const ::accesscontrol::ClimbConfig_TriggerPolicy&
ClimbConfig::_Internal::policy(const ClimbConfig* msg) {
  return *msg->policy_;
}
const ::accesscontrol::ClimbConfig_ClimbThrottling&
ClimbConfig::_Internal::throttling(const ClimbConfig* msg) {
  return *msg->throttling_;
}
void ClimbConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
ClimbConfig::ClimbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.ClimbConfig)
}
ClimbConfig::ClimbConfig(const ClimbConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_metric()) {
    metric_ = new ::accesscontrol::ClimbConfig_MetricConfig(*from.metric_);
  } else {
    metric_ = nullptr;
  }
  if (from._internal_has_policy()) {
    policy_ = new ::accesscontrol::ClimbConfig_TriggerPolicy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  if (from._internal_has_throttling()) {
    throttling_ = new ::accesscontrol::ClimbConfig_ClimbThrottling(*from.throttling_);
  } else {
    throttling_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.ClimbConfig)
}

inline void ClimbConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&throttling_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(throttling_));
}

ClimbConfig::~ClimbConfig() {
  // @@protoc_insertion_point(destructor:accesscontrol.ClimbConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClimbConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete metric_;
  if (this != internal_default_instance()) delete policy_;
  if (this != internal_default_instance()) delete throttling_;
}

void ClimbConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClimbConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.ClimbConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
  if (GetArenaForAllocation() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && throttling_ != nullptr) {
    delete throttling_;
  }
  throttling_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClimbConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ClimbConfig.MetricConfig metric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ClimbConfig.TriggerPolicy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .accesscontrol.ClimbConfig.ClimbThrottling throttling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClimbConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.ClimbConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ClimbConfig.MetricConfig metric = 2;
  if (this->_internal_has_metric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metric(this),
        _Internal::metric(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ClimbConfig.TriggerPolicy policy = 3;
  if (this->_internal_has_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::policy(this),
        _Internal::policy(this).GetCachedSize(), target, stream);
  }

  // .accesscontrol.ClimbConfig.ClimbThrottling throttling = 4;
  if (this->_internal_has_throttling()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::throttling(this),
        _Internal::throttling(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.ClimbConfig)
  return target;
}

size_t ClimbConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.ClimbConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .accesscontrol.ClimbConfig.MetricConfig metric = 2;
  if (this->_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_);
  }

  // .accesscontrol.ClimbConfig.TriggerPolicy policy = 3;
  if (this->_internal_has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // .accesscontrol.ClimbConfig.ClimbThrottling throttling = 4;
  if (this->_internal_has_throttling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttling_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClimbConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClimbConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClimbConfig::GetClassData() const { return &_class_data_; }

void ClimbConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClimbConfig *>(to)->MergeFrom(
      static_cast<const ClimbConfig &>(from));
}


void ClimbConfig::MergeFrom(const ClimbConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.ClimbConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_metric()) {
    _internal_mutable_metric()->::accesscontrol::ClimbConfig_MetricConfig::MergeFrom(from._internal_metric());
  }
  if (from._internal_has_policy()) {
    _internal_mutable_policy()->::accesscontrol::ClimbConfig_TriggerPolicy::MergeFrom(from._internal_policy());
  }
  if (from._internal_has_throttling()) {
    _internal_mutable_throttling()->::accesscontrol::ClimbConfig_ClimbThrottling::MergeFrom(from._internal_throttling());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClimbConfig::CopyFrom(const ClimbConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.ClimbConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimbConfig::IsInitialized() const {
  return true;
}

void ClimbConfig::InternalSwap(ClimbConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClimbConfig, throttling_)
      + sizeof(ClimbConfig::throttling_)
      - PROTOBUF_FIELD_OFFSET(ClimbConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClimbConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[14]);
}

// ===================================================================

class RateLimitCluster::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const RateLimitCluster* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const RateLimitCluster* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
RateLimitCluster::_Internal::service(const RateLimitCluster* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
RateLimitCluster::_Internal::namespace_(const RateLimitCluster* msg) {
  return *msg->namespace__;
}
void RateLimitCluster::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void RateLimitCluster::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
RateLimitCluster::RateLimitCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:accesscontrol.RateLimitCluster)
}
RateLimitCluster::RateLimitCluster(const RateLimitCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:accesscontrol.RateLimitCluster)
}

inline void RateLimitCluster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
    reinterpret_cast<char*>(&service_)) + sizeof(namespace__));
}

RateLimitCluster::~RateLimitCluster() {
  // @@protoc_insertion_point(destructor:accesscontrol.RateLimitCluster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RateLimitCluster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
}

void RateLimitCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateLimitCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:accesscontrol.RateLimitCluster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimitCluster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RateLimitCluster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accesscontrol.RateLimitCluster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accesscontrol.RateLimitCluster)
  return target;
}

size_t RateLimitCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accesscontrol.RateLimitCluster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RateLimitCluster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RateLimitCluster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RateLimitCluster::GetClassData() const { return &_class_data_; }

void RateLimitCluster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RateLimitCluster *>(to)->MergeFrom(
      static_cast<const RateLimitCluster &>(from));
}


void RateLimitCluster::MergeFrom(const RateLimitCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accesscontrol.RateLimitCluster)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RateLimitCluster::CopyFrom(const RateLimitCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accesscontrol.RateLimitCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitCluster::IsInitialized() const {
  return true;
}

void RateLimitCluster::InternalSwap(RateLimitCluster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateLimitCluster, namespace__)
      + sizeof(RateLimitCluster::namespace__)
      - PROTOBUF_FIELD_OFFSET(RateLimitCluster, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimitCluster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_limiter_2eproto_getter, &descriptor_table_limiter_2eproto_once,
      file_level_metadata_limiter_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace accesscontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::accesscontrol::RateLimit*
Arena::CreateMaybeMessage< ::accesscontrol::RateLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::RateLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::Rule_SubsetEntry_DoNotUse*
Arena::CreateMaybeMessage< ::accesscontrol::Rule_SubsetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::Rule_SubsetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::Rule_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::accesscontrol::Rule_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::Rule_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::Rule*
Arena::CreateMaybeMessage< ::accesscontrol::Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::MatchString*
Arena::CreateMaybeMessage< ::accesscontrol::MatchString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::MatchString >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::Amount*
Arena::CreateMaybeMessage< ::accesscontrol::Amount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::Amount >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ReportPolicy*
Arena::CreateMaybeMessage< ::accesscontrol::ReportPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ReportPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::AmountAdjusterAlgorithm*
Arena::CreateMaybeMessage< ::accesscontrol::AmountAdjusterAlgorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::AmountAdjusterAlgorithm >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_MetricConfig*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_MetricConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_MetricConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_TriggerPolicy_ErrorRate >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_TriggerPolicy_SlowRate >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_TriggerPolicy*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_TriggerPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_TriggerPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig_ClimbThrottling*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig_ClimbThrottling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig_ClimbThrottling >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::ClimbConfig*
Arena::CreateMaybeMessage< ::accesscontrol::ClimbConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::ClimbConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::accesscontrol::RateLimitCluster*
Arena::CreateMaybeMessage< ::accesscontrol::RateLimitCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accesscontrol::RateLimitCluster >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
