// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadbalancer.proto

#include "loadbalancer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trafficcontrol {
PROTOBUF_CONSTEXPR Loadbalancer_OptionsEntry_DoNotUse::Loadbalancer_OptionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Loadbalancer_OptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Loadbalancer_OptionsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Loadbalancer_OptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Loadbalancer_OptionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Loadbalancer_OptionsEntry_DoNotUseDefaultTypeInternal _Loadbalancer_OptionsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Loadbalancer::Loadbalancer(
    ::_pbi::ConstantInitialized)
  : options_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , namespace__(nullptr)
  , service_(nullptr)
  , policy_(0)
{}
struct LoadbalancerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadbalancerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadbalancerDefaultTypeInternal() {}
  union {
    Loadbalancer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadbalancerDefaultTypeInternal _Loadbalancer_default_instance_;
}  // namespace trafficcontrol
static ::_pb::Metadata file_level_metadata_loadbalancer_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_loadbalancer_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_loadbalancer_2eproto = nullptr;

const uint32_t TableStruct_loadbalancer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, policy_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, options_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::trafficcontrol::Loadbalancer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trafficcontrol::_Loadbalancer_OptionsEntry_DoNotUse_default_instance_._instance,
  &::trafficcontrol::_Loadbalancer_default_instance_._instance,
};

const char descriptor_table_protodef_loadbalancer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022loadbalancer.proto\022\016trafficcontrol\032\036go"
  "ogle/protobuf/wrappers.proto\"\204\002\n\014Loadbal"
  "ancer\022/\n\tnamespace\030\001 \001(\0132\034.google.protob"
  "uf.StringValue\022-\n\007service\030\002 \001(\0132\034.google"
  ".protobuf.StringValue\022(\n\006policy\030\003 \001(\0162\030."
  "trafficcontrol.LbPolicy\022:\n\007options\030\004 \003(\013"
  "2).trafficcontrol.Loadbalancer.OptionsEn"
  "try\032.\n\014OptionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001*w\n\010LbPolicy\022\022\n\016WeightedRando"
  "m\020\000\022\014\n\010RingHash\020\001\022\n\n\006Maglev\020\002\022\010\n\004Hash\020\003\022"
  "\017\n\013LeastActive\020\004\022\024\n\020ShortestResponse\020\005\022\014"
  "\n\010Adaptive\020\006B\027Z\025api/v1/trafficcontrolb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_loadbalancer_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_loadbalancer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_loadbalancer_2eproto = {
    false, false, 485, descriptor_table_protodef_loadbalancer_2eproto,
    "loadbalancer.proto",
    &descriptor_table_loadbalancer_2eproto_once, descriptor_table_loadbalancer_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_loadbalancer_2eproto::offsets,
    file_level_metadata_loadbalancer_2eproto, file_level_enum_descriptors_loadbalancer_2eproto,
    file_level_service_descriptors_loadbalancer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_loadbalancer_2eproto_getter() {
  return &descriptor_table_loadbalancer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_loadbalancer_2eproto(&descriptor_table_loadbalancer_2eproto);
namespace trafficcontrol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LbPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_loadbalancer_2eproto);
  return file_level_enum_descriptors_loadbalancer_2eproto[0];
}
bool LbPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Loadbalancer_OptionsEntry_DoNotUse::Loadbalancer_OptionsEntry_DoNotUse() {}
Loadbalancer_OptionsEntry_DoNotUse::Loadbalancer_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Loadbalancer_OptionsEntry_DoNotUse::MergeFrom(const Loadbalancer_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Loadbalancer_OptionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_loadbalancer_2eproto_getter, &descriptor_table_loadbalancer_2eproto_once,
      file_level_metadata_loadbalancer_2eproto[0]);
}

// ===================================================================

class Loadbalancer::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Loadbalancer* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Loadbalancer* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Loadbalancer::_Internal::namespace_(const Loadbalancer* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Loadbalancer::_Internal::service(const Loadbalancer* msg) {
  return *msg->service_;
}
void Loadbalancer::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Loadbalancer::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
Loadbalancer::Loadbalancer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  options_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Loadbalancer::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Loadbalancer)
}
Loadbalancer::Loadbalancer(const Loadbalancer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Loadbalancer)
}

inline void Loadbalancer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(policy_));
}

Loadbalancer::~Loadbalancer() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Loadbalancer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Loadbalancer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  options_.Destruct();
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
}

void Loadbalancer::ArenaDtor(void* object) {
  Loadbalancer* _this = reinterpret_cast< Loadbalancer* >(object);
  _this->options_.Destruct();
}
void Loadbalancer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Loadbalancer::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Loadbalancer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Loadbalancer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.LbPolicy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::trafficcontrol::LbPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Loadbalancer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Loadbalancer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.LbPolicy policy = 3;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_policy(), target);
  }

  // map<string, string> options = 4;
  if (!this->_internal_options().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Loadbalancer_OptionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_options();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Loadbalancer.OptionsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "trafficcontrol.Loadbalancer.OptionsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Loadbalancer)
  return target;
}

size_t Loadbalancer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Loadbalancer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> options = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += Loadbalancer_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .trafficcontrol.LbPolicy policy = 3;
  if (this->_internal_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Loadbalancer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Loadbalancer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Loadbalancer::GetClassData() const { return &_class_data_; }

void Loadbalancer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Loadbalancer *>(to)->MergeFrom(
      static_cast<const Loadbalancer &>(from));
}


void Loadbalancer::MergeFrom(const Loadbalancer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Loadbalancer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Loadbalancer::CopyFrom(const Loadbalancer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Loadbalancer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loadbalancer::IsInitialized() const {
  return true;
}

void Loadbalancer::InternalSwap(Loadbalancer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Loadbalancer, policy_)
      + sizeof(Loadbalancer::policy_)
      - PROTOBUF_FIELD_OFFSET(Loadbalancer, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Loadbalancer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_loadbalancer_2eproto_getter, &descriptor_table_loadbalancer_2eproto_once,
      file_level_metadata_loadbalancer_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficcontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Loadbalancer_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::Loadbalancer*
Arena::CreateMaybeMessage< ::trafficcontrol::Loadbalancer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Loadbalancer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
