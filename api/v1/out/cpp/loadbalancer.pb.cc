// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadbalancer.proto

#include "loadbalancer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trafficcontrol {
PROTOBUF_CONSTEXPR Loadbalancer::Loadbalancer(
    ::_pbi::ConstantInitialized)
  : namespace__(nullptr)
  , service_(nullptr)
  , lb_config_(nullptr)
  , lb_policy_(0)
{}
struct LoadbalancerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadbalancerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadbalancerDefaultTypeInternal() {}
  union {
    Loadbalancer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadbalancerDefaultTypeInternal _Loadbalancer_default_instance_;
PROTOBUF_CONSTEXPR RingHashLbConfig::RingHashLbConfig(
    ::_pbi::ConstantInitialized)
  : hash_function_(nullptr)
  , min_ring_size_(nullptr)
  , max_ring_size_(nullptr){}
struct RingHashLbConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RingHashLbConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RingHashLbConfigDefaultTypeInternal() {}
  union {
    RingHashLbConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RingHashLbConfigDefaultTypeInternal _RingHashLbConfig_default_instance_;
PROTOBUF_CONSTEXPR MaglevLbConfig::MaglevLbConfig(
    ::_pbi::ConstantInitialized)
  : hash_function_(nullptr)
  , table_size_(nullptr){}
struct MaglevLbConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaglevLbConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaglevLbConfigDefaultTypeInternal() {}
  union {
    MaglevLbConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaglevLbConfigDefaultTypeInternal _MaglevLbConfig_default_instance_;
}  // namespace trafficcontrol
static ::_pb::Metadata file_level_metadata_loadbalancer_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_loadbalancer_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_loadbalancer_2eproto = nullptr;

const uint32_t TableStruct_loadbalancer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, namespace__),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, service_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, lb_policy_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::Loadbalancer, lb_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RingHashLbConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RingHashLbConfig, hash_function_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RingHashLbConfig, min_ring_size_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::RingHashLbConfig, max_ring_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MaglevLbConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MaglevLbConfig, hash_function_),
  PROTOBUF_FIELD_OFFSET(::trafficcontrol::MaglevLbConfig, table_size_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::trafficcontrol::Loadbalancer)},
  { 10, -1, -1, sizeof(::trafficcontrol::RingHashLbConfig)},
  { 19, -1, -1, sizeof(::trafficcontrol::MaglevLbConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trafficcontrol::_Loadbalancer_default_instance_._instance,
  &::trafficcontrol::_RingHashLbConfig_default_instance_._instance,
  &::trafficcontrol::_MaglevLbConfig_default_instance_._instance,
};

const char descriptor_table_protodef_loadbalancer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022loadbalancer.proto\022\016trafficcontrol\032\036go"
  "ogle/protobuf/wrappers.proto\032\031google/pro"
  "tobuf/any.proto\"\304\001\n\014Loadbalancer\022/\n\tname"
  "space\030\001 \001(\0132\034.google.protobuf.StringValu"
  "e\022-\n\007service\030\002 \001(\0132\034.google.protobuf.Str"
  "ingValue\022+\n\tlb_policy\030\003 \001(\0162\030.trafficcon"
  "trol.LbPolicy\022\'\n\tlb_config\030\004 \001(\0132\024.googl"
  "e.protobuf.Any\"\261\001\n\020RingHashLbConfig\0223\n\rh"
  "ash_function\030\001 \001(\0132\034.google.protobuf.Str"
  "ingValue\0223\n\rmin_ring_size\030\002 \001(\0132\034.google"
  ".protobuf.UInt64Value\0223\n\rmax_ring_size\030\003"
  " \001(\0132\034.google.protobuf.UInt64Value\"w\n\016Ma"
  "glevLbConfig\0223\n\rhash_function\030\001 \001(\0132\034.go"
  "ogle.protobuf.StringValue\0220\n\ntable_size\030"
  "\002 \001(\0132\034.google.protobuf.UInt64Value*w\n\010L"
  "bPolicy\022\022\n\016WeightedRandom\020\000\022\014\n\010RingHash\020"
  "\001\022\n\n\006Maglev\020\002\022\010\n\004Hash\020\003\022\017\n\013LeastActive\020\004"
  "\022\024\n\020ShortestResponse\020\005\022\014\n\010Adaptive\020\006B>\n%"
  "cn.polarismesh.polaris.trafficcontrolZ\025a"
  "pi/v1/trafficcontrolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_loadbalancer_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_loadbalancer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_loadbalancer_2eproto = {
    false, false, 788, descriptor_table_protodef_loadbalancer_2eproto,
    "loadbalancer.proto",
    &descriptor_table_loadbalancer_2eproto_once, descriptor_table_loadbalancer_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_loadbalancer_2eproto::offsets,
    file_level_metadata_loadbalancer_2eproto, file_level_enum_descriptors_loadbalancer_2eproto,
    file_level_service_descriptors_loadbalancer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_loadbalancer_2eproto_getter() {
  return &descriptor_table_loadbalancer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_loadbalancer_2eproto(&descriptor_table_loadbalancer_2eproto);
namespace trafficcontrol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LbPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_loadbalancer_2eproto);
  return file_level_enum_descriptors_loadbalancer_2eproto[0];
}
bool LbPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Loadbalancer::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Loadbalancer* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Loadbalancer* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& lb_config(const Loadbalancer* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Loadbalancer::_Internal::namespace_(const Loadbalancer* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Loadbalancer::_Internal::service(const Loadbalancer* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Loadbalancer::_Internal::lb_config(const Loadbalancer* msg) {
  return *msg->lb_config_;
}
void Loadbalancer::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Loadbalancer::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Loadbalancer::clear_lb_config() {
  if (GetArenaForAllocation() == nullptr && lb_config_ != nullptr) {
    delete lb_config_;
  }
  lb_config_ = nullptr;
}
Loadbalancer::Loadbalancer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.Loadbalancer)
}
Loadbalancer::Loadbalancer(const Loadbalancer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_lb_config()) {
    lb_config_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.lb_config_);
  } else {
    lb_config_ = nullptr;
  }
  lb_policy_ = from.lb_policy_;
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.Loadbalancer)
}

inline void Loadbalancer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lb_policy_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(lb_policy_));
}

Loadbalancer::~Loadbalancer() {
  // @@protoc_insertion_point(destructor:trafficcontrol.Loadbalancer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Loadbalancer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete lb_config_;
}

void Loadbalancer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Loadbalancer::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.Loadbalancer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lb_config_ != nullptr) {
    delete lb_config_;
  }
  lb_config_ = nullptr;
  lb_policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Loadbalancer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .trafficcontrol.LbPolicy lb_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lb_policy(static_cast<::trafficcontrol::LbPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any lb_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lb_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Loadbalancer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.Loadbalancer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .trafficcontrol.LbPolicy lb_policy = 3;
  if (this->_internal_lb_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_lb_policy(), target);
  }

  // .google.protobuf.Any lb_config = 4;
  if (this->_internal_has_lb_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lb_config(this),
        _Internal::lb_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.Loadbalancer)
  return target;
}

size_t Loadbalancer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.Loadbalancer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.Any lb_config = 4;
  if (this->_internal_has_lb_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lb_config_);
  }

  // .trafficcontrol.LbPolicy lb_policy = 3;
  if (this->_internal_lb_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lb_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Loadbalancer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Loadbalancer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Loadbalancer::GetClassData() const { return &_class_data_; }

void Loadbalancer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Loadbalancer *>(to)->MergeFrom(
      static_cast<const Loadbalancer &>(from));
}


void Loadbalancer::MergeFrom(const Loadbalancer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.Loadbalancer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_lb_config()) {
    _internal_mutable_lb_config()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_lb_config());
  }
  if (from._internal_lb_policy() != 0) {
    _internal_set_lb_policy(from._internal_lb_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Loadbalancer::CopyFrom(const Loadbalancer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.Loadbalancer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loadbalancer::IsInitialized() const {
  return true;
}

void Loadbalancer::InternalSwap(Loadbalancer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Loadbalancer, lb_policy_)
      + sizeof(Loadbalancer::lb_policy_)
      - PROTOBUF_FIELD_OFFSET(Loadbalancer, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Loadbalancer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_loadbalancer_2eproto_getter, &descriptor_table_loadbalancer_2eproto_once,
      file_level_metadata_loadbalancer_2eproto[0]);
}

// ===================================================================

class RingHashLbConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& hash_function(const RingHashLbConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_ring_size(const RingHashLbConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_ring_size(const RingHashLbConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
RingHashLbConfig::_Internal::hash_function(const RingHashLbConfig* msg) {
  return *msg->hash_function_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
RingHashLbConfig::_Internal::min_ring_size(const RingHashLbConfig* msg) {
  return *msg->min_ring_size_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
RingHashLbConfig::_Internal::max_ring_size(const RingHashLbConfig* msg) {
  return *msg->max_ring_size_;
}
void RingHashLbConfig::clear_hash_function() {
  if (GetArenaForAllocation() == nullptr && hash_function_ != nullptr) {
    delete hash_function_;
  }
  hash_function_ = nullptr;
}
void RingHashLbConfig::clear_min_ring_size() {
  if (GetArenaForAllocation() == nullptr && min_ring_size_ != nullptr) {
    delete min_ring_size_;
  }
  min_ring_size_ = nullptr;
}
void RingHashLbConfig::clear_max_ring_size() {
  if (GetArenaForAllocation() == nullptr && max_ring_size_ != nullptr) {
    delete max_ring_size_;
  }
  max_ring_size_ = nullptr;
}
RingHashLbConfig::RingHashLbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.RingHashLbConfig)
}
RingHashLbConfig::RingHashLbConfig(const RingHashLbConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash_function()) {
    hash_function_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.hash_function_);
  } else {
    hash_function_ = nullptr;
  }
  if (from._internal_has_min_ring_size()) {
    min_ring_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.min_ring_size_);
  } else {
    min_ring_size_ = nullptr;
  }
  if (from._internal_has_max_ring_size()) {
    max_ring_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_ring_size_);
  } else {
    max_ring_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.RingHashLbConfig)
}

inline void RingHashLbConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_ring_size_) -
    reinterpret_cast<char*>(&hash_function_)) + sizeof(max_ring_size_));
}

RingHashLbConfig::~RingHashLbConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.RingHashLbConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RingHashLbConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hash_function_;
  if (this != internal_default_instance()) delete min_ring_size_;
  if (this != internal_default_instance()) delete max_ring_size_;
}

void RingHashLbConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RingHashLbConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.RingHashLbConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hash_function_ != nullptr) {
    delete hash_function_;
  }
  hash_function_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_ring_size_ != nullptr) {
    delete min_ring_size_;
  }
  min_ring_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_ring_size_ != nullptr) {
    delete max_ring_size_;
  }
  max_ring_size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RingHashLbConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue hash_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value min_ring_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_ring_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_ring_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_ring_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RingHashLbConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.RingHashLbConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue hash_function = 1;
  if (this->_internal_has_hash_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hash_function(this),
        _Internal::hash_function(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value min_ring_size = 2;
  if (this->_internal_has_min_ring_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min_ring_size(this),
        _Internal::min_ring_size(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value max_ring_size = 3;
  if (this->_internal_has_max_ring_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::max_ring_size(this),
        _Internal::max_ring_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.RingHashLbConfig)
  return target;
}

size_t RingHashLbConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.RingHashLbConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue hash_function = 1;
  if (this->_internal_has_hash_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_function_);
  }

  // .google.protobuf.UInt64Value min_ring_size = 2;
  if (this->_internal_has_min_ring_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_ring_size_);
  }

  // .google.protobuf.UInt64Value max_ring_size = 3;
  if (this->_internal_has_max_ring_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_ring_size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RingHashLbConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RingHashLbConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RingHashLbConfig::GetClassData() const { return &_class_data_; }

void RingHashLbConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RingHashLbConfig *>(to)->MergeFrom(
      static_cast<const RingHashLbConfig &>(from));
}


void RingHashLbConfig::MergeFrom(const RingHashLbConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.RingHashLbConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash_function()) {
    _internal_mutable_hash_function()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_hash_function());
  }
  if (from._internal_has_min_ring_size()) {
    _internal_mutable_min_ring_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_min_ring_size());
  }
  if (from._internal_has_max_ring_size()) {
    _internal_mutable_max_ring_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_ring_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RingHashLbConfig::CopyFrom(const RingHashLbConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.RingHashLbConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingHashLbConfig::IsInitialized() const {
  return true;
}

void RingHashLbConfig::InternalSwap(RingHashLbConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RingHashLbConfig, max_ring_size_)
      + sizeof(RingHashLbConfig::max_ring_size_)
      - PROTOBUF_FIELD_OFFSET(RingHashLbConfig, hash_function_)>(
          reinterpret_cast<char*>(&hash_function_),
          reinterpret_cast<char*>(&other->hash_function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RingHashLbConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_loadbalancer_2eproto_getter, &descriptor_table_loadbalancer_2eproto_once,
      file_level_metadata_loadbalancer_2eproto[1]);
}

// ===================================================================

class MaglevLbConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& hash_function(const MaglevLbConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& table_size(const MaglevLbConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
MaglevLbConfig::_Internal::hash_function(const MaglevLbConfig* msg) {
  return *msg->hash_function_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
MaglevLbConfig::_Internal::table_size(const MaglevLbConfig* msg) {
  return *msg->table_size_;
}
void MaglevLbConfig::clear_hash_function() {
  if (GetArenaForAllocation() == nullptr && hash_function_ != nullptr) {
    delete hash_function_;
  }
  hash_function_ = nullptr;
}
void MaglevLbConfig::clear_table_size() {
  if (GetArenaForAllocation() == nullptr && table_size_ != nullptr) {
    delete table_size_;
  }
  table_size_ = nullptr;
}
MaglevLbConfig::MaglevLbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:trafficcontrol.MaglevLbConfig)
}
MaglevLbConfig::MaglevLbConfig(const MaglevLbConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash_function()) {
    hash_function_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.hash_function_);
  } else {
    hash_function_ = nullptr;
  }
  if (from._internal_has_table_size()) {
    table_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.table_size_);
  } else {
    table_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:trafficcontrol.MaglevLbConfig)
}

inline void MaglevLbConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_size_) -
    reinterpret_cast<char*>(&hash_function_)) + sizeof(table_size_));
}

MaglevLbConfig::~MaglevLbConfig() {
  // @@protoc_insertion_point(destructor:trafficcontrol.MaglevLbConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaglevLbConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hash_function_;
  if (this != internal_default_instance()) delete table_size_;
}

void MaglevLbConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaglevLbConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trafficcontrol.MaglevLbConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hash_function_ != nullptr) {
    delete hash_function_;
  }
  hash_function_ = nullptr;
  if (GetArenaForAllocation() == nullptr && table_size_ != nullptr) {
    delete table_size_;
  }
  table_size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaglevLbConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue hash_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value table_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaglevLbConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trafficcontrol.MaglevLbConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue hash_function = 1;
  if (this->_internal_has_hash_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hash_function(this),
        _Internal::hash_function(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value table_size = 2;
  if (this->_internal_has_table_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_size(this),
        _Internal::table_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trafficcontrol.MaglevLbConfig)
  return target;
}

size_t MaglevLbConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trafficcontrol.MaglevLbConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue hash_function = 1;
  if (this->_internal_has_hash_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_function_);
  }

  // .google.protobuf.UInt64Value table_size = 2;
  if (this->_internal_has_table_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaglevLbConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MaglevLbConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaglevLbConfig::GetClassData() const { return &_class_data_; }

void MaglevLbConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MaglevLbConfig *>(to)->MergeFrom(
      static_cast<const MaglevLbConfig &>(from));
}


void MaglevLbConfig::MergeFrom(const MaglevLbConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trafficcontrol.MaglevLbConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash_function()) {
    _internal_mutable_hash_function()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_hash_function());
  }
  if (from._internal_has_table_size()) {
    _internal_mutable_table_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_table_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaglevLbConfig::CopyFrom(const MaglevLbConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trafficcontrol.MaglevLbConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaglevLbConfig::IsInitialized() const {
  return true;
}

void MaglevLbConfig::InternalSwap(MaglevLbConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaglevLbConfig, table_size_)
      + sizeof(MaglevLbConfig::table_size_)
      - PROTOBUF_FIELD_OFFSET(MaglevLbConfig, hash_function_)>(
          reinterpret_cast<char*>(&hash_function_),
          reinterpret_cast<char*>(&other->hash_function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaglevLbConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_loadbalancer_2eproto_getter, &descriptor_table_loadbalancer_2eproto_once,
      file_level_metadata_loadbalancer_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficcontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trafficcontrol::Loadbalancer*
Arena::CreateMaybeMessage< ::trafficcontrol::Loadbalancer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::Loadbalancer >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::RingHashLbConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::RingHashLbConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::RingHashLbConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trafficcontrol::MaglevLbConfig*
Arena::CreateMaybeMessage< ::trafficcontrol::MaglevLbConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trafficcontrol::MaglevLbConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
