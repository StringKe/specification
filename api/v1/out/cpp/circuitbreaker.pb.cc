// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: circuitbreaker.proto

#include "circuitbreaker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace faulttolerance {
PROTOBUF_CONSTEXPR MatchString::MatchString(
    ::_pbi::ConstantInitialized)
  : value_(nullptr)
  , type_(0)
{}
struct MatchStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStringDefaultTypeInternal() {}
  union {
    MatchString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStringDefaultTypeInternal _MatchString_default_instance_;
PROTOBUF_CONSTEXPR CircuitBreaker::CircuitBreaker(
    ::_pbi::ConstantInitialized)
  : inbounds_()
  , outbounds_()
  , id_(nullptr)
  , version_(nullptr)
  , name_(nullptr)
  , namespace__(nullptr)
  , service_(nullptr)
  , service_namespace_(nullptr)
  , token_(nullptr)
  , owners_(nullptr)
  , business_(nullptr)
  , department_(nullptr)
  , comment_(nullptr)
  , ctime_(nullptr)
  , mtime_(nullptr)
  , revision_(nullptr){}
struct CircuitBreakerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircuitBreakerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircuitBreakerDefaultTypeInternal() {}
  union {
    CircuitBreaker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircuitBreakerDefaultTypeInternal _CircuitBreaker_default_instance_;
PROTOBUF_CONSTEXPR SourceMatcher::SourceMatcher(
    ::_pbi::ConstantInitialized)
  : service_(nullptr)
  , namespace__(nullptr){}
struct SourceMatcherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceMatcherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceMatcherDefaultTypeInternal() {}
  union {
    SourceMatcher _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceMatcherDefaultTypeInternal _SourceMatcher_default_instance_;
PROTOBUF_CONSTEXPR RecoverConfig::RecoverConfig(
    ::_pbi::ConstantInitialized)
  : requestrateafterhalfopen_()
  , sleepwindow_(nullptr)
  , maxretryafterhalfopen_(nullptr)
  , successratetoclose_(nullptr)
  , requestcountafterhalfopen_(nullptr)
  , outlierdetectwhen_(0)
{}
struct RecoverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoverConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoverConfigDefaultTypeInternal() {}
  union {
    RecoverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoverConfigDefaultTypeInternal _RecoverConfig_default_instance_;
PROTOBUF_CONSTEXPR CbPolicy_ErrRateConfig_SpecialConfig::CbPolicy_ErrRateConfig_SpecialConfig(
    ::_pbi::ConstantInitialized)
  : errorcodes_()
  , type_(nullptr)
  , errorratetopreserved_(nullptr)
  , errorratetoopen_(nullptr){}
struct CbPolicy_ErrRateConfig_SpecialConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbPolicy_ErrRateConfig_SpecialConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbPolicy_ErrRateConfig_SpecialConfigDefaultTypeInternal() {}
  union {
    CbPolicy_ErrRateConfig_SpecialConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbPolicy_ErrRateConfig_SpecialConfigDefaultTypeInternal _CbPolicy_ErrRateConfig_SpecialConfig_default_instance_;
PROTOBUF_CONSTEXPR CbPolicy_ErrRateConfig::CbPolicy_ErrRateConfig(
    ::_pbi::ConstantInitialized)
  : specials_()
  , enable_(nullptr)
  , requestvolumethreshold_(nullptr)
  , errorratetopreserved_(nullptr)
  , errorratetoopen_(nullptr){}
struct CbPolicy_ErrRateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbPolicy_ErrRateConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbPolicy_ErrRateConfigDefaultTypeInternal() {}
  union {
    CbPolicy_ErrRateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbPolicy_ErrRateConfigDefaultTypeInternal _CbPolicy_ErrRateConfig_default_instance_;
PROTOBUF_CONSTEXPR CbPolicy_SlowRateConfig::CbPolicy_SlowRateConfig(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , maxrt_(nullptr)
  , slowratetopreserved_(nullptr)
  , slowratetoopen_(nullptr){}
struct CbPolicy_SlowRateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbPolicy_SlowRateConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbPolicy_SlowRateConfigDefaultTypeInternal() {}
  union {
    CbPolicy_SlowRateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbPolicy_SlowRateConfigDefaultTypeInternal _CbPolicy_SlowRateConfig_default_instance_;
PROTOBUF_CONSTEXPR CbPolicy_ConsecutiveErrConfig::CbPolicy_ConsecutiveErrConfig(
    ::_pbi::ConstantInitialized)
  : enable_(nullptr)
  , consecutiveerrortopreserved_(nullptr)
  , consecutiveerrortoopen_(nullptr){}
struct CbPolicy_ConsecutiveErrConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbPolicy_ConsecutiveErrConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbPolicy_ConsecutiveErrConfigDefaultTypeInternal() {}
  union {
    CbPolicy_ConsecutiveErrConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbPolicy_ConsecutiveErrConfigDefaultTypeInternal _CbPolicy_ConsecutiveErrConfig_default_instance_;
PROTOBUF_CONSTEXPR CbPolicy::CbPolicy(
    ::_pbi::ConstantInitialized)
  : errorrate_(nullptr)
  , slowrate_(nullptr)
  , judgeduration_(nullptr)
  , maxejectionpercent_(nullptr)
  , consecutive_(nullptr){}
struct CbPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbPolicyDefaultTypeInternal() {}
  union {
    CbPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbPolicyDefaultTypeInternal _CbPolicy_default_instance_;
PROTOBUF_CONSTEXPR DestinationSet::DestinationSet(
    ::_pbi::ConstantInitialized)
  : service_(nullptr)
  , namespace__(nullptr)
  , recover_(nullptr)
  , policy_(nullptr)
  , method_(nullptr)
  , resource_(0)
{}
struct DestinationSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationSetDefaultTypeInternal() {}
  union {
    DestinationSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationSetDefaultTypeInternal _DestinationSet_default_instance_;
PROTOBUF_CONSTEXPR CbRule::CbRule(
    ::_pbi::ConstantInitialized)
  : sources_()
  , destinations_(){}
struct CbRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CbRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CbRuleDefaultTypeInternal() {}
  union {
    CbRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CbRuleDefaultTypeInternal _CbRule_default_instance_;
}  // namespace faulttolerance
static ::_pb::Metadata file_level_metadata_circuitbreaker_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_circuitbreaker_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_circuitbreaker_2eproto = nullptr;

const uint32_t TableStruct_circuitbreaker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::MatchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::MatchString, type_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::MatchString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, id_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, version_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, name_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, namespace__),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, service_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, service_namespace_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, inbounds_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, outbounds_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, token_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, owners_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, business_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, department_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, comment_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, ctime_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, mtime_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CircuitBreaker, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::SourceMatcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::SourceMatcher, service_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::SourceMatcher, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, sleepwindow_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, maxretryafterhalfopen_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, requestrateafterhalfopen_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, successratetoclose_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, requestcountafterhalfopen_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::RecoverConfig, outlierdetectwhen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig, type_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig, errorcodes_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig, errorratetopreserved_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig, errorratetoopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, requestvolumethreshold_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, errorratetopreserved_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, errorratetoopen_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ErrRateConfig, specials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_SlowRateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_SlowRateConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_SlowRateConfig, maxrt_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_SlowRateConfig, slowratetopreserved_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_SlowRateConfig, slowratetoopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ConsecutiveErrConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ConsecutiveErrConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ConsecutiveErrConfig, consecutiveerrortopreserved_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy_ConsecutiveErrConfig, consecutiveerrortoopen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, errorrate_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, slowrate_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, judgeduration_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, maxejectionpercent_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbPolicy, consecutive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, service_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, namespace__),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, resource_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, recover_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, policy_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::DestinationSet, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbRule, sources_),
  PROTOBUF_FIELD_OFFSET(::faulttolerance::CbRule, destinations_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::faulttolerance::MatchString)},
  { 8, -1, -1, sizeof(::faulttolerance::CircuitBreaker)},
  { 30, -1, -1, sizeof(::faulttolerance::SourceMatcher)},
  { 38, -1, -1, sizeof(::faulttolerance::RecoverConfig)},
  { 50, -1, -1, sizeof(::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig)},
  { 60, -1, -1, sizeof(::faulttolerance::CbPolicy_ErrRateConfig)},
  { 71, -1, -1, sizeof(::faulttolerance::CbPolicy_SlowRateConfig)},
  { 81, -1, -1, sizeof(::faulttolerance::CbPolicy_ConsecutiveErrConfig)},
  { 90, -1, -1, sizeof(::faulttolerance::CbPolicy)},
  { 101, -1, -1, sizeof(::faulttolerance::DestinationSet)},
  { 113, -1, -1, sizeof(::faulttolerance::CbRule)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::faulttolerance::_MatchString_default_instance_._instance,
  &::faulttolerance::_CircuitBreaker_default_instance_._instance,
  &::faulttolerance::_SourceMatcher_default_instance_._instance,
  &::faulttolerance::_RecoverConfig_default_instance_._instance,
  &::faulttolerance::_CbPolicy_ErrRateConfig_SpecialConfig_default_instance_._instance,
  &::faulttolerance::_CbPolicy_ErrRateConfig_default_instance_._instance,
  &::faulttolerance::_CbPolicy_SlowRateConfig_default_instance_._instance,
  &::faulttolerance::_CbPolicy_ConsecutiveErrConfig_default_instance_._instance,
  &::faulttolerance::_CbPolicy_default_instance_._instance,
  &::faulttolerance::_DestinationSet_default_instance_._instance,
  &::faulttolerance::_CbRule_default_instance_._instance,
};

const char descriptor_table_protodef_circuitbreaker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024circuitbreaker.proto\022\016faulttolerance\032\036"
  "google/protobuf/wrappers.proto\032\036google/p"
  "rotobuf/duration.proto\"\343\001\n\013MatchString\0229"
  "\n\004type\030\001 \001(\0162+.faulttolerance.MatchStrin"
  "g.MatchStringType\022+\n\005value\030\002 \001(\0132\034.googl"
  "e.protobuf.StringValue\"U\n\017MatchStringTyp"
  "e\022\t\n\005EXACT\020\000\022\t\n\005REGEX\020\001\022\016\n\nNOT_EQUALS\020\002\022"
  "\013\n\007INCLUDE\020\003\022\017\n\013NOT_INCLUDE\020\004\"\025\n\tValueTy"
  "pe\022\010\n\004TEXT\020\000\"\371\005\n\016CircuitBreaker\022(\n\002id\030\001 "
  "\001(\0132\034.google.protobuf.StringValue\022-\n\007ver"
  "sion\030\002 \001(\0132\034.google.protobuf.StringValue"
  "\022*\n\004name\030\003 \001(\0132\034.google.protobuf.StringV"
  "alue\022/\n\tnamespace\030\004 \001(\0132\034.google.protobu"
  "f.StringValue\022-\n\007service\030\005 \001(\0132\034.google."
  "protobuf.StringValue\0227\n\021service_namespac"
  "e\030\006 \001(\0132\034.google.protobuf.StringValue\022(\n"
  "\010inbounds\030\007 \003(\0132\026.faulttolerance.CbRule\022"
  ")\n\toutbounds\030\010 \003(\0132\026.faulttolerance.CbRu"
  "le\022+\n\005token\030\t \001(\0132\034.google.protobuf.Stri"
  "ngValue\022,\n\006owners\030\n \001(\0132\034.google.protobu"
  "f.StringValue\022.\n\010business\030\013 \001(\0132\034.google"
  ".protobuf.StringValue\0220\n\ndepartment\030\014 \001("
  "\0132\034.google.protobuf.StringValue\022-\n\007comme"
  "nt\030\r \001(\0132\034.google.protobuf.StringValue\022+"
  "\n\005ctime\030\016 \001(\0132\034.google.protobuf.StringVa"
  "lue\022+\n\005mtime\030\017 \001(\0132\034.google.protobuf.Str"
  "ingValue\022.\n\010revision\030\020 \001(\0132\034.google.prot"
  "obuf.StringValue\"o\n\rSourceMatcher\022-\n\007ser"
  "vice\030\001 \001(\0132\034.google.protobuf.StringValue"
  "\022/\n\tnamespace\030\002 \001(\0132\034.google.protobuf.St"
  "ringValue\"\277\003\n\rRecoverConfig\022.\n\013sleepWind"
  "ow\030\001 \001(\0132\031.google.protobuf.Duration\022;\n\025m"
  "axRetryAfterHalfOpen\030\002 \001(\0132\034.google.prot"
  "obuf.UInt32Value\022>\n\030requestRateAfterHalf"
  "Open\030\003 \003(\0132\034.google.protobuf.UInt32Value"
  "\0228\n\022successRateToClose\030\004 \001(\0132\034.google.pr"
  "otobuf.UInt32Value\022\?\n\031requestCountAfterH"
  "alfOpen\030\005 \001(\0132\034.google.protobuf.UInt32Va"
  "lue\022J\n\021outlierDetectWhen\030\006 \001(\0162/.faultto"
  "lerance.RecoverConfig.OutlierDetectWhen\""
  ":\n\021OutlierDetectWhen\022\t\n\005NEVER\020\000\022\016\n\nON_RE"
  "COVER\020\001\022\n\n\006ALWAYS\020\002\"\351\t\n\010CbPolicy\0229\n\terro"
  "rRate\030\001 \001(\0132&.faulttolerance.CbPolicy.Er"
  "rRateConfig\0229\n\010slowRate\030\002 \001(\0132\'.faulttol"
  "erance.CbPolicy.SlowRateConfig\0220\n\rjudgeD"
  "uration\030\003 \001(\0132\031.google.protobuf.Duration"
  "\0228\n\022maxEjectionPercent\030\004 \001(\0132\034.google.pr"
  "otobuf.UInt32Value\022B\n\013consecutive\030\005 \001(\0132"
  "-.faulttolerance.CbPolicy.ConsecutiveErr"
  "Config\032\226\004\n\rErrRateConfig\022*\n\006enable\030\001 \001(\013"
  "2\032.google.protobuf.BoolValue\022<\n\026requestV"
  "olumeThreshold\030\002 \001(\0132\034.google.protobuf.U"
  "Int32Value\022:\n\024errorRateToPreserved\030\003 \001(\013"
  "2\034.google.protobuf.UInt32Value\0225\n\017errorR"
  "ateToOpen\030\004 \001(\0132\034.google.protobuf.UInt32"
  "Value\022F\n\010specials\030\005 \003(\01324.faulttolerance"
  ".CbPolicy.ErrRateConfig.SpecialConfig\032\337\001"
  "\n\rSpecialConfig\022*\n\004type\030\001 \001(\0132\034.google.p"
  "rotobuf.StringValue\022/\n\nerrorCodes\030\002 \003(\0132"
  "\033.google.protobuf.Int64Value\022:\n\024errorRat"
  "eToPreserved\030\003 \001(\0132\034.google.protobuf.UIn"
  "t32Value\0225\n\017errorRateToOpen\030\004 \001(\0132\034.goog"
  "le.protobuf.UInt32Value\032\327\001\n\016SlowRateConf"
  "ig\022*\n\006enable\030\001 \001(\0132\032.google.protobuf.Boo"
  "lValue\022(\n\005maxRt\030\002 \001(\0132\031.google.protobuf."
  "Duration\0229\n\023slowRateToPreserved\030\003 \001(\0132\034."
  "google.protobuf.UInt32Value\0224\n\016slowRateT"
  "oOpen\030\004 \001(\0132\034.google.protobuf.UInt32Valu"
  "e\032\303\001\n\024ConsecutiveErrConfig\022*\n\006enable\030\001 \001"
  "(\0132\032.google.protobuf.BoolValue\022A\n\033consec"
  "utiveErrorToPreserved\030\002 \001(\0132\034.google.pro"
  "tobuf.UInt32Value\022<\n\026consecutiveErrorToO"
  "pen\030\003 \001(\0132\034.google.protobuf.UInt32Value\""
  "\344\002\n\016DestinationSet\022-\n\007service\030\001 \001(\0132\034.go"
  "ogle.protobuf.StringValue\022/\n\tnamespace\030\002"
  " \001(\0132\034.google.protobuf.StringValue\0229\n\010re"
  "source\030\004 \001(\0162\'.faulttolerance.Destinatio"
  "nSet.Resource\022.\n\007recover\030\n \001(\0132\035.faultto"
  "lerance.RecoverConfig\022(\n\006policy\030\013 \001(\0132\030."
  "faulttolerance.CbPolicy\022+\n\006method\030\014 \001(\0132"
  "\033.faulttolerance.MatchString\"$\n\010Resource"
  "\022\n\n\006SUBSET\020\000\022\014\n\010INSTANCE\020\001J\004\010\003\020\004J\004\010\005\020\n\"n"
  "\n\006CbRule\022.\n\007sources\030\001 \003(\0132\035.faulttoleran"
  "ce.SourceMatcher\0224\n\014destinations\030\002 \003(\0132\036"
  ".faulttolerance.DestinationSetB>\n%cn.pol"
  "arismesh.polaris.faulttoleranceZ\025api/v1/"
  "faulttoleranceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_circuitbreaker_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_circuitbreaker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_circuitbreaker_2eproto = {
    false, false, 3462, descriptor_table_protodef_circuitbreaker_2eproto,
    "circuitbreaker.proto",
    &descriptor_table_circuitbreaker_2eproto_once, descriptor_table_circuitbreaker_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_circuitbreaker_2eproto::offsets,
    file_level_metadata_circuitbreaker_2eproto, file_level_enum_descriptors_circuitbreaker_2eproto,
    file_level_service_descriptors_circuitbreaker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_circuitbreaker_2eproto_getter() {
  return &descriptor_table_circuitbreaker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_circuitbreaker_2eproto(&descriptor_table_circuitbreaker_2eproto);
namespace faulttolerance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_MatchStringType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuitbreaker_2eproto);
  return file_level_enum_descriptors_circuitbreaker_2eproto[0];
}
bool MatchString_MatchStringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_MatchStringType MatchString::EXACT;
constexpr MatchString_MatchStringType MatchString::REGEX;
constexpr MatchString_MatchStringType MatchString::NOT_EQUALS;
constexpr MatchString_MatchStringType MatchString::INCLUDE;
constexpr MatchString_MatchStringType MatchString::NOT_INCLUDE;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MIN;
constexpr MatchString_MatchStringType MatchString::MatchStringType_MAX;
constexpr int MatchString::MatchStringType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchString_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuitbreaker_2eproto);
  return file_level_enum_descriptors_circuitbreaker_2eproto[1];
}
bool MatchString_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MatchString_ValueType MatchString::TEXT;
constexpr MatchString_ValueType MatchString::ValueType_MIN;
constexpr MatchString_ValueType MatchString::ValueType_MAX;
constexpr int MatchString::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoverConfig_OutlierDetectWhen_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuitbreaker_2eproto);
  return file_level_enum_descriptors_circuitbreaker_2eproto[2];
}
bool RecoverConfig_OutlierDetectWhen_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecoverConfig_OutlierDetectWhen RecoverConfig::NEVER;
constexpr RecoverConfig_OutlierDetectWhen RecoverConfig::ON_RECOVER;
constexpr RecoverConfig_OutlierDetectWhen RecoverConfig::ALWAYS;
constexpr RecoverConfig_OutlierDetectWhen RecoverConfig::OutlierDetectWhen_MIN;
constexpr RecoverConfig_OutlierDetectWhen RecoverConfig::OutlierDetectWhen_MAX;
constexpr int RecoverConfig::OutlierDetectWhen_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DestinationSet_Resource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuitbreaker_2eproto);
  return file_level_enum_descriptors_circuitbreaker_2eproto[3];
}
bool DestinationSet_Resource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DestinationSet_Resource DestinationSet::SUBSET;
constexpr DestinationSet_Resource DestinationSet::INSTANCE;
constexpr DestinationSet_Resource DestinationSet::Resource_MIN;
constexpr DestinationSet_Resource DestinationSet::Resource_MAX;
constexpr int DestinationSet::Resource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MatchString::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& value(const MatchString* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
MatchString::_Internal::value(const MatchString* msg) {
  return *msg->value_;
}
void MatchString::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
MatchString::MatchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.MatchString)
}
MatchString::MatchString(const MatchString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:faulttolerance.MatchString)
}

inline void MatchString::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

MatchString::~MatchString() {
  // @@protoc_insertion_point(destructor:faulttolerance.MatchString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void MatchString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchString::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.MatchString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .faulttolerance.MatchString.MatchStringType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::faulttolerance::MatchString_MatchStringType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.MatchString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .faulttolerance.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.MatchString)
  return target;
}

size_t MatchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.MatchString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .faulttolerance.MatchString.MatchStringType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchString::GetClassData() const { return &_class_data_; }

void MatchString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchString *>(to)->MergeFrom(
      static_cast<const MatchString &>(from));
}


void MatchString::MergeFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.MatchString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchString::CopyFrom(const MatchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.MatchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchString::IsInitialized() const {
  return true;
}

void MatchString::InternalSwap(MatchString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchString, type_)
      + sizeof(MatchString::type_)
      - PROTOBUF_FIELD_OFFSET(MatchString, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[0]);
}

// ===================================================================

class CircuitBreaker::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& id(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& version(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& name(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service_namespace(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& token(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& owners(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& business(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& department(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& comment(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& ctime(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& mtime(const CircuitBreaker* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& revision(const CircuitBreaker* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::id(const CircuitBreaker* msg) {
  return *msg->id_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::version(const CircuitBreaker* msg) {
  return *msg->version_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::name(const CircuitBreaker* msg) {
  return *msg->name_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::namespace_(const CircuitBreaker* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::service(const CircuitBreaker* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::service_namespace(const CircuitBreaker* msg) {
  return *msg->service_namespace_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::token(const CircuitBreaker* msg) {
  return *msg->token_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::owners(const CircuitBreaker* msg) {
  return *msg->owners_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::business(const CircuitBreaker* msg) {
  return *msg->business_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::department(const CircuitBreaker* msg) {
  return *msg->department_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::comment(const CircuitBreaker* msg) {
  return *msg->comment_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::ctime(const CircuitBreaker* msg) {
  return *msg->ctime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::mtime(const CircuitBreaker* msg) {
  return *msg->mtime_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CircuitBreaker::_Internal::revision(const CircuitBreaker* msg) {
  return *msg->revision_;
}
void CircuitBreaker::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void CircuitBreaker::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void CircuitBreaker::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void CircuitBreaker::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void CircuitBreaker::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void CircuitBreaker::clear_service_namespace() {
  if (GetArenaForAllocation() == nullptr && service_namespace_ != nullptr) {
    delete service_namespace_;
  }
  service_namespace_ = nullptr;
}
void CircuitBreaker::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
void CircuitBreaker::clear_owners() {
  if (GetArenaForAllocation() == nullptr && owners_ != nullptr) {
    delete owners_;
  }
  owners_ = nullptr;
}
void CircuitBreaker::clear_business() {
  if (GetArenaForAllocation() == nullptr && business_ != nullptr) {
    delete business_;
  }
  business_ = nullptr;
}
void CircuitBreaker::clear_department() {
  if (GetArenaForAllocation() == nullptr && department_ != nullptr) {
    delete department_;
  }
  department_ = nullptr;
}
void CircuitBreaker::clear_comment() {
  if (GetArenaForAllocation() == nullptr && comment_ != nullptr) {
    delete comment_;
  }
  comment_ = nullptr;
}
void CircuitBreaker::clear_ctime() {
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
}
void CircuitBreaker::clear_mtime() {
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
}
void CircuitBreaker::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
CircuitBreaker::CircuitBreaker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inbounds_(arena),
  outbounds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CircuitBreaker)
}
CircuitBreaker::CircuitBreaker(const CircuitBreaker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inbounds_(from.inbounds_),
      outbounds_(from.outbounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_service_namespace()) {
    service_namespace_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_namespace_);
  } else {
    service_namespace_ = nullptr;
  }
  if (from._internal_has_token()) {
    token_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.token_);
  } else {
    token_ = nullptr;
  }
  if (from._internal_has_owners()) {
    owners_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.owners_);
  } else {
    owners_ = nullptr;
  }
  if (from._internal_has_business()) {
    business_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.business_);
  } else {
    business_ = nullptr;
  }
  if (from._internal_has_department()) {
    department_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.department_);
  } else {
    department_ = nullptr;
  }
  if (from._internal_has_comment()) {
    comment_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.comment_);
  } else {
    comment_ = nullptr;
  }
  if (from._internal_has_ctime()) {
    ctime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.ctime_);
  } else {
    ctime_ = nullptr;
  }
  if (from._internal_has_mtime()) {
    mtime_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.mtime_);
  } else {
    mtime_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CircuitBreaker)
}

inline void CircuitBreaker::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&id_)) + sizeof(revision_));
}

CircuitBreaker::~CircuitBreaker() {
  // @@protoc_insertion_point(destructor:faulttolerance.CircuitBreaker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CircuitBreaker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete service_namespace_;
  if (this != internal_default_instance()) delete token_;
  if (this != internal_default_instance()) delete owners_;
  if (this != internal_default_instance()) delete business_;
  if (this != internal_default_instance()) delete department_;
  if (this != internal_default_instance()) delete comment_;
  if (this != internal_default_instance()) delete ctime_;
  if (this != internal_default_instance()) delete mtime_;
  if (this != internal_default_instance()) delete revision_;
}

void CircuitBreaker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CircuitBreaker::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CircuitBreaker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inbounds_.Clear();
  outbounds_.Clear();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_namespace_ != nullptr) {
    delete service_namespace_;
  }
  service_namespace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owners_ != nullptr) {
    delete owners_;
  }
  owners_ = nullptr;
  if (GetArenaForAllocation() == nullptr && business_ != nullptr) {
    delete business_;
  }
  business_ = nullptr;
  if (GetArenaForAllocation() == nullptr && department_ != nullptr) {
    delete department_;
  }
  department_ = nullptr;
  if (GetArenaForAllocation() == nullptr && comment_ != nullptr) {
    delete comment_;
  }
  comment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ctime_ != nullptr) {
    delete ctime_;
  }
  ctime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mtime_ != nullptr) {
    delete mtime_;
  }
  mtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircuitBreaker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service_namespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_namespace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .faulttolerance.CbRule inbounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .faulttolerance.CbRule outbounds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue owners = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_owners(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue business = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_business(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue department = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_department(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue comment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue ctime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue mtime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue revision = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CircuitBreaker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CircuitBreaker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue version = 2;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 4;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 5;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service_namespace = 6;
  if (this->_internal_has_service_namespace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::service_namespace(this),
        _Internal::service_namespace(this).GetCachedSize(), target, stream);
  }

  // repeated .faulttolerance.CbRule inbounds = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_inbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .faulttolerance.CbRule outbounds = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outbounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_outbounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue token = 9;
  if (this->_internal_has_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue owners = 10;
  if (this->_internal_has_owners()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::owners(this),
        _Internal::owners(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue business = 11;
  if (this->_internal_has_business()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::business(this),
        _Internal::business(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue department = 12;
  if (this->_internal_has_department()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::department(this),
        _Internal::department(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue comment = 13;
  if (this->_internal_has_comment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::comment(this),
        _Internal::comment(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue ctime = 14;
  if (this->_internal_has_ctime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ctime(this),
        _Internal::ctime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue mtime = 15;
  if (this->_internal_has_mtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::mtime(this),
        _Internal::mtime(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue revision = 16;
  if (this->_internal_has_revision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::revision(this),
        _Internal::revision(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CircuitBreaker)
  return target;
}

size_t CircuitBreaker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CircuitBreaker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faulttolerance.CbRule inbounds = 7;
  total_size += 1UL * this->_internal_inbounds_size();
  for (const auto& msg : this->inbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .faulttolerance.CbRule outbounds = 8;
  total_size += 1UL * this->_internal_outbounds_size();
  for (const auto& msg : this->outbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.StringValue version = 2;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.StringValue namespace = 4;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 5;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue service_namespace = 6;
  if (this->_internal_has_service_namespace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_namespace_);
  }

  // .google.protobuf.StringValue token = 9;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // .google.protobuf.StringValue owners = 10;
  if (this->_internal_has_owners()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owners_);
  }

  // .google.protobuf.StringValue business = 11;
  if (this->_internal_has_business()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *business_);
  }

  // .google.protobuf.StringValue department = 12;
  if (this->_internal_has_department()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *department_);
  }

  // .google.protobuf.StringValue comment = 13;
  if (this->_internal_has_comment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comment_);
  }

  // .google.protobuf.StringValue ctime = 14;
  if (this->_internal_has_ctime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctime_);
  }

  // .google.protobuf.StringValue mtime = 15;
  if (this->_internal_has_mtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtime_);
  }

  // .google.protobuf.StringValue revision = 16;
  if (this->_internal_has_revision()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CircuitBreaker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CircuitBreaker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CircuitBreaker::GetClassData() const { return &_class_data_; }

void CircuitBreaker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CircuitBreaker *>(to)->MergeFrom(
      static_cast<const CircuitBreaker &>(from));
}


void CircuitBreaker::MergeFrom(const CircuitBreaker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CircuitBreaker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inbounds_.MergeFrom(from.inbounds_);
  outbounds_.MergeFrom(from.outbounds_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_id());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_version());
  }
  if (from._internal_has_name()) {
    _internal_mutable_name()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_name());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_service_namespace()) {
    _internal_mutable_service_namespace()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service_namespace());
  }
  if (from._internal_has_token()) {
    _internal_mutable_token()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_token());
  }
  if (from._internal_has_owners()) {
    _internal_mutable_owners()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_owners());
  }
  if (from._internal_has_business()) {
    _internal_mutable_business()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_business());
  }
  if (from._internal_has_department()) {
    _internal_mutable_department()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_department());
  }
  if (from._internal_has_comment()) {
    _internal_mutable_comment()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_comment());
  }
  if (from._internal_has_ctime()) {
    _internal_mutable_ctime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_ctime());
  }
  if (from._internal_has_mtime()) {
    _internal_mutable_mtime()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_mtime());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_revision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CircuitBreaker::CopyFrom(const CircuitBreaker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CircuitBreaker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitBreaker::IsInitialized() const {
  return true;
}

void CircuitBreaker::InternalSwap(CircuitBreaker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inbounds_.InternalSwap(&other->inbounds_);
  outbounds_.InternalSwap(&other->outbounds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircuitBreaker, revision_)
      + sizeof(CircuitBreaker::revision_)
      - PROTOBUF_FIELD_OFFSET(CircuitBreaker, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CircuitBreaker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[1]);
}

// ===================================================================

class SourceMatcher::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const SourceMatcher* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const SourceMatcher* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
SourceMatcher::_Internal::service(const SourceMatcher* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
SourceMatcher::_Internal::namespace_(const SourceMatcher* msg) {
  return *msg->namespace__;
}
void SourceMatcher::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void SourceMatcher::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
SourceMatcher::SourceMatcher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.SourceMatcher)
}
SourceMatcher::SourceMatcher(const SourceMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.SourceMatcher)
}

inline void SourceMatcher::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
    reinterpret_cast<char*>(&service_)) + sizeof(namespace__));
}

SourceMatcher::~SourceMatcher() {
  // @@protoc_insertion_point(destructor:faulttolerance.SourceMatcher)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceMatcher::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
}

void SourceMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SourceMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.SourceMatcher)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceMatcher::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceMatcher::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.SourceMatcher)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.SourceMatcher)
  return target;
}

size_t SourceMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.SourceMatcher)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceMatcher::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SourceMatcher::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceMatcher::GetClassData() const { return &_class_data_; }

void SourceMatcher::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SourceMatcher *>(to)->MergeFrom(
      static_cast<const SourceMatcher &>(from));
}


void SourceMatcher::MergeFrom(const SourceMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.SourceMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceMatcher::CopyFrom(const SourceMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.SourceMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceMatcher::IsInitialized() const {
  return true;
}

void SourceMatcher::InternalSwap(SourceMatcher* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceMatcher, namespace__)
      + sizeof(SourceMatcher::namespace__)
      - PROTOBUF_FIELD_OFFSET(SourceMatcher, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceMatcher::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[2]);
}

// ===================================================================

class RecoverConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& sleepwindow(const RecoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& maxretryafterhalfopen(const RecoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& successratetoclose(const RecoverConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& requestcountafterhalfopen(const RecoverConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
RecoverConfig::_Internal::sleepwindow(const RecoverConfig* msg) {
  return *msg->sleepwindow_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
RecoverConfig::_Internal::maxretryafterhalfopen(const RecoverConfig* msg) {
  return *msg->maxretryafterhalfopen_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
RecoverConfig::_Internal::successratetoclose(const RecoverConfig* msg) {
  return *msg->successratetoclose_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
RecoverConfig::_Internal::requestcountafterhalfopen(const RecoverConfig* msg) {
  return *msg->requestcountafterhalfopen_;
}
void RecoverConfig::clear_sleepwindow() {
  if (GetArenaForAllocation() == nullptr && sleepwindow_ != nullptr) {
    delete sleepwindow_;
  }
  sleepwindow_ = nullptr;
}
void RecoverConfig::clear_maxretryafterhalfopen() {
  if (GetArenaForAllocation() == nullptr && maxretryafterhalfopen_ != nullptr) {
    delete maxretryafterhalfopen_;
  }
  maxretryafterhalfopen_ = nullptr;
}
void RecoverConfig::clear_requestrateafterhalfopen() {
  requestrateafterhalfopen_.Clear();
}
void RecoverConfig::clear_successratetoclose() {
  if (GetArenaForAllocation() == nullptr && successratetoclose_ != nullptr) {
    delete successratetoclose_;
  }
  successratetoclose_ = nullptr;
}
void RecoverConfig::clear_requestcountafterhalfopen() {
  if (GetArenaForAllocation() == nullptr && requestcountafterhalfopen_ != nullptr) {
    delete requestcountafterhalfopen_;
  }
  requestcountafterhalfopen_ = nullptr;
}
RecoverConfig::RecoverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requestrateafterhalfopen_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.RecoverConfig)
}
RecoverConfig::RecoverConfig(const RecoverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requestrateafterhalfopen_(from.requestrateafterhalfopen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sleepwindow()) {
    sleepwindow_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.sleepwindow_);
  } else {
    sleepwindow_ = nullptr;
  }
  if (from._internal_has_maxretryafterhalfopen()) {
    maxretryafterhalfopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.maxretryafterhalfopen_);
  } else {
    maxretryafterhalfopen_ = nullptr;
  }
  if (from._internal_has_successratetoclose()) {
    successratetoclose_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.successratetoclose_);
  } else {
    successratetoclose_ = nullptr;
  }
  if (from._internal_has_requestcountafterhalfopen()) {
    requestcountafterhalfopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.requestcountafterhalfopen_);
  } else {
    requestcountafterhalfopen_ = nullptr;
  }
  outlierdetectwhen_ = from.outlierdetectwhen_;
  // @@protoc_insertion_point(copy_constructor:faulttolerance.RecoverConfig)
}

inline void RecoverConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sleepwindow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outlierdetectwhen_) -
    reinterpret_cast<char*>(&sleepwindow_)) + sizeof(outlierdetectwhen_));
}

RecoverConfig::~RecoverConfig() {
  // @@protoc_insertion_point(destructor:faulttolerance.RecoverConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sleepwindow_;
  if (this != internal_default_instance()) delete maxretryafterhalfopen_;
  if (this != internal_default_instance()) delete successratetoclose_;
  if (this != internal_default_instance()) delete requestcountafterhalfopen_;
}

void RecoverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecoverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.RecoverConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestrateafterhalfopen_.Clear();
  if (GetArenaForAllocation() == nullptr && sleepwindow_ != nullptr) {
    delete sleepwindow_;
  }
  sleepwindow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxretryafterhalfopen_ != nullptr) {
    delete maxretryafterhalfopen_;
  }
  maxretryafterhalfopen_ = nullptr;
  if (GetArenaForAllocation() == nullptr && successratetoclose_ != nullptr) {
    delete successratetoclose_;
  }
  successratetoclose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && requestcountafterhalfopen_ != nullptr) {
    delete requestcountafterhalfopen_;
  }
  requestcountafterhalfopen_ = nullptr;
  outlierdetectwhen_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoverConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration sleepWindow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sleepwindow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value maxRetryAfterHalfOpen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxretryafterhalfopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.UInt32Value requestRateAfterHalfOpen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requestrateafterhalfopen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value successRateToClose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_successratetoclose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value requestCountAfterHalfOpen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestcountafterhalfopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.RecoverConfig.OutlierDetectWhen outlierDetectWhen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_outlierdetectwhen(static_cast<::faulttolerance::RecoverConfig_OutlierDetectWhen>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoverConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.RecoverConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration sleepWindow = 1;
  if (this->_internal_has_sleepwindow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sleepwindow(this),
        _Internal::sleepwindow(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value maxRetryAfterHalfOpen = 2;
  if (this->_internal_has_maxretryafterhalfopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maxretryafterhalfopen(this),
        _Internal::maxretryafterhalfopen(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.UInt32Value requestRateAfterHalfOpen = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requestrateafterhalfopen_size()); i < n; i++) {
    const auto& repfield = this->_internal_requestrateafterhalfopen(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value successRateToClose = 4;
  if (this->_internal_has_successratetoclose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::successratetoclose(this),
        _Internal::successratetoclose(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value requestCountAfterHalfOpen = 5;
  if (this->_internal_has_requestcountafterhalfopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::requestcountafterhalfopen(this),
        _Internal::requestcountafterhalfopen(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.RecoverConfig.OutlierDetectWhen outlierDetectWhen = 6;
  if (this->_internal_outlierdetectwhen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_outlierdetectwhen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.RecoverConfig)
  return target;
}

size_t RecoverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.RecoverConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.UInt32Value requestRateAfterHalfOpen = 3;
  total_size += 1UL * this->_internal_requestrateafterhalfopen_size();
  for (const auto& msg : this->requestrateafterhalfopen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Duration sleepWindow = 1;
  if (this->_internal_has_sleepwindow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sleepwindow_);
  }

  // .google.protobuf.UInt32Value maxRetryAfterHalfOpen = 2;
  if (this->_internal_has_maxretryafterhalfopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxretryafterhalfopen_);
  }

  // .google.protobuf.UInt32Value successRateToClose = 4;
  if (this->_internal_has_successratetoclose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *successratetoclose_);
  }

  // .google.protobuf.UInt32Value requestCountAfterHalfOpen = 5;
  if (this->_internal_has_requestcountafterhalfopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestcountafterhalfopen_);
  }

  // .faulttolerance.RecoverConfig.OutlierDetectWhen outlierDetectWhen = 6;
  if (this->_internal_outlierdetectwhen() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_outlierdetectwhen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecoverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoverConfig::GetClassData() const { return &_class_data_; }

void RecoverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecoverConfig *>(to)->MergeFrom(
      static_cast<const RecoverConfig &>(from));
}


void RecoverConfig::MergeFrom(const RecoverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.RecoverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requestrateafterhalfopen_.MergeFrom(from.requestrateafterhalfopen_);
  if (from._internal_has_sleepwindow()) {
    _internal_mutable_sleepwindow()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_sleepwindow());
  }
  if (from._internal_has_maxretryafterhalfopen()) {
    _internal_mutable_maxretryafterhalfopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_maxretryafterhalfopen());
  }
  if (from._internal_has_successratetoclose()) {
    _internal_mutable_successratetoclose()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_successratetoclose());
  }
  if (from._internal_has_requestcountafterhalfopen()) {
    _internal_mutable_requestcountafterhalfopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_requestcountafterhalfopen());
  }
  if (from._internal_outlierdetectwhen() != 0) {
    _internal_set_outlierdetectwhen(from._internal_outlierdetectwhen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoverConfig::CopyFrom(const RecoverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.RecoverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverConfig::IsInitialized() const {
  return true;
}

void RecoverConfig::InternalSwap(RecoverConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requestrateafterhalfopen_.InternalSwap(&other->requestrateafterhalfopen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecoverConfig, outlierdetectwhen_)
      + sizeof(RecoverConfig::outlierdetectwhen_)
      - PROTOBUF_FIELD_OFFSET(RecoverConfig, sleepwindow_)>(
          reinterpret_cast<char*>(&sleepwindow_),
          reinterpret_cast<char*>(&other->sleepwindow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[3]);
}

// ===================================================================

class CbPolicy_ErrRateConfig_SpecialConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& type(const CbPolicy_ErrRateConfig_SpecialConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& errorratetopreserved(const CbPolicy_ErrRateConfig_SpecialConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& errorratetoopen(const CbPolicy_ErrRateConfig_SpecialConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
CbPolicy_ErrRateConfig_SpecialConfig::_Internal::type(const CbPolicy_ErrRateConfig_SpecialConfig* msg) {
  return *msg->type_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ErrRateConfig_SpecialConfig::_Internal::errorratetopreserved(const CbPolicy_ErrRateConfig_SpecialConfig* msg) {
  return *msg->errorratetopreserved_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ErrRateConfig_SpecialConfig::_Internal::errorratetoopen(const CbPolicy_ErrRateConfig_SpecialConfig* msg) {
  return *msg->errorratetoopen_;
}
void CbPolicy_ErrRateConfig_SpecialConfig::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void CbPolicy_ErrRateConfig_SpecialConfig::clear_errorcodes() {
  errorcodes_.Clear();
}
void CbPolicy_ErrRateConfig_SpecialConfig::clear_errorratetopreserved() {
  if (GetArenaForAllocation() == nullptr && errorratetopreserved_ != nullptr) {
    delete errorratetopreserved_;
  }
  errorratetopreserved_ = nullptr;
}
void CbPolicy_ErrRateConfig_SpecialConfig::clear_errorratetoopen() {
  if (GetArenaForAllocation() == nullptr && errorratetoopen_ != nullptr) {
    delete errorratetoopen_;
  }
  errorratetoopen_ = nullptr;
}
CbPolicy_ErrRateConfig_SpecialConfig::CbPolicy_ErrRateConfig_SpecialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  errorcodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
}
CbPolicy_ErrRateConfig_SpecialConfig::CbPolicy_ErrRateConfig_SpecialConfig(const CbPolicy_ErrRateConfig_SpecialConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errorcodes_(from.errorcodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_errorratetopreserved()) {
    errorratetopreserved_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.errorratetopreserved_);
  } else {
    errorratetopreserved_ = nullptr;
  }
  if (from._internal_has_errorratetoopen()) {
    errorratetoopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.errorratetoopen_);
  } else {
    errorratetoopen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
}

inline void CbPolicy_ErrRateConfig_SpecialConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorratetoopen_) -
    reinterpret_cast<char*>(&type_)) + sizeof(errorratetoopen_));
}

CbPolicy_ErrRateConfig_SpecialConfig::~CbPolicy_ErrRateConfig_SpecialConfig() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbPolicy_ErrRateConfig_SpecialConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete errorratetopreserved_;
  if (this != internal_default_instance()) delete errorratetoopen_;
}

void CbPolicy_ErrRateConfig_SpecialConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbPolicy_ErrRateConfig_SpecialConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcodes_.Clear();
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorratetopreserved_ != nullptr) {
    delete errorratetopreserved_;
  }
  errorratetopreserved_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorratetoopen_ != nullptr) {
    delete errorratetoopen_;
  }
  errorratetoopen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbPolicy_ErrRateConfig_SpecialConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Int64Value errorCodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errorcodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value errorRateToPreserved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorratetopreserved(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value errorRateToOpen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorratetoopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbPolicy_ErrRateConfig_SpecialConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue type = 1;
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Int64Value errorCodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_errorcodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_errorcodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value errorRateToPreserved = 3;
  if (this->_internal_has_errorratetopreserved()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorratetopreserved(this),
        _Internal::errorratetopreserved(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value errorRateToOpen = 4;
  if (this->_internal_has_errorratetoopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::errorratetoopen(this),
        _Internal::errorratetoopen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  return target;
}

size_t CbPolicy_ErrRateConfig_SpecialConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Int64Value errorCodes = 2;
  total_size += 1UL * this->_internal_errorcodes_size();
  for (const auto& msg : this->errorcodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue type = 1;
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .google.protobuf.UInt32Value errorRateToPreserved = 3;
  if (this->_internal_has_errorratetopreserved()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorratetopreserved_);
  }

  // .google.protobuf.UInt32Value errorRateToOpen = 4;
  if (this->_internal_has_errorratetoopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorratetoopen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbPolicy_ErrRateConfig_SpecialConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbPolicy_ErrRateConfig_SpecialConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbPolicy_ErrRateConfig_SpecialConfig::GetClassData() const { return &_class_data_; }

void CbPolicy_ErrRateConfig_SpecialConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbPolicy_ErrRateConfig_SpecialConfig *>(to)->MergeFrom(
      static_cast<const CbPolicy_ErrRateConfig_SpecialConfig &>(from));
}


void CbPolicy_ErrRateConfig_SpecialConfig::MergeFrom(const CbPolicy_ErrRateConfig_SpecialConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  errorcodes_.MergeFrom(from.errorcodes_);
  if (from._internal_has_type()) {
    _internal_mutable_type()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_type());
  }
  if (from._internal_has_errorratetopreserved()) {
    _internal_mutable_errorratetopreserved()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_errorratetopreserved());
  }
  if (from._internal_has_errorratetoopen()) {
    _internal_mutable_errorratetoopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_errorratetoopen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbPolicy_ErrRateConfig_SpecialConfig::CopyFrom(const CbPolicy_ErrRateConfig_SpecialConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbPolicy_ErrRateConfig_SpecialConfig::IsInitialized() const {
  return true;
}

void CbPolicy_ErrRateConfig_SpecialConfig::InternalSwap(CbPolicy_ErrRateConfig_SpecialConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  errorcodes_.InternalSwap(&other->errorcodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CbPolicy_ErrRateConfig_SpecialConfig, errorratetoopen_)
      + sizeof(CbPolicy_ErrRateConfig_SpecialConfig::errorratetoopen_)
      - PROTOBUF_FIELD_OFFSET(CbPolicy_ErrRateConfig_SpecialConfig, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CbPolicy_ErrRateConfig_SpecialConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[4]);
}

// ===================================================================

class CbPolicy_ErrRateConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const CbPolicy_ErrRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& requestvolumethreshold(const CbPolicy_ErrRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& errorratetopreserved(const CbPolicy_ErrRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& errorratetoopen(const CbPolicy_ErrRateConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
CbPolicy_ErrRateConfig::_Internal::enable(const CbPolicy_ErrRateConfig* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ErrRateConfig::_Internal::requestvolumethreshold(const CbPolicy_ErrRateConfig* msg) {
  return *msg->requestvolumethreshold_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ErrRateConfig::_Internal::errorratetopreserved(const CbPolicy_ErrRateConfig* msg) {
  return *msg->errorratetopreserved_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ErrRateConfig::_Internal::errorratetoopen(const CbPolicy_ErrRateConfig* msg) {
  return *msg->errorratetoopen_;
}
void CbPolicy_ErrRateConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void CbPolicy_ErrRateConfig::clear_requestvolumethreshold() {
  if (GetArenaForAllocation() == nullptr && requestvolumethreshold_ != nullptr) {
    delete requestvolumethreshold_;
  }
  requestvolumethreshold_ = nullptr;
}
void CbPolicy_ErrRateConfig::clear_errorratetopreserved() {
  if (GetArenaForAllocation() == nullptr && errorratetopreserved_ != nullptr) {
    delete errorratetopreserved_;
  }
  errorratetopreserved_ = nullptr;
}
void CbPolicy_ErrRateConfig::clear_errorratetoopen() {
  if (GetArenaForAllocation() == nullptr && errorratetoopen_ != nullptr) {
    delete errorratetoopen_;
  }
  errorratetoopen_ = nullptr;
}
CbPolicy_ErrRateConfig::CbPolicy_ErrRateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specials_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbPolicy.ErrRateConfig)
}
CbPolicy_ErrRateConfig::CbPolicy_ErrRateConfig(const CbPolicy_ErrRateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specials_(from.specials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_requestvolumethreshold()) {
    requestvolumethreshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.requestvolumethreshold_);
  } else {
    requestvolumethreshold_ = nullptr;
  }
  if (from._internal_has_errorratetopreserved()) {
    errorratetopreserved_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.errorratetopreserved_);
  } else {
    errorratetopreserved_ = nullptr;
  }
  if (from._internal_has_errorratetoopen()) {
    errorratetoopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.errorratetoopen_);
  } else {
    errorratetoopen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbPolicy.ErrRateConfig)
}

inline void CbPolicy_ErrRateConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorratetoopen_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(errorratetoopen_));
}

CbPolicy_ErrRateConfig::~CbPolicy_ErrRateConfig() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbPolicy.ErrRateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbPolicy_ErrRateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete requestvolumethreshold_;
  if (this != internal_default_instance()) delete errorratetopreserved_;
  if (this != internal_default_instance()) delete errorratetoopen_;
}

void CbPolicy_ErrRateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbPolicy_ErrRateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbPolicy.ErrRateConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specials_.Clear();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && requestvolumethreshold_ != nullptr) {
    delete requestvolumethreshold_;
  }
  requestvolumethreshold_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorratetopreserved_ != nullptr) {
    delete errorratetopreserved_;
  }
  errorratetopreserved_ = nullptr;
  if (GetArenaForAllocation() == nullptr && errorratetoopen_ != nullptr) {
    delete errorratetoopen_;
  }
  errorratetoopen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbPolicy_ErrRateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestvolumethreshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value errorRateToPreserved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorratetopreserved(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value errorRateToOpen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorratetoopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig specials = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbPolicy_ErrRateConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbPolicy.ErrRateConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
  if (this->_internal_has_requestvolumethreshold()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::requestvolumethreshold(this),
        _Internal::requestvolumethreshold(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value errorRateToPreserved = 3;
  if (this->_internal_has_errorratetopreserved()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::errorratetopreserved(this),
        _Internal::errorratetopreserved(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value errorRateToOpen = 4;
  if (this->_internal_has_errorratetoopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::errorratetoopen(this),
        _Internal::errorratetoopen(this).GetCachedSize(), target, stream);
  }

  // repeated .faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig specials = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_specials_size()); i < n; i++) {
    const auto& repfield = this->_internal_specials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbPolicy.ErrRateConfig)
  return target;
}

size_t CbPolicy_ErrRateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbPolicy.ErrRateConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig specials = 5;
  total_size += 1UL * this->_internal_specials_size();
  for (const auto& msg : this->specials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.UInt32Value requestVolumeThreshold = 2;
  if (this->_internal_has_requestvolumethreshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestvolumethreshold_);
  }

  // .google.protobuf.UInt32Value errorRateToPreserved = 3;
  if (this->_internal_has_errorratetopreserved()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorratetopreserved_);
  }

  // .google.protobuf.UInt32Value errorRateToOpen = 4;
  if (this->_internal_has_errorratetoopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorratetoopen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbPolicy_ErrRateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbPolicy_ErrRateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbPolicy_ErrRateConfig::GetClassData() const { return &_class_data_; }

void CbPolicy_ErrRateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbPolicy_ErrRateConfig *>(to)->MergeFrom(
      static_cast<const CbPolicy_ErrRateConfig &>(from));
}


void CbPolicy_ErrRateConfig::MergeFrom(const CbPolicy_ErrRateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbPolicy.ErrRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  specials_.MergeFrom(from.specials_);
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_requestvolumethreshold()) {
    _internal_mutable_requestvolumethreshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_requestvolumethreshold());
  }
  if (from._internal_has_errorratetopreserved()) {
    _internal_mutable_errorratetopreserved()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_errorratetopreserved());
  }
  if (from._internal_has_errorratetoopen()) {
    _internal_mutable_errorratetoopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_errorratetoopen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbPolicy_ErrRateConfig::CopyFrom(const CbPolicy_ErrRateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbPolicy.ErrRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbPolicy_ErrRateConfig::IsInitialized() const {
  return true;
}

void CbPolicy_ErrRateConfig::InternalSwap(CbPolicy_ErrRateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specials_.InternalSwap(&other->specials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CbPolicy_ErrRateConfig, errorratetoopen_)
      + sizeof(CbPolicy_ErrRateConfig::errorratetoopen_)
      - PROTOBUF_FIELD_OFFSET(CbPolicy_ErrRateConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CbPolicy_ErrRateConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[5]);
}

// ===================================================================

class CbPolicy_SlowRateConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const CbPolicy_SlowRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& maxrt(const CbPolicy_SlowRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& slowratetopreserved(const CbPolicy_SlowRateConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& slowratetoopen(const CbPolicy_SlowRateConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
CbPolicy_SlowRateConfig::_Internal::enable(const CbPolicy_SlowRateConfig* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CbPolicy_SlowRateConfig::_Internal::maxrt(const CbPolicy_SlowRateConfig* msg) {
  return *msg->maxrt_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_SlowRateConfig::_Internal::slowratetopreserved(const CbPolicy_SlowRateConfig* msg) {
  return *msg->slowratetopreserved_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_SlowRateConfig::_Internal::slowratetoopen(const CbPolicy_SlowRateConfig* msg) {
  return *msg->slowratetoopen_;
}
void CbPolicy_SlowRateConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void CbPolicy_SlowRateConfig::clear_maxrt() {
  if (GetArenaForAllocation() == nullptr && maxrt_ != nullptr) {
    delete maxrt_;
  }
  maxrt_ = nullptr;
}
void CbPolicy_SlowRateConfig::clear_slowratetopreserved() {
  if (GetArenaForAllocation() == nullptr && slowratetopreserved_ != nullptr) {
    delete slowratetopreserved_;
  }
  slowratetopreserved_ = nullptr;
}
void CbPolicy_SlowRateConfig::clear_slowratetoopen() {
  if (GetArenaForAllocation() == nullptr && slowratetoopen_ != nullptr) {
    delete slowratetoopen_;
  }
  slowratetoopen_ = nullptr;
}
CbPolicy_SlowRateConfig::CbPolicy_SlowRateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbPolicy.SlowRateConfig)
}
CbPolicy_SlowRateConfig::CbPolicy_SlowRateConfig(const CbPolicy_SlowRateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_maxrt()) {
    maxrt_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.maxrt_);
  } else {
    maxrt_ = nullptr;
  }
  if (from._internal_has_slowratetopreserved()) {
    slowratetopreserved_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.slowratetopreserved_);
  } else {
    slowratetopreserved_ = nullptr;
  }
  if (from._internal_has_slowratetoopen()) {
    slowratetoopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.slowratetoopen_);
  } else {
    slowratetoopen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbPolicy.SlowRateConfig)
}

inline void CbPolicy_SlowRateConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slowratetoopen_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(slowratetoopen_));
}

CbPolicy_SlowRateConfig::~CbPolicy_SlowRateConfig() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbPolicy.SlowRateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbPolicy_SlowRateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete maxrt_;
  if (this != internal_default_instance()) delete slowratetopreserved_;
  if (this != internal_default_instance()) delete slowratetoopen_;
}

void CbPolicy_SlowRateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbPolicy_SlowRateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbPolicy.SlowRateConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxrt_ != nullptr) {
    delete maxrt_;
  }
  maxrt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slowratetopreserved_ != nullptr) {
    delete slowratetopreserved_;
  }
  slowratetopreserved_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slowratetoopen_ != nullptr) {
    delete slowratetoopen_;
  }
  slowratetoopen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbPolicy_SlowRateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration maxRt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxrt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value slowRateToPreserved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowratetopreserved(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value slowRateToOpen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowratetoopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbPolicy_SlowRateConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbPolicy.SlowRateConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration maxRt = 2;
  if (this->_internal_has_maxrt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maxrt(this),
        _Internal::maxrt(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value slowRateToPreserved = 3;
  if (this->_internal_has_slowratetopreserved()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slowratetopreserved(this),
        _Internal::slowratetopreserved(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value slowRateToOpen = 4;
  if (this->_internal_has_slowratetoopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::slowratetoopen(this),
        _Internal::slowratetoopen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbPolicy.SlowRateConfig)
  return target;
}

size_t CbPolicy_SlowRateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbPolicy.SlowRateConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.Duration maxRt = 2;
  if (this->_internal_has_maxrt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxrt_);
  }

  // .google.protobuf.UInt32Value slowRateToPreserved = 3;
  if (this->_internal_has_slowratetopreserved()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowratetopreserved_);
  }

  // .google.protobuf.UInt32Value slowRateToOpen = 4;
  if (this->_internal_has_slowratetoopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowratetoopen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbPolicy_SlowRateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbPolicy_SlowRateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbPolicy_SlowRateConfig::GetClassData() const { return &_class_data_; }

void CbPolicy_SlowRateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbPolicy_SlowRateConfig *>(to)->MergeFrom(
      static_cast<const CbPolicy_SlowRateConfig &>(from));
}


void CbPolicy_SlowRateConfig::MergeFrom(const CbPolicy_SlowRateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbPolicy.SlowRateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_maxrt()) {
    _internal_mutable_maxrt()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_maxrt());
  }
  if (from._internal_has_slowratetopreserved()) {
    _internal_mutable_slowratetopreserved()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_slowratetopreserved());
  }
  if (from._internal_has_slowratetoopen()) {
    _internal_mutable_slowratetoopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_slowratetoopen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbPolicy_SlowRateConfig::CopyFrom(const CbPolicy_SlowRateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbPolicy.SlowRateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbPolicy_SlowRateConfig::IsInitialized() const {
  return true;
}

void CbPolicy_SlowRateConfig::InternalSwap(CbPolicy_SlowRateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CbPolicy_SlowRateConfig, slowratetoopen_)
      + sizeof(CbPolicy_SlowRateConfig::slowratetoopen_)
      - PROTOBUF_FIELD_OFFSET(CbPolicy_SlowRateConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CbPolicy_SlowRateConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[6]);
}

// ===================================================================

class CbPolicy_ConsecutiveErrConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable(const CbPolicy_ConsecutiveErrConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& consecutiveerrortopreserved(const CbPolicy_ConsecutiveErrConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& consecutiveerrortoopen(const CbPolicy_ConsecutiveErrConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
CbPolicy_ConsecutiveErrConfig::_Internal::enable(const CbPolicy_ConsecutiveErrConfig* msg) {
  return *msg->enable_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ConsecutiveErrConfig::_Internal::consecutiveerrortopreserved(const CbPolicy_ConsecutiveErrConfig* msg) {
  return *msg->consecutiveerrortopreserved_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy_ConsecutiveErrConfig::_Internal::consecutiveerrortoopen(const CbPolicy_ConsecutiveErrConfig* msg) {
  return *msg->consecutiveerrortoopen_;
}
void CbPolicy_ConsecutiveErrConfig::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
void CbPolicy_ConsecutiveErrConfig::clear_consecutiveerrortopreserved() {
  if (GetArenaForAllocation() == nullptr && consecutiveerrortopreserved_ != nullptr) {
    delete consecutiveerrortopreserved_;
  }
  consecutiveerrortopreserved_ = nullptr;
}
void CbPolicy_ConsecutiveErrConfig::clear_consecutiveerrortoopen() {
  if (GetArenaForAllocation() == nullptr && consecutiveerrortoopen_ != nullptr) {
    delete consecutiveerrortoopen_;
  }
  consecutiveerrortoopen_ = nullptr;
}
CbPolicy_ConsecutiveErrConfig::CbPolicy_ConsecutiveErrConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbPolicy.ConsecutiveErrConfig)
}
CbPolicy_ConsecutiveErrConfig::CbPolicy_ConsecutiveErrConfig(const CbPolicy_ConsecutiveErrConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enable()) {
    enable_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from._internal_has_consecutiveerrortopreserved()) {
    consecutiveerrortopreserved_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.consecutiveerrortopreserved_);
  } else {
    consecutiveerrortopreserved_ = nullptr;
  }
  if (from._internal_has_consecutiveerrortoopen()) {
    consecutiveerrortoopen_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.consecutiveerrortoopen_);
  } else {
    consecutiveerrortoopen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbPolicy.ConsecutiveErrConfig)
}

inline void CbPolicy_ConsecutiveErrConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consecutiveerrortoopen_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(consecutiveerrortoopen_));
}

CbPolicy_ConsecutiveErrConfig::~CbPolicy_ConsecutiveErrConfig() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbPolicy_ConsecutiveErrConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete consecutiveerrortopreserved_;
  if (this != internal_default_instance()) delete consecutiveerrortoopen_;
}

void CbPolicy_ConsecutiveErrConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbPolicy_ConsecutiveErrConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consecutiveerrortopreserved_ != nullptr) {
    delete consecutiveerrortopreserved_;
  }
  consecutiveerrortopreserved_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consecutiveerrortoopen_ != nullptr) {
    delete consecutiveerrortoopen_;
  }
  consecutiveerrortoopen_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbPolicy_ConsecutiveErrConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value consecutiveErrorToPreserved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consecutiveerrortopreserved(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value consecutiveErrorToOpen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consecutiveerrortoopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbPolicy_ConsecutiveErrConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enable(this),
        _Internal::enable(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value consecutiveErrorToPreserved = 2;
  if (this->_internal_has_consecutiveerrortopreserved()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consecutiveerrortopreserved(this),
        _Internal::consecutiveerrortopreserved(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value consecutiveErrorToOpen = 3;
  if (this->_internal_has_consecutiveerrortoopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::consecutiveerrortoopen(this),
        _Internal::consecutiveerrortoopen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  return target;
}

size_t CbPolicy_ConsecutiveErrConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // .google.protobuf.UInt32Value consecutiveErrorToPreserved = 2;
  if (this->_internal_has_consecutiveerrortopreserved()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consecutiveerrortopreserved_);
  }

  // .google.protobuf.UInt32Value consecutiveErrorToOpen = 3;
  if (this->_internal_has_consecutiveerrortoopen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consecutiveerrortoopen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbPolicy_ConsecutiveErrConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbPolicy_ConsecutiveErrConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbPolicy_ConsecutiveErrConfig::GetClassData() const { return &_class_data_; }

void CbPolicy_ConsecutiveErrConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbPolicy_ConsecutiveErrConfig *>(to)->MergeFrom(
      static_cast<const CbPolicy_ConsecutiveErrConfig &>(from));
}


void CbPolicy_ConsecutiveErrConfig::MergeFrom(const CbPolicy_ConsecutiveErrConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable());
  }
  if (from._internal_has_consecutiveerrortopreserved()) {
    _internal_mutable_consecutiveerrortopreserved()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_consecutiveerrortopreserved());
  }
  if (from._internal_has_consecutiveerrortoopen()) {
    _internal_mutable_consecutiveerrortoopen()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_consecutiveerrortoopen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbPolicy_ConsecutiveErrConfig::CopyFrom(const CbPolicy_ConsecutiveErrConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbPolicy.ConsecutiveErrConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbPolicy_ConsecutiveErrConfig::IsInitialized() const {
  return true;
}

void CbPolicy_ConsecutiveErrConfig::InternalSwap(CbPolicy_ConsecutiveErrConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CbPolicy_ConsecutiveErrConfig, consecutiveerrortoopen_)
      + sizeof(CbPolicy_ConsecutiveErrConfig::consecutiveerrortoopen_)
      - PROTOBUF_FIELD_OFFSET(CbPolicy_ConsecutiveErrConfig, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CbPolicy_ConsecutiveErrConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[7]);
}

// ===================================================================

class CbPolicy::_Internal {
 public:
  static const ::faulttolerance::CbPolicy_ErrRateConfig& errorrate(const CbPolicy* msg);
  static const ::faulttolerance::CbPolicy_SlowRateConfig& slowrate(const CbPolicy* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& judgeduration(const CbPolicy* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& maxejectionpercent(const CbPolicy* msg);
  static const ::faulttolerance::CbPolicy_ConsecutiveErrConfig& consecutive(const CbPolicy* msg);
};

const ::faulttolerance::CbPolicy_ErrRateConfig&
CbPolicy::_Internal::errorrate(const CbPolicy* msg) {
  return *msg->errorrate_;
}
const ::faulttolerance::CbPolicy_SlowRateConfig&
CbPolicy::_Internal::slowrate(const CbPolicy* msg) {
  return *msg->slowrate_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CbPolicy::_Internal::judgeduration(const CbPolicy* msg) {
  return *msg->judgeduration_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
CbPolicy::_Internal::maxejectionpercent(const CbPolicy* msg) {
  return *msg->maxejectionpercent_;
}
const ::faulttolerance::CbPolicy_ConsecutiveErrConfig&
CbPolicy::_Internal::consecutive(const CbPolicy* msg) {
  return *msg->consecutive_;
}
void CbPolicy::clear_judgeduration() {
  if (GetArenaForAllocation() == nullptr && judgeduration_ != nullptr) {
    delete judgeduration_;
  }
  judgeduration_ = nullptr;
}
void CbPolicy::clear_maxejectionpercent() {
  if (GetArenaForAllocation() == nullptr && maxejectionpercent_ != nullptr) {
    delete maxejectionpercent_;
  }
  maxejectionpercent_ = nullptr;
}
CbPolicy::CbPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbPolicy)
}
CbPolicy::CbPolicy(const CbPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_errorrate()) {
    errorrate_ = new ::faulttolerance::CbPolicy_ErrRateConfig(*from.errorrate_);
  } else {
    errorrate_ = nullptr;
  }
  if (from._internal_has_slowrate()) {
    slowrate_ = new ::faulttolerance::CbPolicy_SlowRateConfig(*from.slowrate_);
  } else {
    slowrate_ = nullptr;
  }
  if (from._internal_has_judgeduration()) {
    judgeduration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.judgeduration_);
  } else {
    judgeduration_ = nullptr;
  }
  if (from._internal_has_maxejectionpercent()) {
    maxejectionpercent_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.maxejectionpercent_);
  } else {
    maxejectionpercent_ = nullptr;
  }
  if (from._internal_has_consecutive()) {
    consecutive_ = new ::faulttolerance::CbPolicy_ConsecutiveErrConfig(*from.consecutive_);
  } else {
    consecutive_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbPolicy)
}

inline void CbPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errorrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consecutive_) -
    reinterpret_cast<char*>(&errorrate_)) + sizeof(consecutive_));
}

CbPolicy::~CbPolicy() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete errorrate_;
  if (this != internal_default_instance()) delete slowrate_;
  if (this != internal_default_instance()) delete judgeduration_;
  if (this != internal_default_instance()) delete maxejectionpercent_;
  if (this != internal_default_instance()) delete consecutive_;
}

void CbPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && errorrate_ != nullptr) {
    delete errorrate_;
  }
  errorrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slowrate_ != nullptr) {
    delete slowrate_;
  }
  slowrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && judgeduration_ != nullptr) {
    delete judgeduration_;
  }
  judgeduration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && maxejectionpercent_ != nullptr) {
    delete maxejectionpercent_;
  }
  maxejectionpercent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consecutive_ != nullptr) {
    delete consecutive_;
  }
  consecutive_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .faulttolerance.CbPolicy.ErrRateConfig errorRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.CbPolicy.SlowRateConfig slowRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration judgeDuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_judgeduration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value maxEjectionPercent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxejectionpercent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.CbPolicy.ConsecutiveErrConfig consecutive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_consecutive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .faulttolerance.CbPolicy.ErrRateConfig errorRate = 1;
  if (this->_internal_has_errorrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::errorrate(this),
        _Internal::errorrate(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.CbPolicy.SlowRateConfig slowRate = 2;
  if (this->_internal_has_slowrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slowrate(this),
        _Internal::slowrate(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration judgeDuration = 3;
  if (this->_internal_has_judgeduration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::judgeduration(this),
        _Internal::judgeduration(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value maxEjectionPercent = 4;
  if (this->_internal_has_maxejectionpercent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::maxejectionpercent(this),
        _Internal::maxejectionpercent(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.CbPolicy.ConsecutiveErrConfig consecutive = 5;
  if (this->_internal_has_consecutive()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::consecutive(this),
        _Internal::consecutive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbPolicy)
  return target;
}

size_t CbPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faulttolerance.CbPolicy.ErrRateConfig errorRate = 1;
  if (this->_internal_has_errorrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorrate_);
  }

  // .faulttolerance.CbPolicy.SlowRateConfig slowRate = 2;
  if (this->_internal_has_slowrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowrate_);
  }

  // .google.protobuf.Duration judgeDuration = 3;
  if (this->_internal_has_judgeduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *judgeduration_);
  }

  // .google.protobuf.UInt32Value maxEjectionPercent = 4;
  if (this->_internal_has_maxejectionpercent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxejectionpercent_);
  }

  // .faulttolerance.CbPolicy.ConsecutiveErrConfig consecutive = 5;
  if (this->_internal_has_consecutive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consecutive_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbPolicy::GetClassData() const { return &_class_data_; }

void CbPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbPolicy *>(to)->MergeFrom(
      static_cast<const CbPolicy &>(from));
}


void CbPolicy::MergeFrom(const CbPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorrate()) {
    _internal_mutable_errorrate()->::faulttolerance::CbPolicy_ErrRateConfig::MergeFrom(from._internal_errorrate());
  }
  if (from._internal_has_slowrate()) {
    _internal_mutable_slowrate()->::faulttolerance::CbPolicy_SlowRateConfig::MergeFrom(from._internal_slowrate());
  }
  if (from._internal_has_judgeduration()) {
    _internal_mutable_judgeduration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_judgeduration());
  }
  if (from._internal_has_maxejectionpercent()) {
    _internal_mutable_maxejectionpercent()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_maxejectionpercent());
  }
  if (from._internal_has_consecutive()) {
    _internal_mutable_consecutive()->::faulttolerance::CbPolicy_ConsecutiveErrConfig::MergeFrom(from._internal_consecutive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbPolicy::CopyFrom(const CbPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbPolicy::IsInitialized() const {
  return true;
}

void CbPolicy::InternalSwap(CbPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CbPolicy, consecutive_)
      + sizeof(CbPolicy::consecutive_)
      - PROTOBUF_FIELD_OFFSET(CbPolicy, errorrate_)>(
          reinterpret_cast<char*>(&errorrate_),
          reinterpret_cast<char*>(&other->errorrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CbPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[8]);
}

// ===================================================================

class DestinationSet::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const DestinationSet* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const DestinationSet* msg);
  static const ::faulttolerance::RecoverConfig& recover(const DestinationSet* msg);
  static const ::faulttolerance::CbPolicy& policy(const DestinationSet* msg);
  static const ::faulttolerance::MatchString& method(const DestinationSet* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
DestinationSet::_Internal::service(const DestinationSet* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
DestinationSet::_Internal::namespace_(const DestinationSet* msg) {
  return *msg->namespace__;
}
const ::faulttolerance::RecoverConfig&
DestinationSet::_Internal::recover(const DestinationSet* msg) {
  return *msg->recover_;
}
const ::faulttolerance::CbPolicy&
DestinationSet::_Internal::policy(const DestinationSet* msg) {
  return *msg->policy_;
}
const ::faulttolerance::MatchString&
DestinationSet::_Internal::method(const DestinationSet* msg) {
  return *msg->method_;
}
void DestinationSet::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void DestinationSet::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
DestinationSet::DestinationSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.DestinationSet)
}
DestinationSet::DestinationSet(const DestinationSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_recover()) {
    recover_ = new ::faulttolerance::RecoverConfig(*from.recover_);
  } else {
    recover_ = nullptr;
  }
  if (from._internal_has_policy()) {
    policy_ = new ::faulttolerance::CbPolicy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  if (from._internal_has_method()) {
    method_ = new ::faulttolerance::MatchString(*from.method_);
  } else {
    method_ = nullptr;
  }
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:faulttolerance.DestinationSet)
}

inline void DestinationSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&service_)) + sizeof(resource_));
}

DestinationSet::~DestinationSet() {
  // @@protoc_insertion_point(destructor:faulttolerance.DestinationSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestinationSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete recover_;
  if (this != internal_default_instance()) delete policy_;
  if (this != internal_default_instance()) delete method_;
}

void DestinationSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DestinationSet::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.DestinationSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && recover_ != nullptr) {
    delete recover_;
  }
  recover_ = nullptr;
  if (GetArenaForAllocation() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && method_ != nullptr) {
    delete method_;
  }
  method_ = nullptr;
  resource_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestinationSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.DestinationSet.Resource resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::faulttolerance::DestinationSet_Resource>(val));
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.RecoverConfig recover = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_recover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.CbPolicy policy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .faulttolerance.MatchString method = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestinationSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.DestinationSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.DestinationSet.Resource resource = 4;
  if (this->_internal_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_resource(), target);
  }

  // .faulttolerance.RecoverConfig recover = 10;
  if (this->_internal_has_recover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::recover(this),
        _Internal::recover(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.CbPolicy policy = 11;
  if (this->_internal_has_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::policy(this),
        _Internal::policy(this).GetCachedSize(), target, stream);
  }

  // .faulttolerance.MatchString method = 12;
  if (this->_internal_has_method()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::method(this),
        _Internal::method(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.DestinationSet)
  return target;
}

size_t DestinationSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.DestinationSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue service = 1;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .faulttolerance.RecoverConfig recover = 10;
  if (this->_internal_has_recover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recover_);
  }

  // .faulttolerance.CbPolicy policy = 11;
  if (this->_internal_has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // .faulttolerance.MatchString method = 12;
  if (this->_internal_has_method()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *method_);
  }

  // .faulttolerance.DestinationSet.Resource resource = 4;
  if (this->_internal_resource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestinationSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DestinationSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestinationSet::GetClassData() const { return &_class_data_; }

void DestinationSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DestinationSet *>(to)->MergeFrom(
      static_cast<const DestinationSet &>(from));
}


void DestinationSet::MergeFrom(const DestinationSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.DestinationSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_recover()) {
    _internal_mutable_recover()->::faulttolerance::RecoverConfig::MergeFrom(from._internal_recover());
  }
  if (from._internal_has_policy()) {
    _internal_mutable_policy()->::faulttolerance::CbPolicy::MergeFrom(from._internal_policy());
  }
  if (from._internal_has_method()) {
    _internal_mutable_method()->::faulttolerance::MatchString::MergeFrom(from._internal_method());
  }
  if (from._internal_resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestinationSet::CopyFrom(const DestinationSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.DestinationSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationSet::IsInitialized() const {
  return true;
}

void DestinationSet::InternalSwap(DestinationSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DestinationSet, resource_)
      + sizeof(DestinationSet::resource_)
      - PROTOBUF_FIELD_OFFSET(DestinationSet, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[9]);
}

// ===================================================================

class CbRule::_Internal {
 public:
};

CbRule::CbRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sources_(arena),
  destinations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:faulttolerance.CbRule)
}
CbRule::CbRule(const CbRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_),
      destinations_(from.destinations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faulttolerance.CbRule)
}

inline void CbRule::SharedCtor() {
}

CbRule::~CbRule() {
  // @@protoc_insertion_point(destructor:faulttolerance.CbRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CbRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CbRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CbRule::Clear() {
// @@protoc_insertion_point(message_clear_start:faulttolerance.CbRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  destinations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CbRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .faulttolerance.SourceMatcher sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .faulttolerance.DestinationSet destinations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destinations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CbRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faulttolerance.CbRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .faulttolerance.SourceMatcher sources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .faulttolerance.DestinationSet destinations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destinations_size()); i < n; i++) {
    const auto& repfield = this->_internal_destinations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faulttolerance.CbRule)
  return target;
}

size_t CbRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faulttolerance.CbRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faulttolerance.SourceMatcher sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .faulttolerance.DestinationSet destinations = 2;
  total_size += 1UL * this->_internal_destinations_size();
  for (const auto& msg : this->destinations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CbRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CbRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CbRule::GetClassData() const { return &_class_data_; }

void CbRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CbRule *>(to)->MergeFrom(
      static_cast<const CbRule &>(from));
}


void CbRule::MergeFrom(const CbRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faulttolerance.CbRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  destinations_.MergeFrom(from.destinations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CbRule::CopyFrom(const CbRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faulttolerance.CbRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbRule::IsInitialized() const {
  return true;
}

void CbRule::InternalSwap(CbRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
  destinations_.InternalSwap(&other->destinations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CbRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuitbreaker_2eproto_getter, &descriptor_table_circuitbreaker_2eproto_once,
      file_level_metadata_circuitbreaker_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace faulttolerance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::faulttolerance::MatchString*
Arena::CreateMaybeMessage< ::faulttolerance::MatchString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::MatchString >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CircuitBreaker*
Arena::CreateMaybeMessage< ::faulttolerance::CircuitBreaker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CircuitBreaker >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::SourceMatcher*
Arena::CreateMaybeMessage< ::faulttolerance::SourceMatcher >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::SourceMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::RecoverConfig*
Arena::CreateMaybeMessage< ::faulttolerance::RecoverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::RecoverConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig*
Arena::CreateMaybeMessage< ::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbPolicy_ErrRateConfig_SpecialConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbPolicy_ErrRateConfig*
Arena::CreateMaybeMessage< ::faulttolerance::CbPolicy_ErrRateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbPolicy_ErrRateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbPolicy_SlowRateConfig*
Arena::CreateMaybeMessage< ::faulttolerance::CbPolicy_SlowRateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbPolicy_SlowRateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbPolicy_ConsecutiveErrConfig*
Arena::CreateMaybeMessage< ::faulttolerance::CbPolicy_ConsecutiveErrConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbPolicy_ConsecutiveErrConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbPolicy*
Arena::CreateMaybeMessage< ::faulttolerance::CbPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::DestinationSet*
Arena::CreateMaybeMessage< ::faulttolerance::DestinationSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::DestinationSet >(arena);
}
template<> PROTOBUF_NOINLINE ::faulttolerance::CbRule*
Arena::CreateMaybeMessage< ::faulttolerance::CbRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faulttolerance::CbRule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
