// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_instance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_instance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_instance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_instance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instance_2eproto;
namespace service {
class Instance;
struct InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class Instance_MetadataEntry_DoNotUse;
struct Instance_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Instance_MetadataEntry_DoNotUseDefaultTypeInternal _Instance_MetadataEntry_DoNotUse_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::Instance* Arena::CreateMaybeMessage<::service::Instance>(Arena*);
template<> ::service::Instance_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::service::Instance_MetadataEntry_DoNotUse>(Arena*);
template<> ::service::Location* Arena::CreateMaybeMessage<::service::Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kZoneFieldNumber = 2,
    kCampusFieldNumber = 3,
  };
  // .google.protobuf.StringValue region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& region() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_region();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_region();
  void set_allocated_region(::PROTOBUF_NAMESPACE_ID::StringValue* region);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_region() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::PROTOBUF_NAMESPACE_ID::StringValue* region);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_region();

  // .google.protobuf.StringValue zone = 2;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& zone() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_zone();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_zone();
  void set_allocated_zone(::PROTOBUF_NAMESPACE_ID::StringValue* zone);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_zone() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_zone();
  public:
  void unsafe_arena_set_allocated_zone(
      ::PROTOBUF_NAMESPACE_ID::StringValue* zone);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_zone();

  // .google.protobuf.StringValue campus = 3;
  bool has_campus() const;
  private:
  bool _internal_has_campus() const;
  public:
  void clear_campus();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& campus() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_campus();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_campus();
  void set_allocated_campus(::PROTOBUF_NAMESPACE_ID::StringValue* campus);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_campus() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_campus();
  public:
  void unsafe_arena_set_allocated_campus(
      ::PROTOBUF_NAMESPACE_ID::StringValue* campus);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_campus();

  // @@protoc_insertion_point(class_scope:service.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* region_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* zone_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* campus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instance_2eproto;
};
// -------------------------------------------------------------------

class Instance_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Instance_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Instance_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Instance_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Instance_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Instance_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Instance_MetadataEntry_DoNotUse& other);
  static const Instance_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Instance_MetadataEntry_DoNotUse*>(&_Instance_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "service.Instance.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "service.Instance.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_instance_2eproto;
};

// -------------------------------------------------------------------

class Instance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.Instance) */ {
 public:
  inline Instance() : Instance(nullptr) {}
  ~Instance() override;
  explicit PROTOBUF_CONSTEXPR Instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instance(const Instance& from);
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instance& operator=(Instance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(Instance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Instance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.Instance";
  }
  protected:
  explicit Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 11,
    kNamespaceFieldNumber = 1,
    kServiceFieldNumber = 2,
    kHostFieldNumber = 3,
    kPortFieldNumber = 4,
    kProtocolFieldNumber = 5,
    kVersionFieldNumber = 6,
    kWeightFieldNumber = 7,
    kHealthyFieldNumber = 8,
    kIsolateFieldNumber = 9,
    kLocationFieldNumber = 10,
  };
  // map<string, string> metadata = 11;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // .google.protobuf.StringValue namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_namespace_();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_namespace_();
  void set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_namespace_() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_namespace_();
  public:
  void unsafe_arena_set_allocated_namespace_(
      ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_namespace_();

  // .google.protobuf.StringValue service = 2;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& service() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_service();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_service();
  void set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_service() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_service();
  public:
  void unsafe_arena_set_allocated_service(
      ::PROTOBUF_NAMESPACE_ID::StringValue* service);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_service();

  // .google.protobuf.StringValue host = 3;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& host() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_host();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_host();
  void set_allocated_host(::PROTOBUF_NAMESPACE_ID::StringValue* host);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_host() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::PROTOBUF_NAMESPACE_ID::StringValue* host);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_host();

  // .google.protobuf.UInt32Value port = 4;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& port() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_port();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_port();
  void set_allocated_port(::PROTOBUF_NAMESPACE_ID::UInt32Value* port);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_port() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_port();
  public:
  void unsafe_arena_set_allocated_port(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* port);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_port();

  // .google.protobuf.StringValue protocol = 5;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& protocol() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_protocol();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_protocol();
  void set_allocated_protocol(::PROTOBUF_NAMESPACE_ID::StringValue* protocol);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_protocol() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_protocol();
  public:
  void unsafe_arena_set_allocated_protocol(
      ::PROTOBUF_NAMESPACE_ID::StringValue* protocol);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_protocol();

  // .google.protobuf.StringValue version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& version() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_version();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_version();
  void set_allocated_version(::PROTOBUF_NAMESPACE_ID::StringValue* version);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_version() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::PROTOBUF_NAMESPACE_ID::StringValue* version);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_version();

  // .google.protobuf.UInt32Value weight = 7;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& weight() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_weight();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_weight();
  void set_allocated_weight(::PROTOBUF_NAMESPACE_ID::UInt32Value* weight);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_weight() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* weight);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_weight();

  // .google.protobuf.BoolValue healthy = 8;
  bool has_healthy() const;
  private:
  bool _internal_has_healthy() const;
  public:
  void clear_healthy();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& healthy() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_healthy();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_healthy();
  void set_allocated_healthy(::PROTOBUF_NAMESPACE_ID::BoolValue* healthy);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_healthy() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_healthy();
  public:
  void unsafe_arena_set_allocated_healthy(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* healthy);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_healthy();

  // .google.protobuf.BoolValue isolate = 9;
  bool has_isolate() const;
  private:
  bool _internal_has_isolate() const;
  public:
  void clear_isolate();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& isolate() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_isolate();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_isolate();
  void set_allocated_isolate(::PROTOBUF_NAMESPACE_ID::BoolValue* isolate);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_isolate() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_isolate();
  public:
  void unsafe_arena_set_allocated_isolate(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* isolate);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_isolate();

  // .service.Location location = 10;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::service::Location& location() const;
  PROTOBUF_NODISCARD ::service::Location* release_location();
  ::service::Location* mutable_location();
  void set_allocated_location(::service::Location* location);
  private:
  const ::service::Location& _internal_location() const;
  ::service::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::service::Location* location);
  ::service::Location* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:service.Instance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Instance_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* namespace__;
  ::PROTOBUF_NAMESPACE_ID::StringValue* service_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* host_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* port_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* protocol_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* version_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* weight_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* healthy_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* isolate_;
  ::service::Location* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// .google.protobuf.StringValue region = 1;
inline bool Location::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool Location::has_region() const {
  return _internal_has_region();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::_internal_region() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = region_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::region() const {
  // @@protoc_insertion_point(field_get:service.Location.region)
  return _internal_region();
}
inline void Location::unsafe_arena_set_allocated_region(
    ::PROTOBUF_NAMESPACE_ID::StringValue* region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Location.region)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::release_region() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = region_;
  region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:service.Location.region)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    region_ = p;
  }
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::mutable_region() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:service.Location.region)
  return _msg;
}
inline void Location::set_allocated_region(::PROTOBUF_NAMESPACE_ID::StringValue* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region));
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:service.Location.region)
}

// .google.protobuf.StringValue zone = 2;
inline bool Location::_internal_has_zone() const {
  return this != internal_default_instance() && zone_ != nullptr;
}
inline bool Location::has_zone() const {
  return _internal_has_zone();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::_internal_zone() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = zone_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::zone() const {
  // @@protoc_insertion_point(field_get:service.Location.zone)
  return _internal_zone();
}
inline void Location::unsafe_arena_set_allocated_zone(
    ::PROTOBUF_NAMESPACE_ID::StringValue* zone) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone_);
  }
  zone_ = zone;
  if (zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Location.zone)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::release_zone() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = zone_;
  zone_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::unsafe_arena_release_zone() {
  // @@protoc_insertion_point(field_release:service.Location.zone)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = zone_;
  zone_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::_internal_mutable_zone() {
  
  if (zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    zone_ = p;
  }
  return zone_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::mutable_zone() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:service.Location.zone)
  return _msg;
}
inline void Location::set_allocated_zone(::PROTOBUF_NAMESPACE_ID::StringValue* zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone_);
  }
  if (zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zone));
    if (message_arena != submessage_arena) {
      zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone, submessage_arena);
    }
    
  } else {
    
  }
  zone_ = zone;
  // @@protoc_insertion_point(field_set_allocated:service.Location.zone)
}

// .google.protobuf.StringValue campus = 3;
inline bool Location::_internal_has_campus() const {
  return this != internal_default_instance() && campus_ != nullptr;
}
inline bool Location::has_campus() const {
  return _internal_has_campus();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::_internal_campus() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = campus_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Location::campus() const {
  // @@protoc_insertion_point(field_get:service.Location.campus)
  return _internal_campus();
}
inline void Location::unsafe_arena_set_allocated_campus(
    ::PROTOBUF_NAMESPACE_ID::StringValue* campus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(campus_);
  }
  campus_ = campus;
  if (campus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Location.campus)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::release_campus() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = campus_;
  campus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::unsafe_arena_release_campus() {
  // @@protoc_insertion_point(field_release:service.Location.campus)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = campus_;
  campus_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::_internal_mutable_campus() {
  
  if (campus_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    campus_ = p;
  }
  return campus_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Location::mutable_campus() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_campus();
  // @@protoc_insertion_point(field_mutable:service.Location.campus)
  return _msg;
}
inline void Location::set_allocated_campus(::PROTOBUF_NAMESPACE_ID::StringValue* campus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(campus_);
  }
  if (campus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(campus));
    if (message_arena != submessage_arena) {
      campus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, campus, submessage_arena);
    }
    
  } else {
    
  }
  campus_ = campus;
  // @@protoc_insertion_point(field_set_allocated:service.Location.campus)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Instance

// .google.protobuf.StringValue namespace = 1;
inline bool Instance::_internal_has_namespace_() const {
  return this != internal_default_instance() && namespace__ != nullptr;
}
inline bool Instance::has_namespace_() const {
  return _internal_has_namespace_();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::_internal_namespace_() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = namespace__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::namespace_() const {
  // @@protoc_insertion_point(field_get:service.Instance.namespace)
  return _internal_namespace_();
}
inline void Instance::unsafe_arena_set_allocated_namespace_(
    ::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  namespace__ = namespace_;
  if (namespace_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.namespace)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::release_namespace_() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_release:service.Instance.namespace)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = namespace__;
  namespace__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::_internal_mutable_namespace_() {
  
  if (namespace__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    namespace__ = p;
  }
  return namespace__;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::mutable_namespace_() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:service.Instance.namespace)
  return _msg;
}
inline void Instance::set_allocated_namespace_(::PROTOBUF_NAMESPACE_ID::StringValue* namespace_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace__);
  }
  if (namespace_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(namespace_));
    if (message_arena != submessage_arena) {
      namespace_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.namespace)
}

// .google.protobuf.StringValue service = 2;
inline bool Instance::_internal_has_service() const {
  return this != internal_default_instance() && service_ != nullptr;
}
inline bool Instance::has_service() const {
  return _internal_has_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::_internal_service() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = service_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::service() const {
  // @@protoc_insertion_point(field_get:service.Instance.service)
  return _internal_service();
}
inline void Instance::unsafe_arena_set_allocated_service(
    ::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.service)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::release_service() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::unsafe_arena_release_service() {
  // @@protoc_insertion_point(field_release:service.Instance.service)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = service_;
  service_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::_internal_mutable_service() {
  
  if (service_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    service_ = p;
  }
  return service_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::mutable_service() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:service.Instance.service)
  return _msg;
}
inline void Instance::set_allocated_service(::PROTOBUF_NAMESPACE_ID::StringValue* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service));
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.service)
}

// .google.protobuf.StringValue host = 3;
inline bool Instance::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool Instance::has_host() const {
  return _internal_has_host();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::_internal_host() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = host_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::host() const {
  // @@protoc_insertion_point(field_get:service.Instance.host)
  return _internal_host();
}
inline void Instance::unsafe_arena_set_allocated_host(
    ::PROTOBUF_NAMESPACE_ID::StringValue* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.host)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::release_host() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = host_;
  host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:service.Instance.host)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    host_ = p;
  }
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::mutable_host() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:service.Instance.host)
  return _msg;
}
inline void Instance::set_allocated_host(::PROTOBUF_NAMESPACE_ID::StringValue* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host));
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.host)
}

// .google.protobuf.UInt32Value port = 4;
inline bool Instance::_internal_has_port() const {
  return this != internal_default_instance() && port_ != nullptr;
}
inline bool Instance::has_port() const {
  return _internal_has_port();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Instance::_internal_port() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = port_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Instance::port() const {
  // @@protoc_insertion_point(field_get:service.Instance.port)
  return _internal_port();
}
inline void Instance::unsafe_arena_set_allocated_port(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* port) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  port_ = port;
  if (port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.port)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::release_port() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = port_;
  port_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_release:service.Instance.port)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = port_;
  port_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::_internal_mutable_port() {
  
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    port_ = p;
  }
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::mutable_port() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:service.Instance.port)
  return _msg;
}
inline void Instance::set_allocated_port(::PROTOBUF_NAMESPACE_ID::UInt32Value* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port));
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.port)
}

// .google.protobuf.StringValue protocol = 5;
inline bool Instance::_internal_has_protocol() const {
  return this != internal_default_instance() && protocol_ != nullptr;
}
inline bool Instance::has_protocol() const {
  return _internal_has_protocol();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::_internal_protocol() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = protocol_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::protocol() const {
  // @@protoc_insertion_point(field_get:service.Instance.protocol)
  return _internal_protocol();
}
inline void Instance::unsafe_arena_set_allocated_protocol(
    ::PROTOBUF_NAMESPACE_ID::StringValue* protocol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_);
  }
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.protocol)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::release_protocol() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = protocol_;
  protocol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_release:service.Instance.protocol)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = protocol_;
  protocol_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::_internal_mutable_protocol() {
  
  if (protocol_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    protocol_ = p;
  }
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::mutable_protocol() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:service.Instance.protocol)
  return _msg;
}
inline void Instance::set_allocated_protocol(::PROTOBUF_NAMESPACE_ID::StringValue* protocol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_);
  }
  if (protocol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol));
    if (message_arena != submessage_arena) {
      protocol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol, submessage_arena);
    }
    
  } else {
    
  }
  protocol_ = protocol;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.protocol)
}

// .google.protobuf.StringValue version = 6;
inline bool Instance::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool Instance::has_version() const {
  return _internal_has_version();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::_internal_version() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& Instance::version() const {
  // @@protoc_insertion_point(field_get:service.Instance.version)
  return _internal_version();
}
inline void Instance::unsafe_arena_set_allocated_version(
    ::PROTOBUF_NAMESPACE_ID::StringValue* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.version)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::release_version() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = version_;
  version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:service.Instance.version)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    version_ = p;
  }
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* Instance::mutable_version() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:service.Instance.version)
  return _msg;
}
inline void Instance::set_allocated_version(::PROTOBUF_NAMESPACE_ID::StringValue* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.version)
}

// .google.protobuf.UInt32Value weight = 7;
inline bool Instance::_internal_has_weight() const {
  return this != internal_default_instance() && weight_ != nullptr;
}
inline bool Instance::has_weight() const {
  return _internal_has_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Instance::_internal_weight() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& Instance::weight() const {
  // @@protoc_insertion_point(field_get:service.Instance.weight)
  return _internal_weight();
}
inline void Instance::unsafe_arena_set_allocated_weight(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.weight)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::release_weight() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = weight_;
  weight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:service.Instance.weight)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = weight_;
  weight_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::_internal_mutable_weight() {
  
  if (weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    weight_ = p;
  }
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* Instance::mutable_weight() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:service.Instance.weight)
  return _msg;
}
inline void Instance::set_allocated_weight(::PROTOBUF_NAMESPACE_ID::UInt32Value* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight));
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.weight)
}

// .google.protobuf.BoolValue healthy = 8;
inline bool Instance::_internal_has_healthy() const {
  return this != internal_default_instance() && healthy_ != nullptr;
}
inline bool Instance::has_healthy() const {
  return _internal_has_healthy();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Instance::_internal_healthy() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = healthy_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Instance::healthy() const {
  // @@protoc_insertion_point(field_get:service.Instance.healthy)
  return _internal_healthy();
}
inline void Instance::unsafe_arena_set_allocated_healthy(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* healthy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(healthy_);
  }
  healthy_ = healthy;
  if (healthy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.healthy)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::release_healthy() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = healthy_;
  healthy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::unsafe_arena_release_healthy() {
  // @@protoc_insertion_point(field_release:service.Instance.healthy)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = healthy_;
  healthy_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::_internal_mutable_healthy() {
  
  if (healthy_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    healthy_ = p;
  }
  return healthy_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::mutable_healthy() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_healthy();
  // @@protoc_insertion_point(field_mutable:service.Instance.healthy)
  return _msg;
}
inline void Instance::set_allocated_healthy(::PROTOBUF_NAMESPACE_ID::BoolValue* healthy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(healthy_);
  }
  if (healthy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(healthy));
    if (message_arena != submessage_arena) {
      healthy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, healthy, submessage_arena);
    }
    
  } else {
    
  }
  healthy_ = healthy;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.healthy)
}

// .google.protobuf.BoolValue isolate = 9;
inline bool Instance::_internal_has_isolate() const {
  return this != internal_default_instance() && isolate_ != nullptr;
}
inline bool Instance::has_isolate() const {
  return _internal_has_isolate();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Instance::_internal_isolate() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = isolate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& Instance::isolate() const {
  // @@protoc_insertion_point(field_get:service.Instance.isolate)
  return _internal_isolate();
}
inline void Instance::unsafe_arena_set_allocated_isolate(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* isolate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(isolate_);
  }
  isolate_ = isolate;
  if (isolate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.isolate)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::release_isolate() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = isolate_;
  isolate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::unsafe_arena_release_isolate() {
  // @@protoc_insertion_point(field_release:service.Instance.isolate)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = isolate_;
  isolate_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::_internal_mutable_isolate() {
  
  if (isolate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    isolate_ = p;
  }
  return isolate_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* Instance::mutable_isolate() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_isolate();
  // @@protoc_insertion_point(field_mutable:service.Instance.isolate)
  return _msg;
}
inline void Instance::set_allocated_isolate(::PROTOBUF_NAMESPACE_ID::BoolValue* isolate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(isolate_);
  }
  if (isolate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(isolate));
    if (message_arena != submessage_arena) {
      isolate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, isolate, submessage_arena);
    }
    
  } else {
    
  }
  isolate_ = isolate;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.isolate)
}

// .service.Location location = 10;
inline bool Instance::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Instance::has_location() const {
  return _internal_has_location();
}
inline void Instance::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::service::Location& Instance::_internal_location() const {
  const ::service::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::Location&>(
      ::service::_Location_default_instance_);
}
inline const ::service::Location& Instance::location() const {
  // @@protoc_insertion_point(field_get:service.Instance.location)
  return _internal_location();
}
inline void Instance::unsafe_arena_set_allocated_location(
    ::service::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.Instance.location)
}
inline ::service::Location* Instance::release_location() {
  
  ::service::Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service::Location* Instance::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:service.Instance.location)
  
  ::service::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::service::Location* Instance::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::service::Location* Instance::mutable_location() {
  ::service::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:service.Instance.location)
  return _msg;
}
inline void Instance::set_allocated_location(::service::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:service.Instance.location)
}

// map<string, string> metadata = 11;
inline int Instance::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Instance::metadata_size() const {
  return _internal_metadata_size();
}
inline void Instance::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Instance::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Instance::metadata() const {
  // @@protoc_insertion_point(field_map:service.Instance.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Instance::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Instance::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:service.Instance.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_instance_2eproto
