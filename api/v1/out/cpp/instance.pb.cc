// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instance.proto

#include "instance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace service {
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized)
  : region_(nullptr)
  , zone_(nullptr)
  , campus_(nullptr){}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Instance_MetadataEntry_DoNotUse::Instance_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Instance_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Instance_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Instance_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Instance_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Instance_MetadataEntry_DoNotUseDefaultTypeInternal _Instance_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Instance::Instance(
    ::_pbi::ConstantInitialized)
  : metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , namespace__(nullptr)
  , service_(nullptr)
  , host_(nullptr)
  , port_(nullptr)
  , protocol_(nullptr)
  , version_(nullptr)
  , weight_(nullptr)
  , healthy_(nullptr)
  , isolate_(nullptr)
  , location_(nullptr){}
struct InstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceDefaultTypeInternal _Instance_default_instance_;
}  // namespace service
static ::_pb::Metadata file_level_metadata_instance_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_instance_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_instance_2eproto = nullptr;

const uint32_t TableStruct_instance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service::Location, region_),
  PROTOBUF_FIELD_OFFSET(::service::Location, zone_),
  PROTOBUF_FIELD_OFFSET(::service::Location, campus_),
  PROTOBUF_FIELD_OFFSET(::service::Instance_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service::Instance_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service::Instance_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::service::Instance_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service::Instance, namespace__),
  PROTOBUF_FIELD_OFFSET(::service::Instance, service_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, host_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, port_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, protocol_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, version_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, weight_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, healthy_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, isolate_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, location_),
  PROTOBUF_FIELD_OFFSET(::service::Instance, metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service::Location)},
  { 9, 17, -1, sizeof(::service::Instance_MetadataEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::service::Instance)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::service::_Location_default_instance_._instance,
  &::service::_Instance_MetadataEntry_DoNotUse_default_instance_._instance,
  &::service::_Instance_default_instance_._instance,
};

const char descriptor_table_protodef_instance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016instance.proto\022\007service\032\036google/protob"
  "uf/wrappers.proto\"\222\001\n\010Location\022,\n\006region"
  "\030\001 \001(\0132\034.google.protobuf.StringValue\022*\n\004"
  "zone\030\002 \001(\0132\034.google.protobuf.StringValue"
  "\022,\n\006campus\030\003 \001(\0132\034.google.protobuf.Strin"
  "gValue\"\262\004\n\010Instance\022/\n\tnamespace\030\001 \001(\0132\034"
  ".google.protobuf.StringValue\022-\n\007service\030"
  "\002 \001(\0132\034.google.protobuf.StringValue\022*\n\004h"
  "ost\030\003 \001(\0132\034.google.protobuf.StringValue\022"
  "*\n\004port\030\004 \001(\0132\034.google.protobuf.UInt32Va"
  "lue\022.\n\010protocol\030\005 \001(\0132\034.google.protobuf."
  "StringValue\022-\n\007version\030\006 \001(\0132\034.google.pr"
  "otobuf.StringValue\022,\n\006weight\030\007 \001(\0132\034.goo"
  "gle.protobuf.UInt32Value\022+\n\007healthy\030\010 \001("
  "\0132\032.google.protobuf.BoolValue\022+\n\007isolate"
  "\030\t \001(\0132\032.google.protobuf.BoolValue\022#\n\010lo"
  "cation\030\n \001(\0132\021.service.Location\0221\n\010metad"
  "ata\030\013 \003(\0132\037.service.Instance.MetadataEnt"
  "ry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001B\020Z\016api/v1/serviceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_instance_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_instance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_instance_2eproto = {
    false, false, 797, descriptor_table_protodef_instance_2eproto,
    "instance.proto",
    &descriptor_table_instance_2eproto_once, descriptor_table_instance_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_instance_2eproto::offsets,
    file_level_metadata_instance_2eproto, file_level_enum_descriptors_instance_2eproto,
    file_level_service_descriptors_instance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_instance_2eproto_getter() {
  return &descriptor_table_instance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_instance_2eproto(&descriptor_table_instance_2eproto);
namespace service {

// ===================================================================

class Location::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& region(const Location* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& zone(const Location* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& campus(const Location* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Location::_Internal::region(const Location* msg) {
  return *msg->region_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Location::_Internal::zone(const Location* msg) {
  return *msg->zone_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Location::_Internal::campus(const Location* msg) {
  return *msg->campus_;
}
void Location::clear_region() {
  if (GetArenaForAllocation() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
void Location::clear_zone() {
  if (GetArenaForAllocation() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
}
void Location::clear_campus() {
  if (GetArenaForAllocation() == nullptr && campus_ != nullptr) {
    delete campus_;
  }
  campus_ = nullptr;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:service.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    region_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from._internal_has_zone()) {
    zone_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  if (from._internal_has_campus()) {
    campus_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.campus_);
  } else {
    campus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&campus_) -
    reinterpret_cast<char*>(&region_)) + sizeof(campus_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:service.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete zone_;
  if (this != internal_default_instance()) delete campus_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:service.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && campus_ != nullptr) {
    delete campus_;
  }
  campus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue campus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_campus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue region = 1;
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue zone = 2;
  if (this->_internal_has_zone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zone(this),
        _Internal::zone(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue campus = 3;
  if (this->_internal_has_campus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::campus(this),
        _Internal::campus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.StringValue region = 1;
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .google.protobuf.StringValue zone = 2;
  if (this->_internal_has_zone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zone_);
  }

  // .google.protobuf.StringValue campus = 3;
  if (this->_internal_has_campus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *campus_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region()) {
    _internal_mutable_region()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_region());
  }
  if (from._internal_has_zone()) {
    _internal_mutable_zone()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_zone());
  }
  if (from._internal_has_campus()) {
    _internal_mutable_campus()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_campus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, campus_)
      + sizeof(Location::campus_)
      - PROTOBUF_FIELD_OFFSET(Location, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instance_2eproto_getter, &descriptor_table_instance_2eproto_once,
      file_level_metadata_instance_2eproto[0]);
}

// ===================================================================

Instance_MetadataEntry_DoNotUse::Instance_MetadataEntry_DoNotUse() {}
Instance_MetadataEntry_DoNotUse::Instance_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Instance_MetadataEntry_DoNotUse::MergeFrom(const Instance_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Instance_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instance_2eproto_getter, &descriptor_table_instance_2eproto_once,
      file_level_metadata_instance_2eproto[1]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& namespace_(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& service(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& host(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& port(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& protocol(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& version(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& weight(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& healthy(const Instance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& isolate(const Instance* msg);
  static const ::service::Location& location(const Instance* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
Instance::_Internal::namespace_(const Instance* msg) {
  return *msg->namespace__;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Instance::_Internal::service(const Instance* msg) {
  return *msg->service_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Instance::_Internal::host(const Instance* msg) {
  return *msg->host_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Instance::_Internal::port(const Instance* msg) {
  return *msg->port_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Instance::_Internal::protocol(const Instance* msg) {
  return *msg->protocol_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
Instance::_Internal::version(const Instance* msg) {
  return *msg->version_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Instance::_Internal::weight(const Instance* msg) {
  return *msg->weight_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Instance::_Internal::healthy(const Instance* msg) {
  return *msg->healthy_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Instance::_Internal::isolate(const Instance* msg) {
  return *msg->isolate_;
}
const ::service::Location&
Instance::_Internal::location(const Instance* msg) {
  return *msg->location_;
}
void Instance::clear_namespace_() {
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
}
void Instance::clear_service() {
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
}
void Instance::clear_host() {
  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
void Instance::clear_port() {
  if (GetArenaForAllocation() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
}
void Instance::clear_protocol() {
  if (GetArenaForAllocation() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
}
void Instance::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void Instance::clear_weight() {
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
}
void Instance::clear_healthy() {
  if (GetArenaForAllocation() == nullptr && healthy_ != nullptr) {
    delete healthy_;
  }
  healthy_ = nullptr;
}
void Instance::clear_isolate() {
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Instance::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:service.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_host()) {
    host_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.host_);
  } else {
    host_ = nullptr;
  }
  if (from._internal_has_port()) {
    port_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.port_);
  } else {
    port_ = nullptr;
  }
  if (from._internal_has_protocol()) {
    protocol_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.protocol_);
  } else {
    protocol_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_weight()) {
    weight_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  if (from._internal_has_healthy()) {
    healthy_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.healthy_);
  } else {
    healthy_ = nullptr;
  }
  if (from._internal_has_isolate()) {
    isolate_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.isolate_);
  } else {
    isolate_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::service::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service.Instance)
}

inline void Instance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(location_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:service.Instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.Destruct();
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete host_;
  if (this != internal_default_instance()) delete port_;
  if (this != internal_default_instance()) delete protocol_;
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete healthy_;
  if (this != internal_default_instance()) delete isolate_;
  if (this != internal_default_instance()) delete location_;
}

void Instance::ArenaDtor(void* object) {
  Instance* _this = reinterpret_cast< Instance* >(object);
  _this->metadata_.Destruct();
}
void Instance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:service.Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_ != nullptr) {
    delete service_;
  }
  service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
  if (GetArenaForAllocation() == nullptr && port_ != nullptr) {
    delete port_;
  }
  port_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
  if (GetArenaForAllocation() == nullptr && healthy_ != nullptr) {
    delete healthy_;
  }
  healthy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && isolate_ != nullptr) {
    delete isolate_;
  }
  isolate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_port(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue healthy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue isolate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_isolate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service.Location location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::namespace_(this),
        _Internal::namespace_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::service(this),
        _Internal::service(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue host = 3;
  if (this->_internal_has_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::host(this),
        _Internal::host(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value port = 4;
  if (this->_internal_has_port()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::port(this),
        _Internal::port(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue protocol = 5;
  if (this->_internal_has_protocol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::protocol(this),
        _Internal::protocol(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue version = 6;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt32Value weight = 7;
  if (this->_internal_has_weight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::weight(this),
        _Internal::weight(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue healthy = 8;
  if (this->_internal_has_healthy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::healthy(this),
        _Internal::healthy(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue isolate = 9;
  if (this->_internal_has_isolate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::isolate(this),
        _Internal::isolate(this).GetCachedSize(), target, stream);
  }

  // .service.Location location = 10;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // map<string, string> metadata = 11;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Instance_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "service.Instance.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "service.Instance.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Instance_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.StringValue namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .google.protobuf.StringValue service = 2;
  if (this->_internal_has_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_);
  }

  // .google.protobuf.StringValue host = 3;
  if (this->_internal_has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }

  // .google.protobuf.UInt32Value port = 4;
  if (this->_internal_has_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_);
  }

  // .google.protobuf.StringValue protocol = 5;
  if (this->_internal_has_protocol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocol_);
  }

  // .google.protobuf.StringValue version = 6;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .google.protobuf.UInt32Value weight = 7;
  if (this->_internal_has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_);
  }

  // .google.protobuf.BoolValue healthy = 8;
  if (this->_internal_has_healthy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthy_);
  }

  // .google.protobuf.BoolValue isolate = 9;
  if (this->_internal_has_isolate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *isolate_);
  }

  // .service.Location location = 10;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }

void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Instance *>(to)->MergeFrom(
      static_cast<const Instance &>(from));
}


void Instance::MergeFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_service()) {
    _internal_mutable_service()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_service());
  }
  if (from._internal_has_host()) {
    _internal_mutable_host()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_host());
  }
  if (from._internal_has_port()) {
    _internal_mutable_port()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_port());
  }
  if (from._internal_has_protocol()) {
    _internal_mutable_protocol()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_protocol());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_version());
  }
  if (from._internal_has_weight()) {
    _internal_mutable_weight()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_weight());
  }
  if (from._internal_has_healthy()) {
    _internal_mutable_healthy()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_healthy());
  }
  if (from._internal_has_isolate()) {
    _internal_mutable_isolate()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_isolate());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::service::Location::MergeFrom(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instance, location_)
      + sizeof(Instance::location_)
      - PROTOBUF_FIELD_OFFSET(Instance, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_instance_2eproto_getter, &descriptor_table_instance_2eproto_once,
      file_level_metadata_instance_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service::Location*
Arena::CreateMaybeMessage< ::service::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::service::Instance_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::service::Instance_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::Instance_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::Instance*
Arena::CreateMaybeMessage< ::service::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::Instance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
