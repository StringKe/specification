// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.20.0
// source: router.proto

package trafficcontrol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RouterType int32

const (
	RouterType_RuleRouter     RouterType = 0
	RouterType_MetadataRouter RouterType = 1
	RouterType_LocalityRouter RouterType = 2
	RouterType_CanaryRouter   RouterType = 3
	RouterType_SetRouter      RouterType = 4
)

// Enum value maps for RouterType.
var (
	RouterType_name = map[int32]string{
		0: "RuleRouter",
		1: "MetadataRouter",
		2: "LocalityRouter",
		3: "CanaryRouter",
		4: "SetRouter",
	}
	RouterType_value = map[string]int32{
		"RuleRouter":     0,
		"MetadataRouter": 1,
		"LocalityRouter": 2,
		"CanaryRouter":   3,
		"SetRouter":      4,
	}
)

func (x RouterType) Enum() *RouterType {
	p := new(RouterType)
	*p = x
	return p
}

func (x RouterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[0].Descriptor()
}

func (RouterType) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[0]
}

func (x RouterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterType.Descriptor instead.
func (RouterType) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

type MatchString_MatchStringType int32

const (
	// equivalent match
	MatchString_EXACT MatchString_MatchStringType = 0
	// regular match
	MatchString_REGEX MatchString_MatchStringType = 1
	// not equals match
	MatchString_NOT_EQUALS MatchString_MatchStringType = 2
	// include match
	MatchString_INCLUDE MatchString_MatchStringType = 3
	// not include match
	MatchString_NOT_INCLUDE MatchString_MatchStringType = 4
)

// Enum value maps for MatchString_MatchStringType.
var (
	MatchString_MatchStringType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
		2: "NOT_EQUALS",
		3: "INCLUDE",
		4: "NOT_INCLUDE",
	}
	MatchString_MatchStringType_value = map[string]int32{
		"EXACT":       0,
		"REGEX":       1,
		"NOT_EQUALS":  2,
		"INCLUDE":     3,
		"NOT_INCLUDE": 4,
	}
)

func (x MatchString_MatchStringType) Enum() *MatchString_MatchStringType {
	p := new(MatchString_MatchStringType)
	*p = x
	return p
}

func (x MatchString_MatchStringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_MatchStringType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[1].Descriptor()
}

func (MatchString_MatchStringType) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[1]
}

func (x MatchString_MatchStringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_MatchStringType.Descriptor instead.
func (MatchString_MatchStringType) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{2, 0}
}

type MatchString_ValueType int32

const (
	// Routing rules write dead data
	MatchString_TEXT MatchString_ValueType = 0
	// Routing data is obtained from the Metadata of the Motorcycle Service
	MatchString_PARAMETER MatchString_ValueType = 1
	// Get routing data from the environment variable of the main tone service
	MatchString_VARIABLE MatchString_ValueType = 2
)

// Enum value maps for MatchString_ValueType.
var (
	MatchString_ValueType_name = map[int32]string{
		0: "TEXT",
		1: "PARAMETER",
		2: "VARIABLE",
	}
	MatchString_ValueType_value = map[string]int32{
		"TEXT":      0,
		"PARAMETER": 1,
		"VARIABLE":  2,
	}
)

func (x MatchString_ValueType) Enum() *MatchString_ValueType {
	p := new(MatchString_ValueType)
	*p = x
	return p
}

func (x MatchString_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[2].Descriptor()
}

func (MatchString_ValueType) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[2]
}

func (x MatchString_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_ValueType.Descriptor instead.
func (MatchString_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{2, 1}
}

type LocalityRouting_LocalityLevel int32

const (
	LocalityRouting_CAMPUS LocalityRouting_LocalityLevel = 0
	LocalityRouting_ZONE   LocalityRouting_LocalityLevel = 1
	LocalityRouting_REGION LocalityRouting_LocalityLevel = 2
	LocalityRouting_ALL    LocalityRouting_LocalityLevel = 3
)

// Enum value maps for LocalityRouting_LocalityLevel.
var (
	LocalityRouting_LocalityLevel_name = map[int32]string{
		0: "CAMPUS",
		1: "ZONE",
		2: "REGION",
		3: "ALL",
	}
	LocalityRouting_LocalityLevel_value = map[string]int32{
		"CAMPUS": 0,
		"ZONE":   1,
		"REGION": 2,
		"ALL":    3,
	}
)

func (x LocalityRouting_LocalityLevel) Enum() *LocalityRouting_LocalityLevel {
	p := new(LocalityRouting_LocalityLevel)
	*p = x
	return p
}

func (x LocalityRouting_LocalityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalityRouting_LocalityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[3].Descriptor()
}

func (LocalityRouting_LocalityLevel) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[3]
}

func (x LocalityRouting_LocalityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalityRouting_LocalityLevel.Descriptor instead.
func (LocalityRouting_LocalityLevel) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{9, 0}
}

type MetadataRouting_DegradeLevel int32

const (
	MetadataRouting_ALL    MetadataRouting_DegradeLevel = 0
	MetadataRouting_OTHERS MetadataRouting_DegradeLevel = 1
)

// Enum value maps for MetadataRouting_DegradeLevel.
var (
	MetadataRouting_DegradeLevel_name = map[int32]string{
		0: "ALL",
		1: "OTHERS",
	}
	MetadataRouting_DegradeLevel_value = map[string]int32{
		"ALL":    0,
		"OTHERS": 1,
	}
)

func (x MetadataRouting_DegradeLevel) Enum() *MetadataRouting_DegradeLevel {
	p := new(MetadataRouting_DegradeLevel)
	*p = x
	return p
}

func (x MetadataRouting_DegradeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataRouting_DegradeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[4].Descriptor()
}

func (MetadataRouting_DegradeLevel) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[4]
}

func (x MetadataRouting_DegradeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataRouting_DegradeLevel.Descriptor instead.
func (MetadataRouting_DegradeLevel) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10, 0}
}

type CanaryRouting_DegradeLevel int32

const (
	CanaryRouting_ALL                   CanaryRouting_DegradeLevel = 0
	CanaryRouting_OTHERS                CanaryRouting_DegradeLevel = 1
	CanaryRouting_OTHERS_WITHOUT_CANARY CanaryRouting_DegradeLevel = 2
)

// Enum value maps for CanaryRouting_DegradeLevel.
var (
	CanaryRouting_DegradeLevel_name = map[int32]string{
		0: "ALL",
		1: "OTHERS",
		2: "OTHERS_WITHOUT_CANARY",
	}
	CanaryRouting_DegradeLevel_value = map[string]int32{
		"ALL":                   0,
		"OTHERS":                1,
		"OTHERS_WITHOUT_CANARY": 2,
	}
)

func (x CanaryRouting_DegradeLevel) Enum() *CanaryRouting_DegradeLevel {
	p := new(CanaryRouting_DegradeLevel)
	*p = x
	return p
}

func (x CanaryRouting_DegradeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanaryRouting_DegradeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[5].Descriptor()
}

func (CanaryRouting_DegradeLevel) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[5]
}

func (x CanaryRouting_DegradeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanaryRouting_DegradeLevel.Descriptor instead.
func (CanaryRouting_DegradeLevel) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{11, 0}
}

// configuration root for route
type RouteConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// routers chain
	Routers []*Router `protobuf:"bytes,1,rep,name=routers,proto3" json:"routers,omitempty"`
}

func (x *RouteConfiguration) Reset() {
	*x = RouteConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfiguration) ProtoMessage() {}

func (x *RouteConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfiguration.ProtoReflect.Descriptor instead.
func (*RouteConfiguration) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

func (x *RouteConfiguration) GetRouters() []*Router {
	if x != nil {
		return x.Routers
	}
	return nil
}

// router configuration
type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router type
	Type RouterType `protobuf:"varint,1,opt,name=type,proto3,enum=trafficcontrol.RouterType" json:"type,omitempty"`
	// Router implementation, for any routing
	Routing *anypb.Any `protobuf:"bytes,2,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{1}
}

func (x *Router) GetType() RouterType {
	if x != nil {
		return x.Type
	}
	return RouterType_RuleRouter
}

func (x *Router) GetRouting() *anypb.Any {
	if x != nil {
		return x.Routing
	}
	return nil
}

// MatchString
type MatchString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matching rule
	Type MatchString_MatchStringType `protobuf:"varint,1,opt,name=type,proto3,enum=trafficcontrol.MatchString_MatchStringType" json:"type,omitempty"`
	// Routing rules
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Value type, specific acquisition path for routing rule values
	ValueType MatchString_ValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=trafficcontrol.MatchString_ValueType" json:"value_type,omitempty"`
}

func (x *MatchString) Reset() {
	*x = MatchString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchString) ProtoMessage() {}

func (x *MatchString) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchString.ProtoReflect.Descriptor instead.
func (*MatchString) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{2}
}

func (x *MatchString) GetType() MatchString_MatchStringType {
	if x != nil {
		return x.Type
	}
	return MatchString_EXACT
}

func (x *MatchString) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MatchString) GetValueType() MatchString_ValueType {
	if x != nil {
		return x.ValueType
	}
	return MatchString_TEXT
}

// Locality for service instance
type Locality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region this zone belongs to
	Region *MatchString `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Local zone where campus belongs to
	Zone *MatchString `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// Campus for the instance hosting
	Campus *MatchString `protobuf:"bytes,3,opt,name=campus,proto3" json:"campus,omitempty"`
}

func (x *Locality) Reset() {
	*x = Locality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locality) ProtoMessage() {}

func (x *Locality) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locality.ProtoReflect.Descriptor instead.
func (*Locality) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{3}
}

func (x *Locality) GetRegion() *MatchString {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Locality) GetZone() *MatchString {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *Locality) GetCampus() *MatchString {
	if x != nil {
		return x.Campus
	}
	return nil
}

type DegradeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable degrade
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Degrade by left instance total
	TotalCount *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Degrade by healthy instance total
	HealthyCount *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	// Degrade by healthy instance precent
	HealthyPercent *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=healthy_percent,json=healthyPercent,proto3" json:"healthy_percent,omitempty"`
}

func (x *DegradeConfig) Reset() {
	*x = DegradeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradeConfig) ProtoMessage() {}

func (x *DegradeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradeConfig.ProtoReflect.Descriptor instead.
func (*DegradeConfig) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{4}
}

func (x *DegradeConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *DegradeConfig) GetTotalCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalCount
	}
	return nil
}

func (x *DegradeConfig) GetHealthyCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HealthyCount
	}
	return nil
}

func (x *DegradeConfig) GetHealthyPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HealthyPercent
	}
	return nil
}

// Routing by rules
type RuleRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule belongs and namespace
	Namespace *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Service   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Each service can configure multiple inbound or outbound rules
	// For each request, you can match from top to bottom, if you are in the
	// middle, terminate
	Inbounds  []*Route `protobuf:"bytes,3,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	Outbounds []*Route `protobuf:"bytes,4,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	// Degrade config for destination
	Degrade *DegradeConfig `protobuf:"bytes,5,opt,name=degrade,proto3" json:"degrade,omitempty"`
}

func (x *RuleRouting) Reset() {
	*x = RuleRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRouting) ProtoMessage() {}

func (x *RuleRouting) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRouting.ProtoReflect.Descriptor instead.
func (*RuleRouting) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{5}
}

func (x *RuleRouting) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *RuleRouting) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *RuleRouting) GetInbounds() []*Route {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

func (x *RuleRouting) GetOutbounds() []*Route {
	if x != nil {
		return x.Outbounds
	}
	return nil
}

func (x *RuleRouting) GetDegrade() *DegradeConfig {
	if x != nil {
		return x.Degrade
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If you match the Source rule, follow the Destination route
	// The relationship between multiple SOURCE is or
	Sources      []*Source      `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations []*Destination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{6}
}

func (x *Route) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Route) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Main tuning service and namespace
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Master Control Service Example Tag or Request Label
	// Value supports regular matching
	Metadata map[string]*MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Locality info for caller service
	Locality *Locality `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{7}
}

func (x *Source) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Source) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Source) GetMetadata() map[string]*MatchString {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Source) GetLocality() *Locality {
	if x != nil {
		return x.Locality
	}
	return nil
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Templated service and namespace
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Templated service example label
	// Value supports regular matching
	Metadata map[string]*MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// According to the service name and service instance Metadata Filter the
	// qualified service instance subset Service instance subset can set priority
	// and weight Priority: integer, range [0, 9], the highest priority is 0
	// Weight: Integer
	// Press priority routing, if there is high priority, low priority will not
	// use If there is a subset of the same priority, then assign by weight
	// Priority and weight can be not set / set up one / set two
	// If the section is set priority, some are not set, it is considered that the
	// priority is not set. If the part is set, some is not set, it is considered
	// that the weight is not set to 0 If you have no weight, you think the weight
	// is the same
	Priority *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// Forward requests to proxy service
	Transfer *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// Whether to isolate the SET, after isolation, no traffic will be allocated
	Isolate *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// Locality info for destination
	Locality *Locality `protobuf:"bytes,8,opt,name=locality,proto3" json:"locality,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{8}
}

func (x *Destination) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Destination) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Destination) GetMetadata() map[string]*MatchString {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Destination) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Destination) GetWeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *Destination) GetTransfer() *wrapperspb.StringValue {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Destination) GetIsolate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Isolate
	}
	return nil
}

func (x *Destination) GetLocality() *Locality {
	if x != nil {
		return x.Locality
	}
	return nil
}

type LocalityRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// starting locality level
	StartingLevel LocalityRouting_LocalityLevel `protobuf:"varint,1,opt,name=startingLevel,proto3,enum=trafficcontrol.LocalityRouting_LocalityLevel" json:"startingLevel,omitempty"`
	// when fail, the router will degrade to match higher level, here define the max degrade level
	MaxDegradeLevel LocalityRouting_LocalityLevel `protobuf:"varint,2,opt,name=maxDegradeLevel,proto3,enum=trafficcontrol.LocalityRouting_LocalityLevel" json:"maxDegradeLevel,omitempty"`
	// Degrade config
	Degrade *DegradeConfig `protobuf:"bytes,3,opt,name=degrade,proto3" json:"degrade,omitempty"`
}

func (x *LocalityRouting) Reset() {
	*x = LocalityRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityRouting) ProtoMessage() {}

func (x *LocalityRouting) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityRouting.ProtoReflect.Descriptor instead.
func (*LocalityRouting) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{9}
}

func (x *LocalityRouting) GetStartingLevel() LocalityRouting_LocalityLevel {
	if x != nil {
		return x.StartingLevel
	}
	return LocalityRouting_CAMPUS
}

func (x *LocalityRouting) GetMaxDegradeLevel() LocalityRouting_LocalityLevel {
	if x != nil {
		return x.MaxDegradeLevel
	}
	return LocalityRouting_CAMPUS
}

func (x *LocalityRouting) GetDegrade() *DegradeConfig {
	if x != nil {
		return x.Degrade
	}
	return nil
}

type MetadataRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegradeLevel MetadataRouting_DegradeLevel `protobuf:"varint,1,opt,name=degrade_level,json=degradeLevel,proto3,enum=trafficcontrol.MetadataRouting_DegradeLevel" json:"degrade_level,omitempty"`
	// Degrade config
	Degrade *DegradeConfig `protobuf:"bytes,3,opt,name=degrade,proto3" json:"degrade,omitempty"`
}

func (x *MetadataRouting) Reset() {
	*x = MetadataRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataRouting) ProtoMessage() {}

func (x *MetadataRouting) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataRouting.ProtoReflect.Descriptor instead.
func (*MetadataRouting) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10}
}

func (x *MetadataRouting) GetDegradeLevel() MetadataRouting_DegradeLevel {
	if x != nil {
		return x.DegradeLevel
	}
	return MetadataRouting_ALL
}

func (x *MetadataRouting) GetDegrade() *DegradeConfig {
	if x != nil {
		return x.Degrade
	}
	return nil
}

type CanaryRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegradeLevel CanaryRouting_DegradeLevel `protobuf:"varint,1,opt,name=degrade_level,json=degradeLevel,proto3,enum=trafficcontrol.CanaryRouting_DegradeLevel" json:"degrade_level,omitempty"`
	// Degrade config
	Degrade *DegradeConfig `protobuf:"bytes,3,opt,name=degrade,proto3" json:"degrade,omitempty"`
}

func (x *CanaryRouting) Reset() {
	*x = CanaryRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryRouting) ProtoMessage() {}

func (x *CanaryRouting) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryRouting.ProtoReflect.Descriptor instead.
func (*CanaryRouting) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{11}
}

func (x *CanaryRouting) GetDegradeLevel() CanaryRouting_DegradeLevel {
	if x != nil {
		return x.DegradeLevel
	}
	return CanaryRouting_ALL
}

func (x *CanaryRouting) GetDegrade() *DegradeConfig {
	if x != nil {
		return x.Degrade
	}
	return nil
}

type SetRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRouting) Reset() {
	*x = SetRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRouting) ProtoMessage() {}

func (x *SetRouting) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRouting.ProtoReflect.Descriptor instead.
func (*SetRouting) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{12}
}

var File_router_proto protoreflect.FileDescriptor

var file_router_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x12, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x68, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41,
	0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x04, 0x22, 0x32, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0d, 0x44, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x0b, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x7a, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x1a, 0x58, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x04, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x58, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x3a, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4d, 0x50, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0xc2, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x51, 0x0a, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x23, 0x0a, 0x0c,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10,
	0x01, 0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x3e, 0x0a,
	0x0c, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x22, 0x0c, 0x0a,
	0x0a, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2a, 0x65, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x10, 0x04, 0x42, 0x17, 0x5a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_router_proto_rawDescOnce sync.Once
	file_router_proto_rawDescData = file_router_proto_rawDesc
)

func file_router_proto_rawDescGZIP() []byte {
	file_router_proto_rawDescOnce.Do(func() {
		file_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_proto_rawDescData)
	})
	return file_router_proto_rawDescData
}

var file_router_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_router_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_router_proto_goTypes = []interface{}{
	(RouterType)(0),                    // 0: trafficcontrol.RouterType
	(MatchString_MatchStringType)(0),   // 1: trafficcontrol.MatchString.MatchStringType
	(MatchString_ValueType)(0),         // 2: trafficcontrol.MatchString.ValueType
	(LocalityRouting_LocalityLevel)(0), // 3: trafficcontrol.LocalityRouting.LocalityLevel
	(MetadataRouting_DegradeLevel)(0),  // 4: trafficcontrol.MetadataRouting.DegradeLevel
	(CanaryRouting_DegradeLevel)(0),    // 5: trafficcontrol.CanaryRouting.DegradeLevel
	(*RouteConfiguration)(nil),         // 6: trafficcontrol.RouteConfiguration
	(*Router)(nil),                     // 7: trafficcontrol.Router
	(*MatchString)(nil),                // 8: trafficcontrol.MatchString
	(*Locality)(nil),                   // 9: trafficcontrol.Locality
	(*DegradeConfig)(nil),              // 10: trafficcontrol.DegradeConfig
	(*RuleRouting)(nil),                // 11: trafficcontrol.RuleRouting
	(*Route)(nil),                      // 12: trafficcontrol.Route
	(*Source)(nil),                     // 13: trafficcontrol.Source
	(*Destination)(nil),                // 14: trafficcontrol.Destination
	(*LocalityRouting)(nil),            // 15: trafficcontrol.LocalityRouting
	(*MetadataRouting)(nil),            // 16: trafficcontrol.MetadataRouting
	(*CanaryRouting)(nil),              // 17: trafficcontrol.CanaryRouting
	(*SetRouting)(nil),                 // 18: trafficcontrol.SetRouting
	nil,                                // 19: trafficcontrol.Source.MetadataEntry
	nil,                                // 20: trafficcontrol.Destination.MetadataEntry
	(*anypb.Any)(nil),                  // 21: google.protobuf.Any
	(*wrapperspb.StringValue)(nil),     // 22: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),       // 23: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),     // 24: google.protobuf.UInt32Value
}
var file_router_proto_depIdxs = []int32{
	7,  // 0: trafficcontrol.RouteConfiguration.routers:type_name -> trafficcontrol.Router
	0,  // 1: trafficcontrol.Router.type:type_name -> trafficcontrol.RouterType
	21, // 2: trafficcontrol.Router.routing:type_name -> google.protobuf.Any
	1,  // 3: trafficcontrol.MatchString.type:type_name -> trafficcontrol.MatchString.MatchStringType
	22, // 4: trafficcontrol.MatchString.value:type_name -> google.protobuf.StringValue
	2,  // 5: trafficcontrol.MatchString.value_type:type_name -> trafficcontrol.MatchString.ValueType
	8,  // 6: trafficcontrol.Locality.region:type_name -> trafficcontrol.MatchString
	8,  // 7: trafficcontrol.Locality.zone:type_name -> trafficcontrol.MatchString
	8,  // 8: trafficcontrol.Locality.campus:type_name -> trafficcontrol.MatchString
	23, // 9: trafficcontrol.DegradeConfig.enable:type_name -> google.protobuf.BoolValue
	24, // 10: trafficcontrol.DegradeConfig.total_count:type_name -> google.protobuf.UInt32Value
	24, // 11: trafficcontrol.DegradeConfig.healthy_count:type_name -> google.protobuf.UInt32Value
	24, // 12: trafficcontrol.DegradeConfig.healthy_percent:type_name -> google.protobuf.UInt32Value
	22, // 13: trafficcontrol.RuleRouting.namespace:type_name -> google.protobuf.StringValue
	22, // 14: trafficcontrol.RuleRouting.service:type_name -> google.protobuf.StringValue
	12, // 15: trafficcontrol.RuleRouting.inbounds:type_name -> trafficcontrol.Route
	12, // 16: trafficcontrol.RuleRouting.outbounds:type_name -> trafficcontrol.Route
	10, // 17: trafficcontrol.RuleRouting.degrade:type_name -> trafficcontrol.DegradeConfig
	13, // 18: trafficcontrol.Route.sources:type_name -> trafficcontrol.Source
	14, // 19: trafficcontrol.Route.destinations:type_name -> trafficcontrol.Destination
	22, // 20: trafficcontrol.Source.service:type_name -> google.protobuf.StringValue
	22, // 21: trafficcontrol.Source.namespace:type_name -> google.protobuf.StringValue
	19, // 22: trafficcontrol.Source.metadata:type_name -> trafficcontrol.Source.MetadataEntry
	9,  // 23: trafficcontrol.Source.locality:type_name -> trafficcontrol.Locality
	22, // 24: trafficcontrol.Destination.service:type_name -> google.protobuf.StringValue
	22, // 25: trafficcontrol.Destination.namespace:type_name -> google.protobuf.StringValue
	20, // 26: trafficcontrol.Destination.metadata:type_name -> trafficcontrol.Destination.MetadataEntry
	24, // 27: trafficcontrol.Destination.priority:type_name -> google.protobuf.UInt32Value
	24, // 28: trafficcontrol.Destination.weight:type_name -> google.protobuf.UInt32Value
	22, // 29: trafficcontrol.Destination.transfer:type_name -> google.protobuf.StringValue
	23, // 30: trafficcontrol.Destination.isolate:type_name -> google.protobuf.BoolValue
	9,  // 31: trafficcontrol.Destination.locality:type_name -> trafficcontrol.Locality
	3,  // 32: trafficcontrol.LocalityRouting.startingLevel:type_name -> trafficcontrol.LocalityRouting.LocalityLevel
	3,  // 33: trafficcontrol.LocalityRouting.maxDegradeLevel:type_name -> trafficcontrol.LocalityRouting.LocalityLevel
	10, // 34: trafficcontrol.LocalityRouting.degrade:type_name -> trafficcontrol.DegradeConfig
	4,  // 35: trafficcontrol.MetadataRouting.degrade_level:type_name -> trafficcontrol.MetadataRouting.DegradeLevel
	10, // 36: trafficcontrol.MetadataRouting.degrade:type_name -> trafficcontrol.DegradeConfig
	5,  // 37: trafficcontrol.CanaryRouting.degrade_level:type_name -> trafficcontrol.CanaryRouting.DegradeLevel
	10, // 38: trafficcontrol.CanaryRouting.degrade:type_name -> trafficcontrol.DegradeConfig
	8,  // 39: trafficcontrol.Source.MetadataEntry.value:type_name -> trafficcontrol.MatchString
	8,  // 40: trafficcontrol.Destination.MetadataEntry.value:type_name -> trafficcontrol.MatchString
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_router_proto_init() }
func file_router_proto_init() {
	if File_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalityRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanaryRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_router_proto_goTypes,
		DependencyIndexes: file_router_proto_depIdxs,
		EnumInfos:         file_router_proto_enumTypes,
		MessageInfos:      file_router_proto_msgTypes,
	}.Build()
	File_router_proto = out.File
	file_router_proto_rawDesc = nil
	file_router_proto_goTypes = nil
	file_router_proto_depIdxs = nil
}
