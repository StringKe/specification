// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.0
// source: limiter.proto

package accesscontrol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Rate limiting resources
type ResourceType int32

const (
	// Access request
	ResourceType_QPS ResourceType = 0
	// Concurrent threads handling requests
	ResourceType_CONCURRENCY ResourceType = 1
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "QPS",
		1: "CONCURRENCY",
	}
	ResourceType_value = map[string]int32{
		"QPS":         0,
		"CONCURRENCY": 1,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{0}
}

// Rate limiting type
type Type int32

const (
	//Global rate limiting, cluster rate limiting, distributed rate limiting
	Type_GLOBAL Type = 0
	//Stand-alone rate limiting
	Type_LOCAL Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "GLOBAL",
		1: "LOCAL",
	}
	Type_value = map[string]int32{
		"GLOBAL": 0,
		"LOCAL":  1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{1}
}

// The mode of amount
type AmountMode int32

const (
	// Overall threshold
	AmountMode_GLOBAL_TOTAL AmountMode = 0
	// Amortized threshold for single node
	AmountMode_SHARE_EQUALLY AmountMode = 1
)

// Enum value maps for AmountMode.
var (
	AmountMode_name = map[int32]string{
		0: "GLOBAL_TOTAL",
		1: "SHARE_EQUALLY",
	}
	AmountMode_value = map[string]int32{
		"GLOBAL_TOTAL":  0,
		"SHARE_EQUALLY": 1,
	}
)

func (x AmountMode) Enum() *AmountMode {
	p := new(AmountMode)
	*p = x
	return p
}

func (x AmountMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmountMode) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[2].Descriptor()
}

func (AmountMode) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[2]
}

func (x AmountMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmountMode.Descriptor instead.
func (AmountMode) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{2}
}

// The failover type
type FailoverType int32

const (
	// Downgrade using local rate limiting rules
	FailoverType_FAILOVER_LOCAL FailoverType = 0
	// downgrade to direct pass
	FailoverType_FAILOVER_PASS FailoverType = 1
)

// Enum value maps for FailoverType.
var (
	FailoverType_name = map[int32]string{
		0: "FAILOVER_LOCAL",
		1: "FAILOVER_PASS",
	}
	FailoverType_value = map[string]int32{
		"FAILOVER_LOCAL": 0,
		"FAILOVER_PASS":  1,
	}
)

func (x FailoverType) Enum() *FailoverType {
	p := new(FailoverType)
	*p = x
	return p
}

func (x FailoverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailoverType) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[3].Descriptor()
}

func (FailoverType) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[3]
}

func (x FailoverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailoverType.Descriptor instead.
func (FailoverType) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{3}
}

// Match type
type MatchString_MatchStringType int32

const (
	// Exact match
	MatchString_EXACT MatchString_MatchStringType = 0
	// Regex math
	MatchString_REGEX MatchString_MatchStringType = 1
	// Not equals match
	MatchString_NOT_EQUALS MatchString_MatchStringType = 2
	// Include match
	MatchString_INCLUDE MatchString_MatchStringType = 3
	// Not include match
	MatchString_NOT_INCLUDE MatchString_MatchStringType = 4
)

// Enum value maps for MatchString_MatchStringType.
var (
	MatchString_MatchStringType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
		2: "NOT_EQUALS",
		3: "INCLUDE",
		4: "NOT_INCLUDE",
	}
	MatchString_MatchStringType_value = map[string]int32{
		"EXACT":       0,
		"REGEX":       1,
		"NOT_EQUALS":  2,
		"INCLUDE":     3,
		"NOT_INCLUDE": 4,
	}
)

func (x MatchString_MatchStringType) Enum() *MatchString_MatchStringType {
	p := new(MatchString_MatchStringType)
	*p = x
	return p
}

func (x MatchString_MatchStringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_MatchStringType) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[4].Descriptor()
}

func (MatchString_MatchStringType) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[4]
}

func (x MatchString_MatchStringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_MatchStringType.Descriptor instead.
func (MatchString_MatchStringType) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{2, 0}
}

type MatchString_ValueType int32

const (
	MatchString_TEXT MatchString_ValueType = 0
)

// Enum value maps for MatchString_ValueType.
var (
	MatchString_ValueType_name = map[int32]string{
		0: "TEXT",
	}
	MatchString_ValueType_value = map[string]int32{
		"TEXT": 0,
	}
)

func (x MatchString_ValueType) Enum() *MatchString_ValueType {
	p := new(MatchString_ValueType)
	*p = x
	return p
}

func (x MatchString_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_proto_enumTypes[5].Descriptor()
}

func (MatchString_ValueType) Type() protoreflect.EnumType {
	return &file_limiter_proto_enumTypes[5]
}

func (x MatchString_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_ValueType.Descriptor instead.
func (MatchString_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{2, 1}
}

// Set of all rate limiting rules for the service
type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of limiting rules
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// The revision information summarized by the rate limiting rules
	Revision *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimit) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RateLimit) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

//Rate limiting rule specification
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the rate limiting rule
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the service to which the rate limiting rule belongs
	Service *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// The namespace to which the rate limiting rule belongs
	Namespace *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Optional, SUBSET identifier
	Subset map[string]*MatchString `protobuf:"bytes,4,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The priority of the rate limiting rule, the value of 0 is the highest
	Priority *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// Rate limiting resource type
	Resource ResourceType `protobuf:"varint,6,opt,name=resource,proto3,enum=accesscontrol.ResourceType" json:"resource,omitempty"`
	// Rate limit type
	Type Type `protobuf:"varint,7,opt,name=type,proto3,enum=accesscontrol.Type" json:"type,omitempty"`
	// The set of request labels, which are matched by key/value, and this rule is used only when all labels are matched.
	Labels map[string]*MatchString `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rate limiting threshold
	// There can be multiple granularity configurations (for example, for seconds, minutes, and days at the same time)
	// In the global rate limiting mode, the value is the total amount of service quota;
	// in the stand-alone rate limiting mode, the value is the quota amount that a single node can handle
	Amounts []*Amount `protobuf:"bytes,9,rep,name=amounts,proto3" json:"amounts,omitempty"`
	// The rate limiting action corresponds to the plugin name of the client.
	// For example, reject the request
	Action *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	// Whether to enable the rate limiting rule, enabled by default
	Disable *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=disable,proto3" json:"disable,omitempty"`
	// In distributed current limiting mode, each node reports quota policy
	Report *ReportPolicy `protobuf:"bytes,12,opt,name=report,proto3" json:"report,omitempty"`
	// Rate limit rule creation time
	Ctime *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// Rate limit rule modification time
	Mtime *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// Rate limiting rule revision
	Revision *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	// The TOKEN of the service is only used for the console, and the discover interface does not deliver it.
	ServiceToken *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=service_token,proto3" json:"service_token,omitempty"`
	// Amount adjustment algorithm
	Adjuster *AmountAdjusterAlgorithm `protobuf:"bytes,17,opt,name=adjuster,proto3" json:"adjuster,omitempty"`
	// Whether wildcards are combined and counted, the default counts separately
	RegexCombine *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=regex_combine,json=regexCombine,proto3" json:"regex_combine,omitempty"`
	// Rate Limiting amount mode
	AmountMode AmountMode `protobuf:"varint,19,opt,name=amount_mode,json=amountMode,proto3,enum=accesscontrol.AmountMode" json:"amount_mode,omitempty"`
	// Degradation policy when failed to obtain rate limiting rules from the control plane
	Failover FailoverType `protobuf:"varint,20,opt,name=failover,proto3,enum=accesscontrol.FailoverType" json:"failover,omitempty"`
	// Distributed rate limiting service cluster information
	Cluster *RateLimitCluster `protobuf:"bytes,21,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Called method name
	Method *MatchString `protobuf:"bytes,22,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Rule) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Rule) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Rule) GetSubset() map[string]*MatchString {
	if x != nil {
		return x.Subset
	}
	return nil
}

func (x *Rule) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Rule) GetResource() ResourceType {
	if x != nil {
		return x.Resource
	}
	return ResourceType_QPS
}

func (x *Rule) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_GLOBAL
}

func (x *Rule) GetLabels() map[string]*MatchString {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Rule) GetAmounts() []*Amount {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *Rule) GetAction() *wrapperspb.StringValue {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Rule) GetDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disable
	}
	return nil
}

func (x *Rule) GetReport() *ReportPolicy {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Rule) GetCtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *Rule) GetMtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *Rule) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Rule) GetServiceToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceToken
	}
	return nil
}

func (x *Rule) GetAdjuster() *AmountAdjusterAlgorithm {
	if x != nil {
		return x.Adjuster
	}
	return nil
}

func (x *Rule) GetRegexCombine() *wrapperspb.BoolValue {
	if x != nil {
		return x.RegexCombine
	}
	return nil
}

func (x *Rule) GetAmountMode() AmountMode {
	if x != nil {
		return x.AmountMode
	}
	return AmountMode_GLOBAL_TOTAL
}

func (x *Rule) GetFailover() FailoverType {
	if x != nil {
		return x.Failover
	}
	return FailoverType_FAILOVER_LOCAL
}

func (x *Rule) GetCluster() *RateLimitCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Rule) GetMethod() *MatchString {
	if x != nil {
		return x.Method
	}
	return nil
}

// Match regular expression
type MatchString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  MatchString_MatchStringType `protobuf:"varint,1,opt,name=type,proto3,enum=accesscontrol.MatchString_MatchStringType" json:"type,omitempty"`
	Value *wrapperspb.StringValue     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchString) Reset() {
	*x = MatchString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchString) ProtoMessage() {}

func (x *MatchString) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchString.ProtoReflect.Descriptor instead.
func (*MatchString) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{2}
}

func (x *MatchString) GetType() MatchString_MatchStringType {
	if x != nil {
		return x.Type
	}
	return MatchString_EXACT
}

func (x *MatchString) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Rate limiting quota
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of quotas in a time period
	MaxAmount *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	// The time period during which the quota takes effect, which must be greater than or equal to 1 s
	ValidDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=validDuration,proto3" json:"validDuration,omitempty"`
	// Request statistical precision ?
	Precision *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=precision,proto3" json:"precision,omitempty"`
	// Optional, start current limit threshold, start value of ramp
	StartAmount *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=startAmount,proto3" json:"startAmount,omitempty"`
	// Optional, minimum current limit threshold, minimum when decreasing
	MinAmount *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{3}
}

func (x *Amount) GetMaxAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxAmount
	}
	return nil
}

func (x *Amount) GetValidDuration() *durationpb.Duration {
	if x != nil {
		return x.ValidDuration
	}
	return nil
}

func (x *Amount) GetPrecision() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *Amount) GetStartAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.StartAmount
	}
	return nil
}

func (x *Amount) GetMinAmount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinAmount
	}
	return nil
}

// In distributed current limiting mode, each node reports quota policy
type ReportPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fixed quota reporting period, in milliseconds
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Start a real-time report after the percentage of quota used, the value range (0,100]
	AmountPercent *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=amountPercent,proto3" json:"amountPercent,omitempty"`
}

func (x *ReportPolicy) Reset() {
	*x = ReportPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPolicy) ProtoMessage() {}

func (x *ReportPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPolicy.ProtoReflect.Descriptor instead.
func (*ReportPolicy) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{4}
}

func (x *ReportPolicy) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ReportPolicy) GetAmountPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AmountPercent
	}
	return nil
}

// Amount adjustment algorithm
type AmountAdjusterAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Climb *ClimbConfig `protobuf:"bytes,1,opt,name=climb,proto3" json:"climb,omitempty"`
}

func (x *AmountAdjusterAlgorithm) Reset() {
	*x = AmountAdjusterAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountAdjusterAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountAdjusterAlgorithm) ProtoMessage() {}

func (x *AmountAdjusterAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountAdjusterAlgorithm.ProtoReflect.Descriptor instead.
func (*AmountAdjusterAlgorithm) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{5}
}

func (x *AmountAdjusterAlgorithm) GetClimb() *ClimbConfig {
	if x != nil {
		return x.Climb
	}
	return nil
}

// Rate limiting adjustment algorithm climb related configuration
type ClimbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switch whether to enable amount adjustment
	Enable *wrapperspb.BoolValue     `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Metric *ClimbConfig_MetricConfig `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
	// Trigger adjustment strategy
	Policy *ClimbConfig_TriggerPolicy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	// Current limiting adjustment related parameters
	Throttling *ClimbConfig_ClimbThrottling `protobuf:"bytes,4,opt,name=throttling,proto3" json:"throttling,omitempty"`
}

func (x *ClimbConfig) Reset() {
	*x = ClimbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig) ProtoMessage() {}

func (x *ClimbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6}
}

func (x *ClimbConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig) GetMetric() *ClimbConfig_MetricConfig {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ClimbConfig) GetPolicy() *ClimbConfig_TriggerPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ClimbConfig) GetThrottling() *ClimbConfig_ClimbThrottling {
	if x != nil {
		return x.Throttling
	}
	return nil
}

// Distributed rate limiting service cluster
type RateLimitCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service to which the rate limiting cluster belongs
	Service *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// The namespace to which the rate limiting cluster belongs
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RateLimitCluster) Reset() {
	*x = RateLimitCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitCluster) ProtoMessage() {}

func (x *RateLimitCluster) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitCluster.ProtoReflect.Descriptor instead.
func (*RateLimitCluster) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{7}
}

func (x *RateLimitCluster) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *RateLimitCluster) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// Rate limiting data statistics configuration
type ClimbConfig_MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rate limit data measurement period, default 60 s
	Window *durationpb.Duration `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	// The statistical precision of the data, which determines the minimum period of the data measurement,
	// the step size of the measurement sliding window = window/precision
	Precision *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	// Reporting period, the default is 20 s
	ReportInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=reportInterval,proto3" json:"reportInterval,omitempty"`
}

func (x *ClimbConfig_MetricConfig) Reset() {
	*x = ClimbConfig_MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_MetricConfig) ProtoMessage() {}

func (x *ClimbConfig_MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_MetricConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig_MetricConfig) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ClimbConfig_MetricConfig) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ClimbConfig_MetricConfig) GetPrecision() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ClimbConfig_MetricConfig) GetReportInterval() *durationpb.Duration {
	if x != nil {
		return x.ReportInterval
	}
	return nil
}

// Strategies that trigger adjustments
type ClimbConfig_TriggerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjusted by error rate threshold
	ErrorRate *ClimbConfig_TriggerPolicy_ErrorRate `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	// Slow call for trigger adjustment
	SlowRate *ClimbConfig_TriggerPolicy_SlowRate `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
}

func (x *ClimbConfig_TriggerPolicy) Reset() {
	*x = ClimbConfig_TriggerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ClimbConfig_TriggerPolicy) GetErrorRate() *ClimbConfig_TriggerPolicy_ErrorRate {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy) GetSlowRate() *ClimbConfig_TriggerPolicy_SlowRate {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

// Climb adjustment related parameters
type ClimbConfig_ClimbThrottling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percent reduction in the range below the cold water level
	ColdBelowTuneDownRate *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=coldBelowTuneDownRate,proto3" json:"coldBelowTuneDownRate,omitempty"`
	// Upward percentage of range below cold water level
	ColdBelowTuneUpRate *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=coldBelowTuneUpRate,proto3" json:"coldBelowTuneUpRate,omitempty"`
	// Percent reduction in range above cold water level
	ColdAboveTuneDownRate *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=coldAboveTuneDownRate,proto3" json:"coldAboveTuneDownRate,omitempty"`
	// Upward percentage of range above cold water level
	ColdAboveTuneUpRate *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=coldAboveTuneUpRate,proto3" json:"coldAboveTuneUpRate,omitempty"`
	// Above the cold water level, the threshold will be raised after requests exceeding this percentage are throttled
	LimitThresholdToTuneUp *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=limitThresholdToTuneUp,proto3" json:"limitThresholdToTuneUp,omitempty"`
	// Decision interval for threshold adjustment rules
	JudgeDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	// The number of cycles for the threshold to be raised, and the upward adjustment is performed only after N consecutive decision intervals are raised
	TuneUpPeriod *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=tuneUpPeriod,proto3" json:"tuneUpPeriod,omitempty"`
	// The number of cycles of threshold down-regulation, the down-regulation is performed only after N consecutive decision-making intervals are down-regulation
	TuneDownPeriod *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=tuneDownPeriod,proto3" json:"tuneDownPeriod,omitempty"`
}

func (x *ClimbConfig_ClimbThrottling) Reset() {
	*x = ClimbConfig_ClimbThrottling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_ClimbThrottling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_ClimbThrottling) ProtoMessage() {}

func (x *ClimbConfig_ClimbThrottling) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_ClimbThrottling.ProtoReflect.Descriptor instead.
func (*ClimbConfig_ClimbThrottling) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ClimbConfig_ClimbThrottling) GetColdBelowTuneDownRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdBelowTuneDownRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdBelowTuneUpRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdBelowTuneUpRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdAboveTuneDownRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdAboveTuneDownRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetColdAboveTuneUpRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ColdAboveTuneUpRate
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetLimitThresholdToTuneUp() *wrapperspb.Int32Value {
	if x != nil {
		return x.LimitThresholdToTuneUp
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetJudgeDuration() *durationpb.Duration {
	if x != nil {
		return x.JudgeDuration
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetTuneUpPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TuneUpPeriod
	}
	return nil
}

func (x *ClimbConfig_ClimbThrottling) GetTuneDownPeriod() *wrapperspb.Int32Value {
	if x != nil {
		return x.TuneDownPeriod
	}
	return nil
}

// Error rate trigger adjustment configuration
type ClimbConfig_TriggerPolicy_ErrorRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Whether to enable
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Minimum number of requests to trigger throttling adjustment
	RequestVolumeThreshold *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	// Error rate that triggers current limiting
	ErrorRate *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	// For some error codes, additional error rate statistics can be used, and multiple sets of special rules can be set
	Specials []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig `protobuf:"bytes,4,rep,name=specials,proto3" json:"specials,omitempty"`
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) Reset() {
	*x = ClimbConfig_TriggerPolicy_ErrorRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_ErrorRate) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_ErrorRate.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_ErrorRate) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 1, 0}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetRequestVolumeThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolumeThreshold
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetErrorRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate) GetSpecials() []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig {
	if x != nil {
		return x.Specials
	}
	return nil
}

// Slow call triggers adjustment configuration
type ClimbConfig_TriggerPolicy_SlowRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Whether to enable
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The maximum response time, exceeding the response time is a slow call
	MaxRt *durationpb.Duration `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	// Slow request rate threshold, when this threshold is reached, current limiting
	SlowRate *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) Reset() {
	*x = ClimbConfig_TriggerPolicy_SlowRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_SlowRate) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_SlowRate) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_SlowRate.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_SlowRate) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 1, 1}
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetMaxRt() *durationpb.Duration {
	if x != nil {
		return x.MaxRt
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_SlowRate) GetSlowRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

// Special error code trigger adjustment configuration
type ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom error type
	Type *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Error codes targeted by specific rules
	ErrorCodes []*wrapperspb.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	// Specific rule error rate
	ErrorRate *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Reset() {
	*x = ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoMessage() {}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.ProtoReflect.Descriptor instead.
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Descriptor() ([]byte, []int) {
	return file_limiter_proto_rawDescGZIP(), []int{6, 1, 0, 0}
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorCodes() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorRate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

var File_limiter_proto protoreflect.FileDescriptor

var file_limiter_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x85, 0x0b, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x65, 0x78, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x55, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x0f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x47, 0x45, 0x58, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x10, 0x04, 0x22, 0x15, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x22, 0xbd, 0x02, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x17, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63, 0x6c,
	0x69, 0x6d, 0x62, 0x22, 0x92, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0xc0, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xc8, 0x06, 0x0a, 0x0d, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x03, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x5c, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xb9, 0x01,
	0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x6c,
	0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x61,
	0x78, 0x52, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x77,
	0x52, 0x61, 0x74, 0x65, 0x1a, 0xf1, 0x04, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x6d, 0x62, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x64,
	0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54,
	0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63,
	0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77,
	0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76,
	0x65, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a,
	0x13, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x16,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x6f,
	0x54, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x54, 0x75, 0x6e, 0x65, 0x55,
	0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x65, 0x55, 0x70, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x6e, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2a, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x50, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x2a, 0x1d, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0a, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x01, 0x2a, 0x35, 0x0a,
	0x0c, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x10, 0x01, 0x42, 0x3c, 0x0a, 0x24, 0x63, 0x6e, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5a, 0x14, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_limiter_proto_rawDescOnce sync.Once
	file_limiter_proto_rawDescData = file_limiter_proto_rawDesc
)

func file_limiter_proto_rawDescGZIP() []byte {
	file_limiter_proto_rawDescOnce.Do(func() {
		file_limiter_proto_rawDescData = protoimpl.X.CompressGZIP(file_limiter_proto_rawDescData)
	})
	return file_limiter_proto_rawDescData
}

var file_limiter_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_limiter_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_limiter_proto_goTypes = []interface{}{
	(ResourceType)(0),                   // 0: accesscontrol.ResourceType
	(Type)(0),                           // 1: accesscontrol.Type
	(AmountMode)(0),                     // 2: accesscontrol.AmountMode
	(FailoverType)(0),                   // 3: accesscontrol.FailoverType
	(MatchString_MatchStringType)(0),    // 4: accesscontrol.MatchString.MatchStringType
	(MatchString_ValueType)(0),          // 5: accesscontrol.MatchString.ValueType
	(*RateLimit)(nil),                   // 6: accesscontrol.RateLimit
	(*Rule)(nil),                        // 7: accesscontrol.Rule
	(*MatchString)(nil),                 // 8: accesscontrol.MatchString
	(*Amount)(nil),                      // 9: accesscontrol.Amount
	(*ReportPolicy)(nil),                // 10: accesscontrol.ReportPolicy
	(*AmountAdjusterAlgorithm)(nil),     // 11: accesscontrol.AmountAdjusterAlgorithm
	(*ClimbConfig)(nil),                 // 12: accesscontrol.ClimbConfig
	(*RateLimitCluster)(nil),            // 13: accesscontrol.RateLimitCluster
	nil,                                 // 14: accesscontrol.Rule.SubsetEntry
	nil,                                 // 15: accesscontrol.Rule.LabelsEntry
	(*ClimbConfig_MetricConfig)(nil),    // 16: accesscontrol.ClimbConfig.MetricConfig
	(*ClimbConfig_TriggerPolicy)(nil),   // 17: accesscontrol.ClimbConfig.TriggerPolicy
	(*ClimbConfig_ClimbThrottling)(nil), // 18: accesscontrol.ClimbConfig.ClimbThrottling
	(*ClimbConfig_TriggerPolicy_ErrorRate)(nil),               // 19: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate
	(*ClimbConfig_TriggerPolicy_SlowRate)(nil),                // 20: accesscontrol.ClimbConfig.TriggerPolicy.SlowRate
	(*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig)(nil), // 21: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig
	(*wrapperspb.StringValue)(nil),                            // 22: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                            // 23: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                              // 24: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                               // 25: google.protobuf.Duration
	(*wrapperspb.Int32Value)(nil),                             // 26: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),                             // 27: google.protobuf.Int64Value
}
var file_limiter_proto_depIdxs = []int32{
	7,  // 0: accesscontrol.RateLimit.rules:type_name -> accesscontrol.Rule
	22, // 1: accesscontrol.RateLimit.revision:type_name -> google.protobuf.StringValue
	22, // 2: accesscontrol.Rule.id:type_name -> google.protobuf.StringValue
	22, // 3: accesscontrol.Rule.service:type_name -> google.protobuf.StringValue
	22, // 4: accesscontrol.Rule.namespace:type_name -> google.protobuf.StringValue
	14, // 5: accesscontrol.Rule.subset:type_name -> accesscontrol.Rule.SubsetEntry
	23, // 6: accesscontrol.Rule.priority:type_name -> google.protobuf.UInt32Value
	0,  // 7: accesscontrol.Rule.resource:type_name -> accesscontrol.ResourceType
	1,  // 8: accesscontrol.Rule.type:type_name -> accesscontrol.Type
	15, // 9: accesscontrol.Rule.labels:type_name -> accesscontrol.Rule.LabelsEntry
	9,  // 10: accesscontrol.Rule.amounts:type_name -> accesscontrol.Amount
	22, // 11: accesscontrol.Rule.action:type_name -> google.protobuf.StringValue
	24, // 12: accesscontrol.Rule.disable:type_name -> google.protobuf.BoolValue
	10, // 13: accesscontrol.Rule.report:type_name -> accesscontrol.ReportPolicy
	22, // 14: accesscontrol.Rule.ctime:type_name -> google.protobuf.StringValue
	22, // 15: accesscontrol.Rule.mtime:type_name -> google.protobuf.StringValue
	22, // 16: accesscontrol.Rule.revision:type_name -> google.protobuf.StringValue
	22, // 17: accesscontrol.Rule.service_token:type_name -> google.protobuf.StringValue
	11, // 18: accesscontrol.Rule.adjuster:type_name -> accesscontrol.AmountAdjusterAlgorithm
	24, // 19: accesscontrol.Rule.regex_combine:type_name -> google.protobuf.BoolValue
	2,  // 20: accesscontrol.Rule.amount_mode:type_name -> accesscontrol.AmountMode
	3,  // 21: accesscontrol.Rule.failover:type_name -> accesscontrol.FailoverType
	13, // 22: accesscontrol.Rule.cluster:type_name -> accesscontrol.RateLimitCluster
	8,  // 23: accesscontrol.Rule.method:type_name -> accesscontrol.MatchString
	4,  // 24: accesscontrol.MatchString.type:type_name -> accesscontrol.MatchString.MatchStringType
	22, // 25: accesscontrol.MatchString.value:type_name -> google.protobuf.StringValue
	23, // 26: accesscontrol.Amount.maxAmount:type_name -> google.protobuf.UInt32Value
	25, // 27: accesscontrol.Amount.validDuration:type_name -> google.protobuf.Duration
	23, // 28: accesscontrol.Amount.precision:type_name -> google.protobuf.UInt32Value
	23, // 29: accesscontrol.Amount.startAmount:type_name -> google.protobuf.UInt32Value
	23, // 30: accesscontrol.Amount.minAmount:type_name -> google.protobuf.UInt32Value
	25, // 31: accesscontrol.ReportPolicy.interval:type_name -> google.protobuf.Duration
	23, // 32: accesscontrol.ReportPolicy.amountPercent:type_name -> google.protobuf.UInt32Value
	12, // 33: accesscontrol.AmountAdjusterAlgorithm.climb:type_name -> accesscontrol.ClimbConfig
	24, // 34: accesscontrol.ClimbConfig.enable:type_name -> google.protobuf.BoolValue
	16, // 35: accesscontrol.ClimbConfig.metric:type_name -> accesscontrol.ClimbConfig.MetricConfig
	17, // 36: accesscontrol.ClimbConfig.policy:type_name -> accesscontrol.ClimbConfig.TriggerPolicy
	18, // 37: accesscontrol.ClimbConfig.throttling:type_name -> accesscontrol.ClimbConfig.ClimbThrottling
	22, // 38: accesscontrol.RateLimitCluster.service:type_name -> google.protobuf.StringValue
	22, // 39: accesscontrol.RateLimitCluster.namespace:type_name -> google.protobuf.StringValue
	8,  // 40: accesscontrol.Rule.SubsetEntry.value:type_name -> accesscontrol.MatchString
	8,  // 41: accesscontrol.Rule.LabelsEntry.value:type_name -> accesscontrol.MatchString
	25, // 42: accesscontrol.ClimbConfig.MetricConfig.window:type_name -> google.protobuf.Duration
	23, // 43: accesscontrol.ClimbConfig.MetricConfig.precision:type_name -> google.protobuf.UInt32Value
	25, // 44: accesscontrol.ClimbConfig.MetricConfig.reportInterval:type_name -> google.protobuf.Duration
	19, // 45: accesscontrol.ClimbConfig.TriggerPolicy.errorRate:type_name -> accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate
	20, // 46: accesscontrol.ClimbConfig.TriggerPolicy.slowRate:type_name -> accesscontrol.ClimbConfig.TriggerPolicy.SlowRate
	26, // 47: accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneDownRate:type_name -> google.protobuf.Int32Value
	26, // 48: accesscontrol.ClimbConfig.ClimbThrottling.coldBelowTuneUpRate:type_name -> google.protobuf.Int32Value
	26, // 49: accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneDownRate:type_name -> google.protobuf.Int32Value
	26, // 50: accesscontrol.ClimbConfig.ClimbThrottling.coldAboveTuneUpRate:type_name -> google.protobuf.Int32Value
	26, // 51: accesscontrol.ClimbConfig.ClimbThrottling.limitThresholdToTuneUp:type_name -> google.protobuf.Int32Value
	25, // 52: accesscontrol.ClimbConfig.ClimbThrottling.judgeDuration:type_name -> google.protobuf.Duration
	26, // 53: accesscontrol.ClimbConfig.ClimbThrottling.tuneUpPeriod:type_name -> google.protobuf.Int32Value
	26, // 54: accesscontrol.ClimbConfig.ClimbThrottling.tuneDownPeriod:type_name -> google.protobuf.Int32Value
	24, // 55: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.enable:type_name -> google.protobuf.BoolValue
	23, // 56: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.requestVolumeThreshold:type_name -> google.protobuf.UInt32Value
	26, // 57: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.errorRate:type_name -> google.protobuf.Int32Value
	21, // 58: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.specials:type_name -> accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig
	24, // 59: accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.enable:type_name -> google.protobuf.BoolValue
	25, // 60: accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.maxRt:type_name -> google.protobuf.Duration
	26, // 61: accesscontrol.ClimbConfig.TriggerPolicy.SlowRate.slowRate:type_name -> google.protobuf.Int32Value
	22, // 62: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.type:type_name -> google.protobuf.StringValue
	27, // 63: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorCodes:type_name -> google.protobuf.Int64Value
	26, // 64: accesscontrol.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig.errorRate:type_name -> google.protobuf.Int32Value
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_limiter_proto_init() }
func file_limiter_proto_init() {
	if File_limiter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_limiter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountAdjusterAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_ClimbThrottling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_ErrorRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_SlowRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_limiter_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_limiter_proto_goTypes,
		DependencyIndexes: file_limiter_proto_depIdxs,
		EnumInfos:         file_limiter_proto_enumTypes,
		MessageInfos:      file_limiter_proto_msgTypes,
	}.Build()
	File_limiter_proto = out.File
	file_limiter_proto_rawDesc = nil
	file_limiter_proto_goTypes = nil
	file_limiter_proto_depIdxs = nil
}
