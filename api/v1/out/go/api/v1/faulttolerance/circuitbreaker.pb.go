// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.0
// source: circuitbreaker.proto

package faulttolerance

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchString_MatchStringType int32

const (
	// Equivalent match
	MatchString_EXACT MatchString_MatchStringType = 0
	// Regular match
	MatchString_REGEX MatchString_MatchStringType = 1
	// Not equals match
	MatchString_NOT_EQUALS MatchString_MatchStringType = 2
	// Include match
	MatchString_INCLUDE MatchString_MatchStringType = 3
	// Not include match
	MatchString_NOT_INCLUDE MatchString_MatchStringType = 4
)

// Enum value maps for MatchString_MatchStringType.
var (
	MatchString_MatchStringType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
		2: "NOT_EQUALS",
		3: "INCLUDE",
		4: "NOT_INCLUDE",
	}
	MatchString_MatchStringType_value = map[string]int32{
		"EXACT":       0,
		"REGEX":       1,
		"NOT_EQUALS":  2,
		"INCLUDE":     3,
		"NOT_INCLUDE": 4,
	}
)

func (x MatchString_MatchStringType) Enum() *MatchString_MatchStringType {
	p := new(MatchString_MatchStringType)
	*p = x
	return p
}

func (x MatchString_MatchStringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_MatchStringType) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[0].Descriptor()
}

func (MatchString_MatchStringType) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[0]
}

func (x MatchString_MatchStringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_MatchStringType.Descriptor instead.
func (MatchString_MatchStringType) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{0, 0}
}

type MatchString_ValueType int32

const (
	// Routing rules write dead data
	MatchString_TEXT MatchString_ValueType = 0
)

// Enum value maps for MatchString_ValueType.
var (
	MatchString_ValueType_name = map[int32]string{
		0: "TEXT",
	}
	MatchString_ValueType_value = map[string]int32{
		"TEXT": 0,
	}
)

func (x MatchString_ValueType) Enum() *MatchString_ValueType {
	p := new(MatchString_ValueType)
	*p = x
	return p
}

func (x MatchString_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchString_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[1].Descriptor()
}

func (MatchString_ValueType) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[1]
}

func (x MatchString_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchString_ValueType.Descriptor instead.
func (MatchString_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{0, 1}
}

//主动探测配置
type RecoverConfig_OutlierDetectWhen int32

const (
	//不开启监控探测
	RecoverConfig_NEVER RecoverConfig_OutlierDetectWhen = 0
	//只有在熔断恢复时才开启健康探测
	RecoverConfig_ON_RECOVER RecoverConfig_OutlierDetectWhen = 1
	//一直开启健康探测
	RecoverConfig_ALWAYS RecoverConfig_OutlierDetectWhen = 2
)

// Enum value maps for RecoverConfig_OutlierDetectWhen.
var (
	RecoverConfig_OutlierDetectWhen_name = map[int32]string{
		0: "NEVER",
		1: "ON_RECOVER",
		2: "ALWAYS",
	}
	RecoverConfig_OutlierDetectWhen_value = map[string]int32{
		"NEVER":      0,
		"ON_RECOVER": 1,
		"ALWAYS":     2,
	}
)

func (x RecoverConfig_OutlierDetectWhen) Enum() *RecoverConfig_OutlierDetectWhen {
	p := new(RecoverConfig_OutlierDetectWhen)
	*p = x
	return p
}

func (x RecoverConfig_OutlierDetectWhen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoverConfig_OutlierDetectWhen) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[2].Descriptor()
}

func (RecoverConfig_OutlierDetectWhen) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[2]
}

func (x RecoverConfig_OutlierDetectWhen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecoverConfig_OutlierDetectWhen.Descriptor instead.
func (RecoverConfig_OutlierDetectWhen) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3, 0}
}

// 需要进行熔断的资源
// 支持SUBSET（实例分组），以及INSTANCE（单个实例），默认为INSTANCE
type DestinationSet_Resource int32

const (
	// 针对实例分组进行熔断
	DestinationSet_SUBSET DestinationSet_Resource = 0
	// 针对实例进行熔断
	DestinationSet_INSTANCE DestinationSet_Resource = 1
)

// Enum value maps for DestinationSet_Resource.
var (
	DestinationSet_Resource_name = map[int32]string{
		0: "SUBSET",
		1: "INSTANCE",
	}
	DestinationSet_Resource_value = map[string]int32{
		"SUBSET":   0,
		"INSTANCE": 1,
	}
)

func (x DestinationSet_Resource) Enum() *DestinationSet_Resource {
	p := new(DestinationSet_Resource)
	*p = x
	return p
}

func (x DestinationSet_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationSet_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitbreaker_proto_enumTypes[3].Descriptor()
}

func (DestinationSet_Resource) Type() protoreflect.EnumType {
	return &file_circuitbreaker_proto_enumTypes[3]
}

func (x DestinationSet_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationSet_Resource.Descriptor instead.
func (DestinationSet_Resource) EnumDescriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{5, 0}
}

// MatchString
type MatchString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matching rule
	Type MatchString_MatchStringType `protobuf:"varint,1,opt,name=type,proto3,enum=faulttolerance.MatchString_MatchStringType" json:"type,omitempty"`
	// Routing rules
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MatchString) Reset() {
	*x = MatchString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchString) ProtoMessage() {}

func (x *MatchString) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchString.ProtoReflect.Descriptor instead.
func (*MatchString) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{0}
}

func (x *MatchString) GetType() MatchString_MatchStringType {
	if x != nil {
		return x.Type
	}
	return MatchString_EXACT
}

func (x *MatchString) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

//单个熔断规则定义
type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 规则版本
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// 规则名
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 规则命名空间
	Namespace *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 规则所属服务
	Service          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ServiceNamespace *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	//熔断规则可以分为被调规则和主调规则
	//被调规则针对所有的指定主调生效，假如不指定则对所有的主调生效
	//主调规则为当前主调方的规则，假如不指定则针对所有被调生效
	Inbounds  []*CbRule               `protobuf:"bytes,7,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	Outbounds []*CbRule               `protobuf:"bytes,8,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	Token     *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	Owners    *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=owners,proto3" json:"owners,omitempty"`
	// 业务
	Business *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=business,proto3" json:"business,omitempty"`
	// 部门
	Department *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=department,proto3" json:"department,omitempty"`
	// 规则描述
	Comment  *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Ctime    *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{1}
}

func (x *CircuitBreaker) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CircuitBreaker) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CircuitBreaker) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CircuitBreaker) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CircuitBreaker) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *CircuitBreaker) GetServiceNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceNamespace
	}
	return nil
}

func (x *CircuitBreaker) GetInbounds() []*CbRule {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

func (x *CircuitBreaker) GetOutbounds() []*CbRule {
	if x != nil {
		return x.Outbounds
	}
	return nil
}

func (x *CircuitBreaker) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CircuitBreaker) GetOwners() *wrapperspb.StringValue {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *CircuitBreaker) GetBusiness() *wrapperspb.StringValue {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *CircuitBreaker) GetDepartment() *wrapperspb.StringValue {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *CircuitBreaker) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *CircuitBreaker) GetCtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *CircuitBreaker) GetMtime() *wrapperspb.StringValue {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *CircuitBreaker) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

// 主调方的参数
type SourceMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *SourceMatcher) Reset() {
	*x = SourceMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMatcher) ProtoMessage() {}

func (x *SourceMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMatcher.ProtoReflect.Descriptor instead.
func (*SourceMatcher) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{2}
}

func (x *SourceMatcher) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *SourceMatcher) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// 熔断恢复配置
type RecoverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 触发熔断后到半开状态之间的等待间隔
	SleepWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=sleepWindow,proto3" json:"sleepWindow,omitempty"`
	// 半开后，最多重试多少次恢复
	MaxRetryAfterHalfOpen *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=maxRetryAfterHalfOpen,proto3" json:"maxRetryAfterHalfOpen,omitempty"`
	// 半开后放量的最大百分比
	RequestRateAfterHalfOpen []*wrapperspb.UInt32Value `protobuf:"bytes,3,rep,name=requestRateAfterHalfOpen,proto3" json:"requestRateAfterHalfOpen,omitempty"`
	// 熔断器半开到关闭所必须的最少成功率，默认100%
	SuccessRateToClose *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=successRateToClose,proto3" json:"successRateToClose,omitempty"`
	// 半开后最大放量数（用户不配置最大百分比时默认使用该配置）
	RequestCountAfterHalfOpen *wrapperspb.UInt32Value         `protobuf:"bytes,5,opt,name=requestCountAfterHalfOpen,proto3" json:"requestCountAfterHalfOpen,omitempty"`
	OutlierDetectWhen         RecoverConfig_OutlierDetectWhen `protobuf:"varint,6,opt,name=outlierDetectWhen,proto3,enum=faulttolerance.RecoverConfig_OutlierDetectWhen" json:"outlierDetectWhen,omitempty"`
}

func (x *RecoverConfig) Reset() {
	*x = RecoverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverConfig) ProtoMessage() {}

func (x *RecoverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverConfig.ProtoReflect.Descriptor instead.
func (*RecoverConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{3}
}

func (x *RecoverConfig) GetSleepWindow() *durationpb.Duration {
	if x != nil {
		return x.SleepWindow
	}
	return nil
}

func (x *RecoverConfig) GetMaxRetryAfterHalfOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRetryAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetRequestRateAfterHalfOpen() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestRateAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetSuccessRateToClose() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SuccessRateToClose
	}
	return nil
}

func (x *RecoverConfig) GetRequestCountAfterHalfOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestCountAfterHalfOpen
	}
	return nil
}

func (x *RecoverConfig) GetOutlierDetectWhen() RecoverConfig_OutlierDetectWhen {
	if x != nil {
		return x.OutlierDetectWhen
	}
	return RecoverConfig_NEVER
}

// 熔断策略
type CbPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorRate *CbPolicy_ErrRateConfig  `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	SlowRate  *CbPolicy_SlowRateConfig `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	// 熔断的决策周期，多久触发一次熔断决策
	JudgeDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	//最大熔断比例，超过多少比例后不会继续熔断
	MaxEjectionPercent *wrapperspb.UInt32Value        `protobuf:"bytes,4,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	Consecutive        *CbPolicy_ConsecutiveErrConfig `protobuf:"bytes,5,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
}

func (x *CbPolicy) Reset() {
	*x = CbPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy) ProtoMessage() {}

func (x *CbPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy.ProtoReflect.Descriptor instead.
func (*CbPolicy) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4}
}

func (x *CbPolicy) GetErrorRate() *CbPolicy_ErrRateConfig {
	if x != nil {
		return x.ErrorRate
	}
	return nil
}

func (x *CbPolicy) GetSlowRate() *CbPolicy_SlowRateConfig {
	if x != nil {
		return x.SlowRate
	}
	return nil
}

func (x *CbPolicy) GetJudgeDuration() *durationpb.Duration {
	if x != nil {
		return x.JudgeDuration
	}
	return nil
}

func (x *CbPolicy) GetMaxEjectionPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return nil
}

func (x *CbPolicy) GetConsecutive() *CbPolicy_ConsecutiveErrConfig {
	if x != nil {
		return x.Consecutive
	}
	return nil
}

// 目标set的规则
type DestinationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Resource  DestinationSet_Resource `protobuf:"varint,4,opt,name=resource,proto3,enum=faulttolerance.DestinationSet_Resource" json:"resource,omitempty"`
	// 触发熔断后恢复配置
	Recover *RecoverConfig `protobuf:"bytes,10,opt,name=recover,proto3" json:"recover,omitempty"`
	// 熔断策略
	Policy *CbPolicy `protobuf:"bytes,11,opt,name=policy,proto3" json:"policy,omitempty"`
	// 被调的接口信息，指定针对那个接口进行熔断
	Method *MatchString `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *DestinationSet) Reset() {
	*x = DestinationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSet) ProtoMessage() {}

func (x *DestinationSet) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSet.ProtoReflect.Descriptor instead.
func (*DestinationSet) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{5}
}

func (x *DestinationSet) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DestinationSet) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *DestinationSet) GetResource() DestinationSet_Resource {
	if x != nil {
		return x.Resource
	}
	return DestinationSet_SUBSET
}

func (x *DestinationSet) GetRecover() *RecoverConfig {
	if x != nil {
		return x.Recover
	}
	return nil
}

func (x *DestinationSet) GetPolicy() *CbPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *DestinationSet) GetMethod() *MatchString {
	if x != nil {
		return x.Method
	}
	return nil
}

// 具体熔断规则
type CbRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果匹配Source规则，按照Destination进行熔断
	// 多个Source之间的关系为或
	Sources      []*SourceMatcher  `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations []*DestinationSet `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *CbRule) Reset() {
	*x = CbRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbRule) ProtoMessage() {}

func (x *CbRule) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbRule.ProtoReflect.Descriptor instead.
func (*CbRule) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{6}
}

func (x *CbRule) GetSources() []*SourceMatcher {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CbRule) GetDestinations() []*DestinationSet {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// 错误率熔断配置
type CbPolicy_ErrRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//是否启用错误率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 触发错误率熔断的最低请求阈值
	RequestVolumeThreshold *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	// 可选。触发保持状态的错误率阈值，假如不配置，则默认不会进入Preserved状态
	ErrorRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	// 触发熔断的错误率阈值
	ErrorRateToOpen *wrapperspb.UInt32Value                 `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	Specials        []*CbPolicy_ErrRateConfig_SpecialConfig `protobuf:"bytes,5,rep,name=specials,proto3" json:"specials,omitempty"`
}

func (x *CbPolicy_ErrRateConfig) Reset() {
	*x = CbPolicy_ErrRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ErrRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ErrRateConfig) ProtoMessage() {}

func (x *CbPolicy_ErrRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ErrRateConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ErrRateConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CbPolicy_ErrRateConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetRequestVolumeThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolumeThreshold
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToPreserved
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToOpen
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig) GetSpecials() []*CbPolicy_ErrRateConfig_SpecialConfig {
	if x != nil {
		return x.Specials
	}
	return nil
}

// 慢调用率熔断策略配置
type CbPolicy_SlowRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用慢调用率配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 最大响应时间，超过该时间属于慢调用请求
	MaxRt *durationpb.Duration `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	// 可选。触发保持状态的超时率阈值，假如不配置，则默认不会进入Preserved状态
	SlowRateToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=slowRateToPreserved,proto3" json:"slowRateToPreserved,omitempty"`
	// 触发熔断的超时率阈值
	SlowRateToOpen *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=slowRateToOpen,proto3" json:"slowRateToOpen,omitempty"`
}

func (x *CbPolicy_SlowRateConfig) Reset() {
	*x = CbPolicy_SlowRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_SlowRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_SlowRateConfig) ProtoMessage() {}

func (x *CbPolicy_SlowRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_SlowRateConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_SlowRateConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CbPolicy_SlowRateConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetMaxRt() *durationpb.Duration {
	if x != nil {
		return x.MaxRt
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetSlowRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlowRateToPreserved
	}
	return nil
}

func (x *CbPolicy_SlowRateConfig) GetSlowRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlowRateToOpen
	}
	return nil
}

//连续错误数熔断配置
type CbPolicy_ConsecutiveErrConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用连续错误数配置
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 连续错误数阈值，进入Preserved状态
	ConsecutiveErrorToPreserved *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=consecutiveErrorToPreserved,proto3" json:"consecutiveErrorToPreserved,omitempty"`
	// 连续错误数阈值，进入Open状态
	ConsecutiveErrorToOpen *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=consecutiveErrorToOpen,proto3" json:"consecutiveErrorToOpen,omitempty"`
}

func (x *CbPolicy_ConsecutiveErrConfig) Reset() {
	*x = CbPolicy_ConsecutiveErrConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ConsecutiveErrConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ConsecutiveErrConfig) ProtoMessage() {}

func (x *CbPolicy_ConsecutiveErrConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ConsecutiveErrConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ConsecutiveErrConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 2}
}

func (x *CbPolicy_ConsecutiveErrConfig) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConsecutiveErrorToPreserved
	}
	return nil
}

func (x *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConsecutiveErrorToOpen
	}
	return nil
}

//错误码相关特定配置
type CbPolicy_ErrRateConfig_SpecialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 熔断关心的错误类型，用户可以自己定义
	Type                 *wrapperspb.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ErrorCodes           []*wrapperspb.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	ErrorRateToPreserved *wrapperspb.UInt32Value  `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	ErrorRateToOpen      *wrapperspb.UInt32Value  `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) Reset() {
	*x = CbPolicy_ErrRateConfig_SpecialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circuitbreaker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CbPolicy_ErrRateConfig_SpecialConfig) ProtoMessage() {}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_circuitbreaker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CbPolicy_ErrRateConfig_SpecialConfig.ProtoReflect.Descriptor instead.
func (*CbPolicy_ErrRateConfig_SpecialConfig) Descriptor() ([]byte, []int) {
	return file_circuitbreaker_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorCodes() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToPreserved() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToPreserved
	}
	return nil
}

func (x *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToOpen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ErrorRateToOpen
	}
	return nil
}

var File_circuitbreaker_proto protoreflect.FileDescriptor

var file_circuitbreaker_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47,
	0x45, 0x58, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x10, 0x04, 0x22, 0x15, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x22, 0x8d, 0x07, 0x0a, 0x0e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x62, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xbf, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x52,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x58, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x12,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x68,
	0x65, 0x6e, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x57, 0x68, 0x65, 0x6e, 0x22, 0x3a, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45,
	0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10,
	0x02, 0x22, 0xa9, 0x0c, 0x0a, 0x08, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xa0, 0x05, 0x0a, 0x0d, 0x45, 0x72,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x54, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x50, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x73, 0x1a, 0x98, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x8b, 0x02, 0x0a,
	0x0e, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x52, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x77,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x80, 0x02, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x9b, 0x03,
	0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x0a, 0x22, 0x85, 0x01, 0x0a, 0x06,
	0x43, 0x62, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x3e, 0x0a, 0x25, 0x63, 0x6e, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5a, 0x15, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_circuitbreaker_proto_rawDescOnce sync.Once
	file_circuitbreaker_proto_rawDescData = file_circuitbreaker_proto_rawDesc
)

func file_circuitbreaker_proto_rawDescGZIP() []byte {
	file_circuitbreaker_proto_rawDescOnce.Do(func() {
		file_circuitbreaker_proto_rawDescData = protoimpl.X.CompressGZIP(file_circuitbreaker_proto_rawDescData)
	})
	return file_circuitbreaker_proto_rawDescData
}

var file_circuitbreaker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_circuitbreaker_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_circuitbreaker_proto_goTypes = []interface{}{
	(MatchString_MatchStringType)(0),             // 0: faulttolerance.MatchString.MatchStringType
	(MatchString_ValueType)(0),                   // 1: faulttolerance.MatchString.ValueType
	(RecoverConfig_OutlierDetectWhen)(0),         // 2: faulttolerance.RecoverConfig.OutlierDetectWhen
	(DestinationSet_Resource)(0),                 // 3: faulttolerance.DestinationSet.Resource
	(*MatchString)(nil),                          // 4: faulttolerance.MatchString
	(*CircuitBreaker)(nil),                       // 5: faulttolerance.CircuitBreaker
	(*SourceMatcher)(nil),                        // 6: faulttolerance.SourceMatcher
	(*RecoverConfig)(nil),                        // 7: faulttolerance.RecoverConfig
	(*CbPolicy)(nil),                             // 8: faulttolerance.CbPolicy
	(*DestinationSet)(nil),                       // 9: faulttolerance.DestinationSet
	(*CbRule)(nil),                               // 10: faulttolerance.CbRule
	(*CbPolicy_ErrRateConfig)(nil),               // 11: faulttolerance.CbPolicy.ErrRateConfig
	(*CbPolicy_SlowRateConfig)(nil),              // 12: faulttolerance.CbPolicy.SlowRateConfig
	(*CbPolicy_ConsecutiveErrConfig)(nil),        // 13: faulttolerance.CbPolicy.ConsecutiveErrConfig
	(*CbPolicy_ErrRateConfig_SpecialConfig)(nil), // 14: faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig
	(*wrapperspb.StringValue)(nil),               // 15: google.protobuf.StringValue
	(*durationpb.Duration)(nil),                  // 16: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),               // 17: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                 // 18: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),                // 19: google.protobuf.Int64Value
}
var file_circuitbreaker_proto_depIdxs = []int32{
	0,  // 0: faulttolerance.MatchString.type:type_name -> faulttolerance.MatchString.MatchStringType
	15, // 1: faulttolerance.MatchString.value:type_name -> google.protobuf.StringValue
	15, // 2: faulttolerance.CircuitBreaker.id:type_name -> google.protobuf.StringValue
	15, // 3: faulttolerance.CircuitBreaker.version:type_name -> google.protobuf.StringValue
	15, // 4: faulttolerance.CircuitBreaker.name:type_name -> google.protobuf.StringValue
	15, // 5: faulttolerance.CircuitBreaker.namespace:type_name -> google.protobuf.StringValue
	15, // 6: faulttolerance.CircuitBreaker.service:type_name -> google.protobuf.StringValue
	15, // 7: faulttolerance.CircuitBreaker.service_namespace:type_name -> google.protobuf.StringValue
	10, // 8: faulttolerance.CircuitBreaker.inbounds:type_name -> faulttolerance.CbRule
	10, // 9: faulttolerance.CircuitBreaker.outbounds:type_name -> faulttolerance.CbRule
	15, // 10: faulttolerance.CircuitBreaker.token:type_name -> google.protobuf.StringValue
	15, // 11: faulttolerance.CircuitBreaker.owners:type_name -> google.protobuf.StringValue
	15, // 12: faulttolerance.CircuitBreaker.business:type_name -> google.protobuf.StringValue
	15, // 13: faulttolerance.CircuitBreaker.department:type_name -> google.protobuf.StringValue
	15, // 14: faulttolerance.CircuitBreaker.comment:type_name -> google.protobuf.StringValue
	15, // 15: faulttolerance.CircuitBreaker.ctime:type_name -> google.protobuf.StringValue
	15, // 16: faulttolerance.CircuitBreaker.mtime:type_name -> google.protobuf.StringValue
	15, // 17: faulttolerance.CircuitBreaker.revision:type_name -> google.protobuf.StringValue
	15, // 18: faulttolerance.SourceMatcher.service:type_name -> google.protobuf.StringValue
	15, // 19: faulttolerance.SourceMatcher.namespace:type_name -> google.protobuf.StringValue
	16, // 20: faulttolerance.RecoverConfig.sleepWindow:type_name -> google.protobuf.Duration
	17, // 21: faulttolerance.RecoverConfig.maxRetryAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	17, // 22: faulttolerance.RecoverConfig.requestRateAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	17, // 23: faulttolerance.RecoverConfig.successRateToClose:type_name -> google.protobuf.UInt32Value
	17, // 24: faulttolerance.RecoverConfig.requestCountAfterHalfOpen:type_name -> google.protobuf.UInt32Value
	2,  // 25: faulttolerance.RecoverConfig.outlierDetectWhen:type_name -> faulttolerance.RecoverConfig.OutlierDetectWhen
	11, // 26: faulttolerance.CbPolicy.errorRate:type_name -> faulttolerance.CbPolicy.ErrRateConfig
	12, // 27: faulttolerance.CbPolicy.slowRate:type_name -> faulttolerance.CbPolicy.SlowRateConfig
	16, // 28: faulttolerance.CbPolicy.judgeDuration:type_name -> google.protobuf.Duration
	17, // 29: faulttolerance.CbPolicy.maxEjectionPercent:type_name -> google.protobuf.UInt32Value
	13, // 30: faulttolerance.CbPolicy.consecutive:type_name -> faulttolerance.CbPolicy.ConsecutiveErrConfig
	15, // 31: faulttolerance.DestinationSet.service:type_name -> google.protobuf.StringValue
	15, // 32: faulttolerance.DestinationSet.namespace:type_name -> google.protobuf.StringValue
	3,  // 33: faulttolerance.DestinationSet.resource:type_name -> faulttolerance.DestinationSet.Resource
	7,  // 34: faulttolerance.DestinationSet.recover:type_name -> faulttolerance.RecoverConfig
	8,  // 35: faulttolerance.DestinationSet.policy:type_name -> faulttolerance.CbPolicy
	4,  // 36: faulttolerance.DestinationSet.method:type_name -> faulttolerance.MatchString
	6,  // 37: faulttolerance.CbRule.sources:type_name -> faulttolerance.SourceMatcher
	9,  // 38: faulttolerance.CbRule.destinations:type_name -> faulttolerance.DestinationSet
	18, // 39: faulttolerance.CbPolicy.ErrRateConfig.enable:type_name -> google.protobuf.BoolValue
	17, // 40: faulttolerance.CbPolicy.ErrRateConfig.requestVolumeThreshold:type_name -> google.protobuf.UInt32Value
	17, // 41: faulttolerance.CbPolicy.ErrRateConfig.errorRateToPreserved:type_name -> google.protobuf.UInt32Value
	17, // 42: faulttolerance.CbPolicy.ErrRateConfig.errorRateToOpen:type_name -> google.protobuf.UInt32Value
	14, // 43: faulttolerance.CbPolicy.ErrRateConfig.specials:type_name -> faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig
	18, // 44: faulttolerance.CbPolicy.SlowRateConfig.enable:type_name -> google.protobuf.BoolValue
	16, // 45: faulttolerance.CbPolicy.SlowRateConfig.maxRt:type_name -> google.protobuf.Duration
	17, // 46: faulttolerance.CbPolicy.SlowRateConfig.slowRateToPreserved:type_name -> google.protobuf.UInt32Value
	17, // 47: faulttolerance.CbPolicy.SlowRateConfig.slowRateToOpen:type_name -> google.protobuf.UInt32Value
	18, // 48: faulttolerance.CbPolicy.ConsecutiveErrConfig.enable:type_name -> google.protobuf.BoolValue
	17, // 49: faulttolerance.CbPolicy.ConsecutiveErrConfig.consecutiveErrorToPreserved:type_name -> google.protobuf.UInt32Value
	17, // 50: faulttolerance.CbPolicy.ConsecutiveErrConfig.consecutiveErrorToOpen:type_name -> google.protobuf.UInt32Value
	15, // 51: faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig.type:type_name -> google.protobuf.StringValue
	19, // 52: faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig.errorCodes:type_name -> google.protobuf.Int64Value
	17, // 53: faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig.errorRateToPreserved:type_name -> google.protobuf.UInt32Value
	17, // 54: faulttolerance.CbPolicy.ErrRateConfig.SpecialConfig.errorRateToOpen:type_name -> google.protobuf.UInt32Value
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_circuitbreaker_proto_init() }
func file_circuitbreaker_proto_init() {
	if File_circuitbreaker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_circuitbreaker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ErrRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_SlowRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ConsecutiveErrConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circuitbreaker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CbPolicy_ErrRateConfig_SpecialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circuitbreaker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_circuitbreaker_proto_goTypes,
		DependencyIndexes: file_circuitbreaker_proto_depIdxs,
		EnumInfos:         file_circuitbreaker_proto_enumTypes,
		MessageInfos:      file_circuitbreaker_proto_msgTypes,
	}.Build()
	File_circuitbreaker_proto = out.File
	file_circuitbreaker_proto_rawDesc = nil
	file_circuitbreaker_proto_goTypes = nil
	file_circuitbreaker_proto_depIdxs = nil
}
