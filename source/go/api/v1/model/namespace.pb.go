// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namespace.proto

package model // import "github.com/polarismesh/specification/source/go/api/v1/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Namespace struct {
	Name                     *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment                  *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Owners                   *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=owners,proto3" json:"owners,omitempty"`
	Token                    *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Ctime                    *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                    *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=mtime,proto3" json:"mtime,omitempty"`
	TotalServiceCount        *wrapperspb.UInt32Value   `protobuf:"bytes,7,opt,name=total_service_count,proto3" json:"total_service_count,omitempty"`
	TotalHealthInstanceCount *wrapperspb.UInt32Value   `protobuf:"bytes,8,opt,name=total_health_instance_count,proto3" json:"total_health_instance_count,omitempty"`
	TotalInstanceCount       *wrapperspb.UInt32Value   `protobuf:"bytes,9,opt,name=total_instance_count,proto3" json:"total_instance_count,omitempty"`
	UserIds                  []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=user_ids,proto3" json:"user_ids,omitempty"`
	GroupIds                 []*wrapperspb.StringValue `protobuf:"bytes,11,rep,name=group_ids,proto3" json:"group_ids,omitempty"`
	RemoveUserIds            []*wrapperspb.StringValue `protobuf:"bytes,13,rep,name=remove_user_ids,proto3" json:"remove_user_ids,omitempty"`
	RemoveGroupIds           []*wrapperspb.StringValue `protobuf:"bytes,14,rep,name=remove_group_ids,proto3" json:"remove_group_ids,omitempty"`
	Id                       *wrapperspb.StringValue   `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	Editable                 *wrapperspb.BoolValue     `protobuf:"bytes,15,opt,name=editable,proto3" json:"editable,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_namespace_4c28bd4f656413f8, []int{0}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (dst *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(dst, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetName() *wrapperspb.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Namespace) GetComment() *wrapperspb.StringValue {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *Namespace) GetOwners() *wrapperspb.StringValue {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Namespace) GetToken() *wrapperspb.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Namespace) GetCtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *Namespace) GetMtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Namespace) GetTotalServiceCount() *wrapperspb.UInt32Value {
	if m != nil {
		return m.TotalServiceCount
	}
	return nil
}

func (m *Namespace) GetTotalHealthInstanceCount() *wrapperspb.UInt32Value {
	if m != nil {
		return m.TotalHealthInstanceCount
	}
	return nil
}

func (m *Namespace) GetTotalInstanceCount() *wrapperspb.UInt32Value {
	if m != nil {
		return m.TotalInstanceCount
	}
	return nil
}

func (m *Namespace) GetUserIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *Namespace) GetGroupIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *Namespace) GetRemoveUserIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.RemoveUserIds
	}
	return nil
}

func (m *Namespace) GetRemoveGroupIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.RemoveGroupIds
	}
	return nil
}

func (m *Namespace) GetId() *wrapperspb.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Namespace) GetEditable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Editable
	}
	return nil
}

func init() {
	proto.RegisterType((*Namespace)(nil), "v1.Namespace")
}

func init() { proto.RegisterFile("namespace.proto", fileDescriptor_namespace_4c28bd4f656413f8) }

var fileDescriptor_namespace_4c28bd4f656413f8 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc7, 0x71, 0xba, 0x6d, 0xf7, 0xcf, 0x53, 0x75, 0x25, 0x7a, 0x08, 0x55, 0xa4, 0x78, 0xf2,
	0x20, 0x13, 0xbb, 0x95, 0x22, 0x8a, 0x97, 0x1e, 0x44, 0x2f, 0x45, 0x14, 0x3d, 0x78, 0x70, 0xc8,
	0x66, 0x9e, 0xce, 0x06, 0x93, 0x3c, 0x21, 0xc9, 0x6c, 0x5f, 0x9a, 0x6f, 0x4f, 0x36, 0xb3, 0xbb,
	0x85, 0x76, 0xd5, 0x5c, 0x33, 0xbf, 0xcf, 0x77, 0x86, 0x30, 0x30, 0x75, 0xd2, 0x62, 0xf4, 0x52,
	0x61, 0xe5, 0x03, 0x25, 0x62, 0x83, 0xe5, 0xe9, 0xf1, 0xb3, 0x96, 0xa8, 0x35, 0x28, 0xf2, 0xc9,
	0xbc, 0xbb, 0x12, 0xd7, 0x41, 0x7a, 0x8f, 0x21, 0xf6, 0x9b, 0xe7, 0xbf, 0x47, 0x30, 0xb9, 0xdc,
	0x38, 0xf6, 0x0a, 0x0e, 0x56, 0x11, 0xbe, 0x77, 0xb2, 0xf7, 0xe2, 0x68, 0xf6, 0xb4, 0xea, 0x71,
	0xb5, 0xc1, 0xd5, 0xd7, 0x14, 0xb4, 0x6b, 0xbf, 0x4b, 0xd3, 0xe1, 0x97, 0xbc, 0x64, 0xe7, 0x30,
	0x52, 0x64, 0x2d, 0xba, 0xc4, 0x07, 0x05, 0x68, 0x33, 0x66, 0xaf, 0x61, 0x48, 0xd7, 0x0e, 0x43,
	0xe4, 0xfb, 0x05, 0x6c, 0xbd, 0x65, 0x33, 0x38, 0x4c, 0xf4, 0x0b, 0x1d, 0x3f, 0x28, 0x40, 0xfd,
	0x74, 0x65, 0x54, 0xd2, 0x16, 0xf9, 0x61, 0x89, 0xc9, 0xd3, 0x95, 0xb1, 0xd9, 0x0c, 0x4b, 0x4c,
	0x9e, 0xb2, 0x4b, 0x78, 0x94, 0x28, 0x49, 0x53, 0x47, 0x0c, 0x4b, 0xad, 0xb0, 0x56, 0xd4, 0xb9,
	0xc4, 0x47, 0x7f, 0x29, 0x7c, 0xfb, 0xe4, 0xd2, 0xd9, 0xac, 0x2f, 0xec, 0x82, 0xec, 0x27, 0x3c,
	0xe9, 0x8f, 0x17, 0x28, 0x4d, 0x5a, 0xd4, 0xda, 0xc5, 0x24, 0xdd, 0xb6, 0x3b, 0x2e, 0xe8, 0xfe,
	0x2b, 0xc0, 0x3e, 0xc3, 0xe3, 0xfe, 0xf1, 0xad, 0xf0, 0xa4, 0x20, 0xbc, 0x53, 0xb2, 0x37, 0x30,
	0xee, 0x22, 0x86, 0x5a, 0x37, 0x91, 0xc3, 0xc9, 0xfe, 0x7f, 0x2f, 0x6e, 0xbb, 0x66, 0x6f, 0x61,
	0xd2, 0x06, 0xea, 0x7c, 0xa6, 0x47, 0x05, 0xf4, 0x66, 0xce, 0x3e, 0xc0, 0x34, 0xa0, 0xa5, 0x25,
	0xd6, 0xdb, 0x97, 0xdf, 0x2f, 0x28, 0xdc, 0x46, 0xec, 0x23, 0x3c, 0x5c, 0x1f, 0xdd, 0x7c, 0xca,
	0x83, 0x82, 0xd0, 0x1d, 0xc5, 0x5e, 0xc2, 0x40, 0x37, 0xfc, 0x5e, 0xc1, 0xaf, 0x33, 0xd0, 0x0d,
	0x3b, 0x87, 0x31, 0x36, 0x3a, 0xc9, 0xb9, 0x41, 0x3e, 0xcd, 0xe6, 0xf8, 0x8e, 0xb9, 0x20, 0x32,
	0xeb, 0x3b, 0xdb, 0x6c, 0x2f, 0xde, 0xff, 0x78, 0xd7, 0xea, 0xb4, 0xe8, 0xe6, 0x95, 0x22, 0x2b,
	0x3c, 0x19, 0x19, 0x74, 0xb4, 0x18, 0x17, 0x22, 0x7a, 0x54, 0xfa, 0x4a, 0x2b, 0x99, 0x34, 0x39,
	0x11, 0xa9, 0x0b, 0x0a, 0x45, 0x4b, 0x42, 0x7a, 0x2d, 0x96, 0xa7, 0xc2, 0x52, 0x83, 0x66, 0x3e,
	0xcc, 0xf1, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x15, 0x12, 0x02, 0x36, 0x04, 0x00,
	0x00,
}
