// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service_manage // import "github.com/polarismesh/specification/source/go/api/v1/service_manage"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/polarismesh/specification/source/go/api/v1/model"
import wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AliasType int32

const (
	AliasType_DEFAULT AliasType = 0
	AliasType_CL5SID  AliasType = 1
)

var AliasType_name = map[int32]string{
	0: "DEFAULT",
	1: "CL5SID",
}
var AliasType_value = map[string]int32{
	"DEFAULT": 0,
	"CL5SID":  1,
}

func (x AliasType) String() string {
	return proto.EnumName(AliasType_name, int32(x))
}
func (AliasType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{0}
}

type HealthCheck_HealthCheckType int32

const (
	HealthCheck_UNKNOWN   HealthCheck_HealthCheckType = 0
	HealthCheck_HEARTBEAT HealthCheck_HealthCheckType = 1
)

var HealthCheck_HealthCheckType_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEARTBEAT",
}
var HealthCheck_HealthCheckType_value = map[string]int32{
	"UNKNOWN":   0,
	"HEARTBEAT": 1,
}

func (x HealthCheck_HealthCheckType) String() string {
	return proto.EnumName(HealthCheck_HealthCheckType_name, int32(x))
}
func (HealthCheck_HealthCheckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{3, 0}
}

type Service struct {
	Name                 *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Metadata             map[string]string         `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports                *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=ports,proto3" json:"ports,omitempty"`
	Business             *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=business,proto3" json:"business,omitempty"`
	Department           *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=department,proto3" json:"department,omitempty"`
	CmdbMod1             *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=cmdb_mod1,proto3" json:"cmdb_mod1,omitempty"`
	CmdbMod2             *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=cmdb_mod2,proto3" json:"cmdb_mod2,omitempty"`
	CmdbMod3             *wrapperspb.StringValue   `protobuf:"bytes,9,opt,name=cmdb_mod3,proto3" json:"cmdb_mod3,omitempty"`
	Comment              *wrapperspb.StringValue   `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	Owners               *wrapperspb.StringValue   `protobuf:"bytes,11,opt,name=owners,proto3" json:"owners,omitempty"`
	Token                *wrapperspb.StringValue   `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	Ctime                *wrapperspb.StringValue   `protobuf:"bytes,13,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                *wrapperspb.StringValue   `protobuf:"bytes,14,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision             *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	PlatformId           *wrapperspb.StringValue   `protobuf:"bytes,16,opt,name=platform_id,proto3" json:"platform_id,omitempty"`
	TotalInstanceCount   *wrapperspb.UInt32Value   `protobuf:"bytes,17,opt,name=total_instance_count,proto3" json:"total_instance_count,omitempty"`
	HealthyInstanceCount *wrapperspb.UInt32Value   `protobuf:"bytes,18,opt,name=healthy_instance_count,proto3" json:"healthy_instance_count,omitempty"`
	UserIds              []*wrapperspb.StringValue `protobuf:"bytes,19,rep,name=user_ids,proto3" json:"user_ids,omitempty"`
	GroupIds             []*wrapperspb.StringValue `protobuf:"bytes,20,rep,name=group_ids,proto3" json:"group_ids,omitempty"`
	RemoveUserIds        []*wrapperspb.StringValue `protobuf:"bytes,22,rep,name=remove_user_ids,proto3" json:"remove_user_ids,omitempty"`
	RemoveGroupIds       []*wrapperspb.StringValue `protobuf:"bytes,23,rep,name=remove_group_ids,proto3" json:"remove_group_ids,omitempty"`
	Id                   *wrapperspb.StringValue   `protobuf:"bytes,21,opt,name=id,proto3" json:"id,omitempty"`
	Editable             *wrapperspb.BoolValue     `protobuf:"bytes,24,opt,name=editable,proto3" json:"editable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (dst *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(dst, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() *wrapperspb.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Service) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Service) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Service) GetPorts() *wrapperspb.StringValue {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Service) GetBusiness() *wrapperspb.StringValue {
	if m != nil {
		return m.Business
	}
	return nil
}

func (m *Service) GetDepartment() *wrapperspb.StringValue {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *Service) GetCmdbMod1() *wrapperspb.StringValue {
	if m != nil {
		return m.CmdbMod1
	}
	return nil
}

func (m *Service) GetCmdbMod2() *wrapperspb.StringValue {
	if m != nil {
		return m.CmdbMod2
	}
	return nil
}

func (m *Service) GetCmdbMod3() *wrapperspb.StringValue {
	if m != nil {
		return m.CmdbMod3
	}
	return nil
}

func (m *Service) GetComment() *wrapperspb.StringValue {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *Service) GetOwners() *wrapperspb.StringValue {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Service) GetToken() *wrapperspb.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Service) GetCtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *Service) GetMtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Service) GetRevision() *wrapperspb.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Service) GetPlatformId() *wrapperspb.StringValue {
	if m != nil {
		return m.PlatformId
	}
	return nil
}

func (m *Service) GetTotalInstanceCount() *wrapperspb.UInt32Value {
	if m != nil {
		return m.TotalInstanceCount
	}
	return nil
}

func (m *Service) GetHealthyInstanceCount() *wrapperspb.UInt32Value {
	if m != nil {
		return m.HealthyInstanceCount
	}
	return nil
}

func (m *Service) GetUserIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *Service) GetGroupIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *Service) GetRemoveUserIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.RemoveUserIds
	}
	return nil
}

func (m *Service) GetRemoveGroupIds() []*wrapperspb.StringValue {
	if m != nil {
		return m.RemoveGroupIds
	}
	return nil
}

func (m *Service) GetId() *wrapperspb.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Service) GetEditable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Editable
	}
	return nil
}

type ServiceAlias struct {
	Service              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Alias                *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	AliasNamespace       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=alias_namespace,proto3" json:"alias_namespace,omitempty"`
	Type                 AliasType               `protobuf:"varint,5,opt,name=type,proto3,enum=polaris.v1.AliasType" json:"type,omitempty"`
	Owners               *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=owners,proto3" json:"owners,omitempty"`
	Comment              *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	ServiceToken         *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=service_token,proto3" json:"service_token,omitempty"`
	Ctime                *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Id                   *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Editable             *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=editable,proto3" json:"editable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ServiceAlias) Reset()         { *m = ServiceAlias{} }
func (m *ServiceAlias) String() string { return proto.CompactTextString(m) }
func (*ServiceAlias) ProtoMessage()    {}
func (*ServiceAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{1}
}
func (m *ServiceAlias) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAlias.Unmarshal(m, b)
}
func (m *ServiceAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAlias.Marshal(b, m, deterministic)
}
func (dst *ServiceAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAlias.Merge(dst, src)
}
func (m *ServiceAlias) XXX_Size() int {
	return xxx_messageInfo_ServiceAlias.Size(m)
}
func (m *ServiceAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAlias.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAlias proto.InternalMessageInfo

func (m *ServiceAlias) GetService() *wrapperspb.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceAlias) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *ServiceAlias) GetAlias() *wrapperspb.StringValue {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *ServiceAlias) GetAliasNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.AliasNamespace
	}
	return nil
}

func (m *ServiceAlias) GetType() AliasType {
	if m != nil {
		return m.Type
	}
	return AliasType_DEFAULT
}

func (m *ServiceAlias) GetOwners() *wrapperspb.StringValue {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *ServiceAlias) GetComment() *wrapperspb.StringValue {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *ServiceAlias) GetServiceToken() *wrapperspb.StringValue {
	if m != nil {
		return m.ServiceToken
	}
	return nil
}

func (m *ServiceAlias) GetCtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *ServiceAlias) GetMtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *ServiceAlias) GetId() *wrapperspb.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServiceAlias) GetEditable() *wrapperspb.BoolValue {
	if m != nil {
		return m.Editable
	}
	return nil
}

type Instance struct {
	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Namespace            *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	VpcId                *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=vpc_id,proto3" json:"vpc_id,omitempty"`
	Host                 *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port                 *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Version              *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Priority             *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight               *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=weight,proto3" json:"weight,omitempty"`
	EnableHealthCheck    *wrapperspb.BoolValue   `protobuf:"bytes,20,opt,name=enable_health_check,json=enableHealthCheck,proto3" json:"enable_health_check,omitempty"`
	HealthCheck          *HealthCheck            `protobuf:"bytes,10,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	Healthy              *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Isolate              *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=isolate,proto3" json:"isolate,omitempty"`
	Location             *model.Location         `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	Metadata             map[string]string       `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LogicSet             *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=logic_set,proto3" json:"logic_set,omitempty"`
	Ctime                *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision             *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=revision,proto3" json:"revision,omitempty"`
	ServiceToken         *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=service_token,proto3" json:"service_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{2}
}
func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (dst *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(dst, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetId() *wrapperspb.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Instance) GetService() *wrapperspb.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Instance) GetNamespace() *wrapperspb.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Instance) GetVpcId() *wrapperspb.StringValue {
	if m != nil {
		return m.VpcId
	}
	return nil
}

func (m *Instance) GetHost() *wrapperspb.StringValue {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *Instance) GetPort() *wrapperspb.UInt32Value {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Instance) GetProtocol() *wrapperspb.StringValue {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Instance) GetVersion() *wrapperspb.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Instance) GetPriority() *wrapperspb.UInt32Value {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *Instance) GetWeight() *wrapperspb.UInt32Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *Instance) GetEnableHealthCheck() *wrapperspb.BoolValue {
	if m != nil {
		return m.EnableHealthCheck
	}
	return nil
}

func (m *Instance) GetHealthCheck() *HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *Instance) GetHealthy() *wrapperspb.BoolValue {
	if m != nil {
		return m.Healthy
	}
	return nil
}

func (m *Instance) GetIsolate() *wrapperspb.BoolValue {
	if m != nil {
		return m.Isolate
	}
	return nil
}

func (m *Instance) GetLocation() *model.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Instance) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Instance) GetLogicSet() *wrapperspb.StringValue {
	if m != nil {
		return m.LogicSet
	}
	return nil
}

func (m *Instance) GetCtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *Instance) GetMtime() *wrapperspb.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Instance) GetRevision() *wrapperspb.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Instance) GetServiceToken() *wrapperspb.StringValue {
	if m != nil {
		return m.ServiceToken
	}
	return nil
}

type HealthCheck struct {
	Type                 HealthCheck_HealthCheckType `protobuf:"varint,1,opt,name=type,proto3,enum=polaris.v1.HealthCheck_HealthCheckType" json:"type,omitempty"`
	Heartbeat            *HeartbeatHealthCheck       `protobuf:"bytes,2,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{3}
}
func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (dst *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(dst, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetType() HealthCheck_HealthCheckType {
	if m != nil {
		return m.Type
	}
	return HealthCheck_UNKNOWN
}

func (m *HealthCheck) GetHeartbeat() *HeartbeatHealthCheck {
	if m != nil {
		return m.Heartbeat
	}
	return nil
}

type HeartbeatHealthCheck struct {
	Ttl                  *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HeartbeatHealthCheck) Reset()         { *m = HeartbeatHealthCheck{} }
func (m *HeartbeatHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HeartbeatHealthCheck) ProtoMessage()    {}
func (*HeartbeatHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_bffd37e24a8d07bc, []int{4}
}
func (m *HeartbeatHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatHealthCheck.Unmarshal(m, b)
}
func (m *HeartbeatHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatHealthCheck.Marshal(b, m, deterministic)
}
func (dst *HeartbeatHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatHealthCheck.Merge(dst, src)
}
func (m *HeartbeatHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HeartbeatHealthCheck.Size(m)
}
func (m *HeartbeatHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatHealthCheck proto.InternalMessageInfo

func (m *HeartbeatHealthCheck) GetTtl() *wrapperspb.UInt32Value {
	if m != nil {
		return m.Ttl
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "polaris.v1.Service")
	proto.RegisterMapType((map[string]string)(nil), "polaris.v1.Service.MetadataEntry")
	proto.RegisterType((*ServiceAlias)(nil), "polaris.v1.ServiceAlias")
	proto.RegisterType((*Instance)(nil), "polaris.v1.Instance")
	proto.RegisterMapType((map[string]string)(nil), "polaris.v1.Instance.MetadataEntry")
	proto.RegisterType((*HealthCheck)(nil), "polaris.v1.HealthCheck")
	proto.RegisterType((*HeartbeatHealthCheck)(nil), "polaris.v1.HeartbeatHealthCheck")
	proto.RegisterEnum("polaris.v1.AliasType", AliasType_name, AliasType_value)
	proto.RegisterEnum("polaris.v1.HealthCheck_HealthCheckType", HealthCheck_HealthCheckType_name, HealthCheck_HealthCheckType_value)
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_bffd37e24a8d07bc) }

var fileDescriptor_service_bffd37e24a8d07bc = []byte{
	// 1088 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x97, 0x7d, 0x4f, 0x1b, 0x37,
	0x1c, 0xc7, 0x1b, 0x02, 0x79, 0xf8, 0x85, 0x87, 0x60, 0xd2, 0xd6, 0x42, 0xd3, 0xc4, 0xa2, 0x49,
	0xeb, 0xa6, 0xed, 0x52, 0x02, 0xeb, 0x2a, 0xba, 0x21, 0x41, 0x01, 0xc1, 0xc6, 0x58, 0x15, 0x60,
	0x93, 0xf6, 0xcf, 0xc9, 0xb9, 0x98, 0xc4, 0xe2, 0xee, 0x7c, 0x3a, 0x3b, 0x41, 0x79, 0x11, 0x7b,
	0x21, 0x7b, 0x09, 0x7b, 0x51, 0x7d, 0x0f, 0x93, 0x7d, 0x0f, 0x31, 0xd0, 0xb4, 0x4e, 0xfa, 0x57,
	0x2f, 0xbd, 0xef, 0xe7, 0xe7, 0xb3, 0xfd, 0xf5, 0xf7, 0x67, 0x60, 0x45, 0xd0, 0x78, 0xc4, 0x3c,
	0xea, 0x44, 0x31, 0x97, 0x1c, 0x41, 0xc4, 0x7d, 0x12, 0x33, 0xe1, 0x8c, 0xb6, 0x37, 0xbf, 0xec,
	0x73, 0xde, 0xf7, 0x69, 0x4b, 0xbf, 0xe9, 0x0e, 0x6f, 0x5a, 0x77, 0x31, 0x89, 0x22, 0x1a, 0x8b,
	0x44, 0xbb, 0x59, 0x0b, 0x78, 0x8f, 0xfa, 0xc9, 0x8f, 0xe6, 0xfb, 0x1a, 0x94, 0x2f, 0x93, 0x52,
	0xe8, 0x25, 0x2c, 0x86, 0x24, 0xa0, 0xb8, 0xb0, 0x55, 0x78, 0x51, 0x6b, 0x7f, 0xe1, 0x24, 0x75,
	0x9c, 0xac, 0x8e, 0x73, 0x29, 0x63, 0x16, 0xf6, 0xff, 0x24, 0xfe, 0x90, 0x76, 0xb4, 0x12, 0xed,
	0x41, 0x55, 0xfd, 0x2b, 0x22, 0xe2, 0x51, 0xbc, 0x60, 0x81, 0x4d, 0xe4, 0xe8, 0x17, 0xa8, 0x04,
	0x54, 0x92, 0x1e, 0x91, 0x04, 0x17, 0xb7, 0x8a, 0x2f, 0x6a, 0xed, 0xaf, 0x9c, 0xc9, 0x2c, 0x9c,
	0xf4, 0xa3, 0x9c, 0xdf, 0x53, 0xcd, 0x71, 0x28, 0xe3, 0x71, 0x27, 0x47, 0x50, 0x1b, 0x96, 0x22,
	0x1e, 0x4b, 0x81, 0x17, 0x2d, 0x86, 0x4d, 0xa4, 0xe8, 0x35, 0x54, 0xba, 0x43, 0xc1, 0x42, 0x2a,
	0x04, 0x5e, 0xb2, 0xc0, 0x72, 0x35, 0xfa, 0x19, 0xa0, 0x47, 0x23, 0x12, 0xcb, 0x80, 0x86, 0x12,
	0x97, 0x2c, 0x58, 0x43, 0xaf, 0x96, 0xc9, 0x0b, 0x7a, 0x5d, 0x37, 0xe0, 0xbd, 0x6d, 0x5c, 0xb6,
	0x59, 0xa6, 0x5c, 0x6e, 0xb2, 0x6d, 0x5c, 0x99, 0x85, 0x6d, 0x9b, 0xec, 0x0e, 0xae, 0xce, 0xc2,
	0xee, 0xa0, 0x57, 0x50, 0xf6, 0x78, 0xa0, 0xa7, 0x0b, 0x16, 0x64, 0x26, 0x46, 0xbb, 0x50, 0xe2,
	0x77, 0x21, 0x8d, 0x05, 0xae, 0x59, 0x60, 0xa9, 0x56, 0xed, 0xa6, 0xe4, 0xb7, 0x34, 0xc4, 0xcb,
	0x36, 0xbb, 0xa9, 0xa5, 0x8a, 0xf1, 0x24, 0x0b, 0x28, 0x5e, 0xb1, 0x61, 0xb4, 0x54, 0x31, 0x81,
	0x66, 0x56, 0x6d, 0x18, 0x2d, 0x55, 0xae, 0x89, 0xe9, 0x88, 0x09, 0xc6, 0x43, 0xbc, 0x66, 0xe3,
	0x9a, 0x4c, 0x8d, 0xf6, 0xa1, 0x16, 0xf9, 0x44, 0xde, 0xf0, 0x38, 0x70, 0x59, 0x0f, 0xd7, 0x2d,
	0x60, 0x13, 0x40, 0xef, 0xa0, 0x21, 0xb9, 0x24, 0xbe, 0xcb, 0x42, 0x21, 0x49, 0xe8, 0x51, 0xd7,
	0xe3, 0xc3, 0x50, 0xe2, 0xf5, 0x29, 0x85, 0xae, 0xcf, 0x42, 0xb9, 0xd3, 0x4e, 0x0a, 0x7d, 0x90,
	0x44, 0x57, 0xf0, 0x6c, 0x40, 0x89, 0x2f, 0x07, 0xe3, 0x87, 0x35, 0x91, 0x45, 0xcd, 0x29, 0xac,
	0x5a, 0xa1, 0xa1, 0xa0, 0xb1, 0xcb, 0x7a, 0x02, 0x6f, 0xe8, 0xa3, 0xfc, 0x89, 0x15, 0xca, 0xd4,
	0xca, 0xa1, 0xfd, 0x98, 0x0f, 0x23, 0x8d, 0x36, 0x2c, 0xd0, 0x89, 0x1c, 0x9d, 0xc0, 0x5a, 0x4c,
	0x03, 0x3e, 0xa2, 0x6e, 0x3e, 0xf8, 0x33, 0x8b, 0x0a, 0x0f, 0x21, 0x74, 0x0a, 0xf5, 0xf4, 0xbf,
	0x26, 0x9f, 0xf2, 0xdc, 0xa2, 0xd0, 0x23, 0x0a, 0x7d, 0x0f, 0x0b, 0xac, 0x87, 0x9f, 0x5a, 0x6c,
	0xf3, 0x02, 0xeb, 0xa1, 0x57, 0x50, 0xa1, 0x3d, 0x26, 0x49, 0xd7, 0xa7, 0x18, 0x6b, 0x66, 0xf3,
	0x11, 0x73, 0xc8, 0xb9, 0x9f, 0xae, 0x59, 0xa6, 0xdd, 0x7c, 0x03, 0x2b, 0xf7, 0x42, 0x11, 0xd5,
	0xa1, 0x78, 0x4b, 0xc7, 0x3a, 0xb6, 0xab, 0x1d, 0xf5, 0x88, 0x1a, 0xb0, 0x34, 0x52, 0x94, 0xce,
	0xe4, 0x6a, 0x27, 0xf9, 0xb1, 0xb7, 0xf0, 0xba, 0xd0, 0xfc, 0x77, 0x09, 0x96, 0xd3, 0x68, 0x3d,
	0xf0, 0x19, 0x11, 0xea, 0x9c, 0xa7, 0xad, 0xc4, 0x2a, 0xf7, 0x33, 0xf1, 0x67, 0x45, 0x7f, 0x1b,
	0x96, 0x88, 0x1a, 0x1c, 0x17, 0x6d, 0x4e, 0xa1, 0x96, 0xaa, 0xdd, 0xd6, 0x0f, 0xee, 0x64, 0x54,
	0x9b, 0xe4, 0x7f, 0x08, 0xa1, 0x6f, 0x61, 0x51, 0x8e, 0x23, 0xaa, 0xf3, 0x7f, 0xb5, 0xfd, 0xd4,
	0x6c, 0x39, 0x7a, 0x41, 0xae, 0xc6, 0x11, 0xed, 0x68, 0x89, 0x11, 0x65, 0xa5, 0x19, 0xa2, 0xcc,
	0x08, 0xce, 0xf2, 0x2c, 0xc1, 0x79, 0x98, 0xf7, 0x74, 0x37, 0x89, 0x42, 0x9b, 0xb0, 0xbf, 0x8f,
	0x4c, 0x22, 0xb1, 0x3a, 0x47, 0x24, 0x82, 0x7d, 0x24, 0x26, 0x46, 0xaf, 0xcd, 0x61, 0xf4, 0x65,
	0x7b, 0xa3, 0x37, 0xdf, 0x57, 0xa1, 0x72, 0x96, 0x26, 0x4d, 0x3a, 0x64, 0xc1, 0x7a, 0xc8, 0xdc,
	0xd5, 0x0b, 0x73, 0xbb, 0xba, 0x38, 0x9b, 0xab, 0x77, 0xa1, 0x34, 0x8a, 0x3c, 0xd7, 0x32, 0x01,
	0x52, 0xad, 0xba, 0x74, 0x0d, 0xb8, 0x90, 0x56, 0x66, 0xd6, 0x4a, 0x45, 0xa8, 0xeb, 0xcc, 0xd4,
	0x1b, 0x8c, 0x99, 0xd8, 0x5a, 0xa9, 0xf2, 0x59, 0xbf, 0xf5, 0xb8, 0x6f, 0x65, 0xe5, 0x5c, 0xad,
	0xd6, 0x71, 0x44, 0x63, 0xdd, 0xfa, 0xac, 0xcc, 0x9c, 0x8a, 0x93, 0x11, 0x19, 0x8f, 0x99, 0x1c,
	0x4f, 0xf5, 0xb1, 0xf9, 0x9d, 0xb9, 0x5a, 0xad, 0xe2, 0x1d, 0x65, 0xfd, 0x81, 0x9c, 0xea, 0x61,
	0x93, 0x4b, 0xb5, 0xe8, 0x57, 0xd8, 0xa0, 0xa1, 0x32, 0x8d, 0x9b, 0xb4, 0x28, 0xd7, 0x1b, 0x50,
	0xef, 0x16, 0x37, 0x3e, 0xe9, 0xb6, 0xf5, 0x04, 0x3b, 0xd5, 0xd4, 0x5b, 0x05, 0xa1, 0x3d, 0x58,
	0xbe, 0x57, 0x24, 0x39, 0x17, 0xcf, 0xcd, 0xa4, 0x30, 0xe4, 0x9d, 0xda, 0xc0, 0x60, 0x77, 0xa1,
	0x9c, 0xf6, 0xc8, 0xf4, 0x74, 0x7c, 0x6c, 0xec, 0x4c, 0xaa, 0x28, 0x26, 0xb8, 0x4f, 0xa4, 0xcd,
	0xf9, 0xc8, 0xa4, 0xe8, 0x25, 0x54, 0x7c, 0xee, 0x11, 0xa9, 0x36, 0x27, 0xb9, 0x02, 0x35, 0xcc,
	0x6f, 0x3c, 0x4f, 0xdf, 0x75, 0x72, 0x15, 0xda, 0x37, 0xae, 0xdc, 0xab, 0xba, 0xc3, 0x35, 0x4d,
	0x22, 0x3b, 0x6b, 0x53, 0xef, 0xdc, 0x7b, 0x50, 0xf5, 0x79, 0x9f, 0x79, 0xae, 0xa0, 0xd2, 0xea,
	0x2a, 0x34, 0x91, 0x4f, 0xa2, 0xa9, 0x3e, 0x47, 0x34, 0xad, 0xcf, 0x77, 0x5b, 0x43, 0x33, 0xdd,
	0xd6, 0x1e, 0x05, 0xf0, 0xc6, 0xcc, 0x01, 0xfc, 0x79, 0xbd, 0xf9, 0xbf, 0x02, 0xd4, 0x4c, 0x23,
	0xbe, 0x49, 0x5b, 0x55, 0x41, 0xb7, 0xaa, 0x6f, 0xa6, 0x18, 0xd0, 0x7c, 0x36, 0x9a, 0xd7, 0x3e,
	0x54, 0x07, 0x94, 0xc4, 0xb2, 0x4b, 0x89, 0x4c, 0x33, 0x70, 0xeb, 0x41, 0x85, 0xe4, 0xa5, 0xe9,
	0xe5, 0x09, 0xd2, 0xfc, 0x01, 0xd6, 0x1e, 0x14, 0x46, 0x35, 0x28, 0x5f, 0x5f, 0xfc, 0x76, 0xf1,
	0xc7, 0x5f, 0x17, 0xf5, 0x27, 0x68, 0x05, 0xaa, 0xa7, 0xc7, 0x07, 0x9d, 0xab, 0xc3, 0xe3, 0x83,
	0xab, 0x7a, 0xa1, 0x79, 0x02, 0x8d, 0x0f, 0x55, 0x44, 0x0e, 0x14, 0xa5, 0xf4, 0xa7, 0xe6, 0xb6,
	0x79, 0x96, 0x95, 0xf0, 0xbb, 0xaf, 0xa1, 0x9a, 0xb7, 0x61, 0x35, 0xe0, 0xd1, 0xf1, 0xc9, 0xc1,
	0xf5, 0xf9, 0x55, 0xfd, 0x09, 0x02, 0x28, 0xbd, 0x3d, 0xff, 0xf1, 0xf2, 0xec, 0xa8, 0x5e, 0x38,
	0xfc, 0xa7, 0x00, 0x3f, 0x79, 0x3c, 0x70, 0x24, 0x0d, 0x3d, 0x1a, 0xca, 0x7c, 0x5e, 0x22, 0xa2,
	0x1e, 0xbb, 0x61, 0x89, 0xdd, 0x1d, 0x12, 0x31, 0x35, 0xd3, 0xec, 0x2f, 0xe5, 0x80, 0x84, 0xa4,
	0x4f, 0x0f, 0xb3, 0xeb, 0xcf, 0x3b, 0xf5, 0x0d, 0x7f, 0x1f, 0xf5, 0x99, 0x1c, 0x0c, 0xbb, 0x8e,
	0xc7, 0x83, 0x56, 0x5a, 0x25, 0xa0, 0x62, 0xd0, 0xba, 0x57, 0xa9, 0x25, 0xf8, 0x30, 0xf6, 0x68,
	0xab, 0xcf, 0x5b, 0x24, 0x62, 0xad, 0xd1, 0x76, 0x2b, 0xdb, 0xf5, 0xa4, 0x66, 0xb7, 0xa4, 0x27,
	0xb4, 0xf3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0x39, 0xe6, 0x29, 0x96, 0x0f, 0x00, 0x00,
}
